{"application": "software-mentions", "version": "0.8.0", "date": "2024-03-07T09:57+0000", "md5": "5EC73792448FA8748E1044A3E0C09DB1", "mentions": [{"type": "software", "software-type": "software", "software-name": {"rawForm": "ThirdStep", "normalizedForm": "ThirdStep", "offsetStart": 0, "offsetEnd": 9}, "context": "ThirdStep can have a very large complexity for large R. ", "mentionContextAttributes": {"used": {"value": false, "score": 5.048513412475586e-05}, "created": {"value": false, "score": 4.762411117553711e-05}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9920408129692078}, "created": {"value": false, "score": 0.0004572272300720215}, "shared": {"value": false, "score": 2.0265579223632812e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "SecondStep", "normalizedForm": "SecondStep", "offsetStart": 5, "offsetEnd": 15}, "context": "In a SecondStep, we then construct E 2 the set of products of two distinct primes taking one prime factor as large as possible, and fill in a set RES product of two integers that lie outside [29]'s proof (lemma 1), but we wish to keep information on the primes we pick for E 2 and those we will not pick as those represent the necessary information to complete the missing elements of a RNS base of maximal size.", "mentionContextAttributes": {"used": {"value": true, "score": 0.8488824367523193}, "created": {"value": false, "score": 1.0907649993896484e-05}, "shared": {"value": false, "score": 1.8477439880371094e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999975860118866}, "created": {"value": false, "score": 1.2099742889404297e-05}, "shared": {"value": false, "score": 1.8477439880371094e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FirstStep", "normalizedForm": "FirstStep", "offsetStart": 6, "offsetEnd": 15}, "context": "After FirstStep, if E 1 is not a solution by itself (most often not), then we can continue our process using the leftover primes within P to find candidates to expand E 1 .", "mentionContextAttributes": {"used": {"value": false, "score": 0.00039321184158325195}, "created": {"value": false, "score": 0.00045055150985717773}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999975860118866}, "created": {"value": false, "score": 0.0010323524475097656}, "shared": {"value": false, "score": 2.980232238769531e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "NewSecondStep", "normalizedForm": "NewSecondStep", "offsetStart": 7, "offsetEnd": 20}, "context": "Hence, NewSecondStep presented in Algorithm 8. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.016299307346343994}, "created": {"value": false, "score": 0.00016307830810546875}, "shared": {"value": false, "score": 4.172325134277344e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.6297746896743774}, "created": {"value": false, "score": 0.003268301486968994}, "shared": {"value": false, "score": 5.364418029785156e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ThirdStep", "normalizedForm": "ThirdStep", "offsetStart": 24, "offsetEnd": 33}, "context": "Note that the output of ThirdStep does not theoretically guarantee a set of pairwise coprime integers since given primes p, q, x, w, integers a = p \u00d7 q \u00d7 z and b = p \u00d7 x \u00d7 w could be valid integers within I.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9706821441650391}, "created": {"value": false, "score": 2.2113323211669922e-05}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9920408129692078}, "created": {"value": false, "score": 0.0004572272300720215}, "shared": {"value": false, "score": 2.0265579223632812e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "NewFirstStep", "normalizedForm": "NewFirstStep", "offsetStart": 32, "offsetEnd": 44}, "context": "We can trivially see that after NewFirstStep, only products of at least two distinct primes can form a valid element of I. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0007016658782958984}, "created": {"value": false, "score": 5.823373794555664e-05}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9992092251777649}, "created": {"value": false, "score": 0.003268301486968994}, "shared": {"value": false, "score": 5.364418029785156e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "SecondStep", "normalizedForm": "SecondStep", "offsetStart": 34, "offsetEnd": 44}, "context": "Let R n be the set R outputted by SecondStep when the entry set is I n and the primes given were already filtered out by FirstStep. ", "mentionContextAttributes": {"used": {"value": true, "score": 0.999975860118866}, "created": {"value": false, "score": 8.761882781982422e-06}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999975860118866}, "created": {"value": false, "score": 1.2099742889404297e-05}, "shared": {"value": false, "score": 1.8477439880371094e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "NewThirdStep", "normalizedForm": "NewThirdStep", "offsetStart": 34, "offsetEnd": 46}, "context": "If it is not the case, we move to NewThirdStep. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.050271689891815186}, "created": {"value": false, "score": 0.16318565607070923}, "shared": {"value": false, "score": 6.556510925292969e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.050271689891815186}, "created": {"value": false, "score": 0.16318565607070923}, "shared": {"value": false, "score": 7.748603820800781e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "SecondStep", "normalizedForm": "SecondStep", "offsetStart": 35, "offsetEnd": 45}, "context": "Note that R n = \u2205 is the result of SecondStep and directly implies that The only cases where ThirdStep did not output an empty set are the following: In the above cases, calling a graph algorithm is clearly unnecessary.", "mentionContextAttributes": {"used": {"value": true, "score": 0.8636453151702881}, "created": {"value": false, "score": 1.1265277862548828e-05}, "shared": {"value": false, "score": 5.364418029785156e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999975860118866}, "created": {"value": false, "score": 1.2099742889404297e-05}, "shared": {"value": false, "score": 1.8477439880371094e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "SecondStep", "normalizedForm": "SecondStep", "offsetStart": 37, "offsetEnd": 47}, "context": "Do note that at the end of Algorithm SecondStep, if both R and RES are empty, then C is a maximum clique and ThirdStep would actually do nothing as there is nothing to search within, as E 1 and E 2 have been constructed using only \"proven picks\" that do not reduce the size of an optimal solution.", "mentionContextAttributes": {"used": {"value": false, "score": 0.004297018051147461}, "created": {"value": false, "score": 1.2099742889404297e-05}, "shared": {"value": false, "score": 4.172325134277344e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999975860118866}, "created": {"value": false, "score": 1.2099742889404297e-05}, "shared": {"value": false, "score": 1.8477439880371094e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "NewFirstStep", "normalizedForm": "NewFirstStep", "offsetStart": 37, "offsetEnd": 49}, "context": "Let E 1 , P L , P H be the result of NewFirstStep on some initial set of numbers I. Let M \u2282 I be a RNS base.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9992092251777649}, "created": {"value": false, "score": 2.1755695343017578e-05}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9992092251777649}, "created": {"value": false, "score": 0.003268301486968994}, "shared": {"value": false, "score": 5.364418029785156e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "NewSecondStep", "normalizedForm": "NewSecondStep", "offsetStart": 46, "offsetEnd": 59}, "context": "The algorithms can be constructed by swapping NewSecondStep by GreedyMerge (algorithm 10) when needed. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.47293198108673096}, "created": {"value": false, "score": 0.00044411420822143555}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.6297746896743774}, "created": {"value": false, "score": 0.003268301486968994}, "shared": {"value": false, "score": 5.364418029785156e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "NewFirstStep", "normalizedForm": "NewFirstStep", "offsetStart": 59, "offsetEnd": 71}, "context": "In particular, we can show in those specific examples that NewFirstStep+GreedyMerge outperforms NewFirstStep+NewSecondStep, while proving maximality of the result using property 4 (i.e no need for further processing). ", "mentionContextAttributes": {"used": {"value": true, "score": 0.6297746896743774}, "created": {"value": false, "score": 9.834766387939453e-06}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9992092251777649}, "created": {"value": false, "score": 0.003268301486968994}, "shared": {"value": false, "score": 5.364418029785156e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "SecondStep", "normalizedForm": "SecondStep", "offsetStart": 63, "offsetEnd": 73}, "context": "Note that in the case \u03b4 = \u221a I max , RES is empty at the end of SecondStep.", "mentionContextAttributes": {"used": {"value": false, "score": 0.07932507991790771}, "created": {"value": false, "score": 3.3974647521972656e-06}, "shared": {"value": false, "score": 1.7881393432617188e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999975860118866}, "created": {"value": false, "score": 1.2099742889404297e-05}, "shared": {"value": false, "score": 1.8477439880371094e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "GreedyMerge", "normalizedForm": "GreedyMerge", "offsetStart": 63, "offsetEnd": 74}, "context": "The algorithms can be constructed by swapping NewSecondStep by GreedyMerge (algorithm 10) when needed.", "mentionContextAttributes": {"used": {"value": false, "score": 0.47293198108673096}, "created": {"value": false, "score": 0.00044411420822143555}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.6297746896743774}, "created": {"value": false, "score": 0.00044411420822143555}, "shared": {"value": false, "score": 2.980232238769531e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "NewThirdStep", "normalizedForm": "NewThirdStep", "offsetStart": 68, "offsetEnd": 80}, "context": "If not (or there is no easier way than bruteforce), then we move to NewThirdStep.", "mentionContextAttributes": {"used": {"value": false, "score": 0.001828610897064209}, "created": {"value": false, "score": 0.04054725170135498}, "shared": {"value": false, "score": 7.748603820800781e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.050271689891815186}, "created": {"value": false, "score": 0.16318565607070923}, "shared": {"value": false, "score": 7.748603820800781e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "NewSecondStep", "normalizedForm": "NewSecondStep", "offsetStart": 68, "offsetEnd": 81}, "context": "13: return RES Before we describe the middle procedure we will name NewSecondStep between NewFirstStep and NewThird-Step, we need to explain how we plan to select the valid combinations and when we can terminate NewSecondStep and move on to NewThirdStep.", "mentionContextAttributes": {"used": {"value": false, "score": 0.038316547870635986}, "created": {"value": false, "score": 0.003268301486968994}, "shared": {"value": false, "score": 5.364418029785156e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.6297746896743774}, "created": {"value": false, "score": 0.003268301486968994}, "shared": {"value": false, "score": 5.364418029785156e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ThirdStep", "normalizedForm": "ThirdStep", "offsetStart": 71, "offsetEnd": 80}, "context": "We can observe from Table 1 that the size of R n is low enough to make ThirdStep inexpensive. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.05433464050292969}, "created": {"value": false, "score": 0.0001652240753173828}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9920408129692078}, "created": {"value": false, "score": 0.0004572272300720215}, "shared": {"value": false, "score": 2.0265579223632812e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "GreedyMerge", "normalizedForm": "GreedyMerge", "offsetStart": 72, "offsetEnd": 83}, "context": "In particular, we can show in those specific examples that NewFirstStep+GreedyMerge outperforms NewFirstStep+NewSecondStep, while proving maximality of the result using property 4 (i.e no need for further processing). ", "mentionContextAttributes": {"used": {"value": true, "score": 0.6297746896743774}, "created": {"value": false, "score": 9.834766387939453e-06}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.6297746896743774}, "created": {"value": false, "score": 0.00044411420822143555}, "shared": {"value": false, "score": 2.980232238769531e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "MAGMA 2", "normalizedForm": "MAGMA 2", "offsetStart": 74, "offsetEnd": 81}, "context": "Our test were perfromed on a i7 -8565 CPU based laptop and implemented in MAGMA 2 . ", "mentionContextAttributes": {"used": {"value": true, "score": 0.9999924302101135}, "created": {"value": false, "score": 0.23759746551513672}, "shared": {"value": false, "score": 1.7881393432617188e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9999924302101135}, "created": {"value": false, "score": 0.23759746551513672}, "shared": {"value": false, "score": 1.7881393432617188e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "NewFirstStep", "normalizedForm": "NewFirstStep", "offsetStart": 90, "offsetEnd": 102}, "context": "13: return RES Before we describe the middle procedure we will name NewSecondStep between NewFirstStep and NewThird-Step, we need to explain how we plan to select the valid combinations and when we can terminate NewSecondStep and move on to NewThirdStep.", "mentionContextAttributes": {"used": {"value": false, "score": 0.038316547870635986}, "created": {"value": false, "score": 0.003268301486968994}, "shared": {"value": false, "score": 5.364418029785156e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9992092251777649}, "created": {"value": false, "score": 0.003268301486968994}, "shared": {"value": false, "score": 5.364418029785156e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ThirdStep", "normalizedForm": "ThirdStep", "offsetStart": 93, "offsetEnd": 102}, "context": "Note that R n = \u2205 is the result of SecondStep and directly implies that The only cases where ThirdStep did not output an empty set are the following: In the above cases, calling a graph algorithm is clearly unnecessary.", "mentionContextAttributes": {"used": {"value": true, "score": 0.8636453151702881}, "created": {"value": false, "score": 1.1265277862548828e-05}, "shared": {"value": false, "score": 5.364418029785156e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9920408129692078}, "created": {"value": false, "score": 0.0004572272300720215}, "shared": {"value": false, "score": 2.0265579223632812e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FirstStep", "normalizedForm": "FirstStep", "offsetStart": 95, "offsetEnd": 104}, "context": "We explain below our method to compute E 1 the set of prime powers within I with the algorithm FirstStep, keeping information about the primes not being used for E 1 as those are necessary later.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9103456735610962}, "created": {"value": false, "score": 0.0010323524475097656}, "shared": {"value": false, "score": 1.7881393432617188e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999975860118866}, "created": {"value": false, "score": 0.0010323524475097656}, "shared": {"value": false, "score": 2.980232238769531e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ThirdStep", "normalizedForm": "ThirdStep", "offsetStart": 96, "offsetEnd": 105}, "context": "Thus it is very important that previous steps eliminate as many small primes as possible before ThirdStep.", "mentionContextAttributes": {"used": {"value": false, "score": 0.00048166513442993164}, "created": {"value": false, "score": 0.0004572272300720215}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9920408129692078}, "created": {"value": false, "score": 0.0004572272300720215}, "shared": {"value": false, "score": 2.0265579223632812e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "NewFirstStep", "normalizedForm": "NewFirstStep", "offsetStart": 96, "offsetEnd": 108}, "context": "In particular, we can show in those specific examples that NewFirstStep+GreedyMerge outperforms NewFirstStep+NewSecondStep, while proving maximality of the result using property 4 (i.e no need for further processing). ", "mentionContextAttributes": {"used": {"value": true, "score": 0.6297746896743774}, "created": {"value": false, "score": 9.834766387939453e-06}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9992092251777649}, "created": {"value": false, "score": 0.003268301486968994}, "shared": {"value": false, "score": 5.364418029785156e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ThirdStep", "normalizedForm": "ThirdStep", "offsetStart": 109, "offsetEnd": 118}, "context": "Do note that at the end of Algorithm SecondStep, if both R and RES are empty, then C is a maximum clique and ThirdStep would actually do nothing as there is nothing to search within, as E 1 and E 2 have been constructed using only \"proven picks\" that do not reduce the size of an optimal solution.", "mentionContextAttributes": {"used": {"value": false, "score": 0.004297018051147461}, "created": {"value": false, "score": 1.2099742889404297e-05}, "shared": {"value": false, "score": 4.172325134277344e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9920408129692078}, "created": {"value": false, "score": 0.0004572272300720215}, "shared": {"value": false, "score": 2.0265579223632812e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "NewSecondStep", "normalizedForm": "NewSecondStep", "offsetStart": 109, "offsetEnd": 122}, "context": "In particular, we can show in those specific examples that NewFirstStep+GreedyMerge outperforms NewFirstStep+NewSecondStep, while proving maximality of the result using property 4 (i.e no need for further processing). ", "mentionContextAttributes": {"used": {"value": true, "score": 0.6297746896743774}, "created": {"value": false, "score": 9.834766387939453e-06}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.6297746896743774}, "created": {"value": false, "score": 0.003268301486968994}, "shared": {"value": false, "score": 5.364418029785156e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FirstStep", "normalizedForm": "FirstStep", "offsetStart": 121, "offsetEnd": 130}, "context": "Let R n be the set R outputted by SecondStep when the entry set is I n and the primes given were already filtered out by FirstStep. ", "mentionContextAttributes": {"used": {"value": true, "score": 0.999975860118866}, "created": {"value": false, "score": 8.761882781982422e-06}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.999975860118866}, "created": {"value": false, "score": 0.0010323524475097656}, "shared": {"value": false, "score": 2.980232238769531e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "GenericFactorFilter", "normalizedForm": "GenericFactorFilter", "offsetStart": 123, "offsetEnd": 142}, "context": "Now that we have introduced in details all three core building blocks, we can build by concatenation the general algorithm GenericFactorFilter in algorithm 9. s \u2190 min(S)", "mentionContextAttributes": {"used": {"value": false, "score": 0.0010910630226135254}, "created": {"value": true, "score": 0.9889428615570068}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0010910630226135254}, "created": {"value": true, "score": 0.9889428615570068}, "shared": {"value": false, "score": 2.980232238769531e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "GreedyMerge", "normalizedForm": "GreedyMerge", "offsetStart": 133, "offsetEnd": 144}, "context": "It is very easy to verify whether or not an integer belongs to I, and it also seems that on this example the heuristic attempt using GreedyMerge also directly outputs an optimal RNS basis giving E 2 of size 210 for a total RNS base of 229 moduli (E 1 has size 19).", "mentionContextAttributes": {"used": {"value": false, "score": 0.25309115648269653}, "created": {"value": false, "score": 2.3305416107177734e-05}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.6297746896743774}, "created": {"value": false, "score": 0.00044411420822143555}, "shared": {"value": false, "score": 2.980232238769531e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ThirdStep", "normalizedForm": "ThirdStep", "offsetStart": 198, "offsetEnd": 207}, "context": "The method to find an element of \u03a6(S, I) is then the following: The full process is described by Algorithm 5. Note that this filter can also be applied after the previous filter since the output of ThirdStep is also a set, thus our two algorithms are not mutually exclusive.", "mentionContextAttributes": {"used": {"value": false, "score": 0.25048255920410156}, "created": {"value": false, "score": 9.948015213012695e-05}, "shared": {"value": false, "score": 1.1324882507324219e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9920408129692078}, "created": {"value": false, "score": 0.0004572272300720215}, "shared": {"value": false, "score": 2.0265579223632812e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "NewSecondStep", "normalizedForm": "NewSecondStep", "offsetStart": 212, "offsetEnd": 225}, "context": "13: return RES Before we describe the middle procedure we will name NewSecondStep between NewFirstStep and NewThird-Step, we need to explain how we plan to select the valid combinations and when we can terminate NewSecondStep and move on to NewThirdStep.", "mentionContextAttributes": {"used": {"value": false, "score": 0.03831666707992554}, "created": {"value": false, "score": 0.003268301486968994}, "shared": {"value": false, "score": 5.364418029785156e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.6297746896743774}, "created": {"value": false, "score": 0.003268301486968994}, "shared": {"value": false, "score": 5.364418029785156e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "NewThirdStep", "normalizedForm": "NewThirdStep", "offsetStart": 241, "offsetEnd": 253}, "context": "13: return RES Before we describe the middle procedure we will name NewSecondStep between NewFirstStep and NewThird-Step, we need to explain how we plan to select the valid combinations and when we can terminate NewSecondStep and move on to NewThirdStep.", "mentionContextAttributes": {"used": {"value": false, "score": 0.038316428661346436}, "created": {"value": false, "score": 0.0032682418823242188}, "shared": {"value": false, "score": 4.76837158203125e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.050271689891815186}, "created": {"value": false, "score": 0.16318565607070923}, "shared": {"value": false, "score": 7.748603820800781e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ThirdStep", "normalizedForm": "ThirdStep", "offsetStart": 260, "offsetEnd": 269}, "context": "When a product of two primes does not satisfy lemma 1, if this product belongs to I then we store it in a set RES, and if one of this two primes could appear in a product of three primes, which belongs to I, we store them in a set R. RES and R are used in the ThirdStep.", "mentionContextAttributes": {"used": {"value": true, "score": 0.772881031036377}, "created": {"value": false, "score": 4.887580871582031e-06}, "shared": {"value": false, "score": 1.0728836059570312e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9920408129692078}, "created": {"value": false, "score": 0.0004572272300720215}, "shared": {"value": false, "score": 2.0265579223632812e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ThirdStep", "normalizedForm": "ThirdStep", "offsetStart": 343, "offsetEnd": 352}, "context": "We basically reconstruct I S by bruteforce for S = E 1 \u222a E 2 in order to reduce the search to \u03a6(E 1 \u222a E 2 , I) = \u03a6(S, I S ) where I S is essentially composed of the integers within I coprime to S which should be exactly RES and the missing combinations involving primes in R. Constructing I S , if not proven to be empty, is done by algorithm ThirdStep, which stores in RES any possible product combination of the powers of the remaining primes within R fitting I.", "mentionContextAttributes": {"used": {"value": true, "score": 0.9920408129692078}, "created": {"value": false, "score": 5.602836608886719e-06}, "shared": {"value": false, "score": 2.0265579223632812e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9920408129692078}, "created": {"value": false, "score": 0.0004572272300720215}, "shared": {"value": false, "score": 2.0265579223632812e-06}}}], "references": [], "runtime": 120880, "id": "58c0cc31119e041744f50764c0d1a151fcc5d7dc", "metadata": {"id": "58c0cc31119e041744f50764c0d1a151fcc5d7dc"}, "original_file_path": "../../datalake/downloads/ART_test_xml/hal-03719386.grobid.tei.xml", "file_name": "hal-03719386.grobid.tei.xml"}