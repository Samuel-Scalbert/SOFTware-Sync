{"application": "software-mentions", "version": "0.8.0", "date": "2024-03-06T15:44+0000", "md5": "BE7764278D04128C41F04F439B1DAB51", "mentions": [{"type": "software", "software-type": "software", "software-name": {"rawForm": "Guix", "normalizedForm": "Guix", "offsetStart": 0, "offsetEnd": 4}, "context": "Guix provides a command-line interface similar to that of other package managers: guix install python, for instance, installs the Python interpreter. ", "mentionContextAttributes": {"used": {"value": false, "score": 3.975629806518555e-05}, "created": {"value": false, "score": 0.00015282630920410156}, "shared": {"value": false, "score": 6.556510925292969e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9965587854385376}, "created": {"value": true, "score": 0.9999287724494934}, "shared": {"value": false, "score": 2.6881694793701172e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Guix", "normalizedForm": "Guix", "offsetStart": 0, "offsetEnd": 4}, "context": "Guix makes it easy to define package variants, so we can define package variants optimized for a specific CPU-compiled with -march=skylake, for instance. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.00013566017150878906}, "created": {"value": false, "score": 0.0003046989440917969}, "shared": {"value": false, "score": 1.0132789611816406e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9965587854385376}, "created": {"value": true, "score": 0.9999287724494934}, "shared": {"value": false, "score": 2.6881694793701172e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Guix", "normalizedForm": "Guix", "offsetStart": 0, "offsetEnd": 4}, "context": "Guix records package transformation options that were used so it can \"replay\" them. ", "mentionContextAttributes": {"used": {"value": true, "score": 0.9965587854385376}, "created": {"value": false, "score": 1.245737075805664e-05}, "shared": {"value": false, "score": 6.556510925292969e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9965587854385376}, "created": {"value": true, "score": 0.9999287724494934}, "shared": {"value": false, "score": 2.6881694793701172e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "guix", "normalizedForm": "guix", "offsetStart": 2, "offsetEnd": 6}, "context": "$ guix shell --tune eigen-benchmarks --\\ benchBlasGemm 240 240 240 guix shell: tuning for CPU skylake 240 x 240 x 240 cblas: 0.208547 (15.908", "mentionContextAttributes": {"used": {"value": true, "score": 0.790754497051239}, "created": {"value": false, "score": 4.351139068603516e-06}, "shared": {"value": false, "score": 4.172325134277344e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.790754497051239}, "created": {"value": false, "score": 0.000671088695526123}, "shared": {"value": false, "score": 1.6093254089355469e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "guix", "normalizedForm": "guix", "offsetStart": 2, "offsetEnd": 6}, "context": "$ guix shell eigen-benchmarks --tune guix shell: tuning for CPU skylake [env]$ guix package --export-manifest \\ -p $GUIX ENVIRONMENT (use-modules (guix transformations)) (define transform1 (options->transformation '((tune .", "mentionContextAttributes": {"used": {"value": false, "score": 0.013786375522613525}, "created": {"value": false, "score": 3.2782554626464844e-06}, "shared": {"value": false, "score": 5.364418029785156e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.790754497051239}, "created": {"value": false, "score": 0.000671088695526123}, "shared": {"value": false, "score": 1.6093254089355469e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Spack", "normalizedForm": "Spack", "offsetStart": 4, "offsetEnd": 13}, "context": "The Spack [7] and EasyBuild [8] package managers address that by rebuilding software on the target computer, which allows them to instruct the compiler to optimize for the host CPU.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0021046996116638184}, "created": {"value": false, "score": 0.00012564659118652344}, "shared": {"value": false, "score": 1.6093254089355469e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0021046996116638184}, "created": {"value": false, "score": 0.0004361271858215332}, "shared": {"value": false, "score": 1.9669532775878906e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Guix", "normalizedForm": "Guix", "offsetStart": 13, "offsetEnd": 17}, "context": "This ensures Guix does not end up rebuilding packages that could not possibly benefit from micro-architecture-specific optimizations, which would be a waste of resources.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0002281665802001953}, "created": {"value": false, "score": 0.0017400383949279785}, "shared": {"value": false, "score": 4.172325134277344e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9965587854385376}, "created": {"value": true, "score": 0.9999287724494934}, "shared": {"value": false, "score": 2.6881694793701172e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Guix", "normalizedForm": "Guix", "offsetStart": 15, "offsetEnd": 19}, "context": "To avoid that, Guix builds software in isolated environments, as pioneered by Nix [1,6], and its package collection is self-contained-it does not rely on external software packages. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0001571178436279297}, "created": {"value": false, "score": 0.006353318691253662}, "shared": {"value": false, "score": 5.364418029785156e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9965587854385376}, "created": {"value": true, "score": 0.9999287724494934}, "shared": {"value": false, "score": 2.6881694793701172e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "EasyBuild", "normalizedForm": "EasyBuild", "offsetStart": 15, "offsetEnd": 24}, "context": "Unfortunately, EasyBuild and Spack both have limited support for reproducible deployment-they do not, in general, guarantee that you can redeploy the same software environment on different machines, or at different points in time. ", "mentionContextAttributes": {"used": {"value": false, "score": 4.64320182800293e-05}, "created": {"value": false, "score": 0.0004361271858215332}, "shared": {"value": false, "score": 1.9669532775878906e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0021046996116638184}, "created": {"value": false, "score": 0.0004361271858215332}, "shared": {"value": false, "score": 1.9669532775878906e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Guix", "normalizedForm": "Guix", "offsetStart": 16, "offsetEnd": 20}, "context": "Quite uniquely, Guix supports \"time traveling\": with guix time-machine, users can run a specific revision of Guix and use it to deploy packages as they were defined in that revision. ", "mentionContextAttributes": {"used": {"value": false, "score": 4.845857620239258e-05}, "created": {"value": false, "score": 0.000671088695526123}, "shared": {"value": false, "score": 1.6093254089355469e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9965587854385376}, "created": {"value": true, "score": 0.9999287724494934}, "shared": {"value": false, "score": 2.6881694793701172e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "EasyBuild", "normalizedForm": "EasyBuild", "offsetStart": 18, "offsetEnd": 31}, "context": "The Spack [7] and EasyBuild [8] package managers address that by rebuilding software on the target computer, which allows them to instruct the compiler to optimize for the host CPU.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0021046996116638184}, "created": {"value": false, "score": 0.00012564659118652344}, "shared": {"value": false, "score": 1.6093254089355469e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0021046996116638184}, "created": {"value": false, "score": 0.0004361271858215332}, "shared": {"value": false, "score": 1.9669532775878906e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Guix", "normalizedForm": "Guix", "offsetStart": 19, "offsetEnd": 23}, "context": "We like to present Guix as a key element of the reproducible research toolbox: as more research output is produced by software, the ability to verify and validate research results depends on the ability to redeploy and re-run the software. ", "mentionContextAttributes": {"used": {"value": false, "score": 9.137392044067383e-05}, "created": {"value": true, "score": 0.9997737407684326}, "shared": {"value": false, "score": 4.351139068603516e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9965587854385376}, "created": {"value": true, "score": 0.9999287724494934}, "shared": {"value": false, "score": 2.6881694793701172e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Guix", "normalizedForm": "Guix", "offsetStart": 19, "offsetEnd": 23}, "context": "This is what makes Guix builds reproducible bit-for-bit-or in other words, verifiable [10]. ", "mentionContextAttributes": {"used": {"value": false, "score": 8.541345596313477e-05}, "created": {"value": false, "score": 0.0014504790306091309}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9965587854385376}, "created": {"value": true, "score": 0.9999287724494934}, "shared": {"value": false, "score": 2.6881694793701172e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Guix", "normalizedForm": "Guix", "offsetStart": 26, "offsetEnd": 30}, "context": "When --tune is used, from Guix's viewpoint, it is just an alternate, but well-defined dependency graph that gets built.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0012937188148498535}, "created": {"value": false, "score": 4.988908767700195e-05}, "shared": {"value": false, "score": 2.980232238769531e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9965587854385376}, "created": {"value": true, "score": 0.9999287724494934}, "shared": {"value": false, "score": 2.6881694793701172e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Spack", "normalizedForm": "Spack", "offsetStart": 29, "offsetEnd": 34}, "context": "Unfortunately, EasyBuild and Spack both have limited support for reproducible deployment-they do not, in general, guarantee that you can redeploy the same software environment on different machines, or at different points in time. ", "mentionContextAttributes": {"used": {"value": false, "score": 4.64320182800293e-05}, "created": {"value": false, "score": 0.0004361271858215332}, "shared": {"value": false, "score": 1.9669532775878906e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0021046996116638184}, "created": {"value": false, "score": 0.0004361271858215332}, "shared": {"value": false, "score": 1.9669532775878906e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CentOS", "normalizedForm": "CentOS", "offsetStart": 33, "offsetEnd": 39}, "context": "Distributions such as Debian and CentOS provide the convenience of fast automated deployment, thanks to pre-built binaries; asking users to either recompile part of their software stack or give up on performance is not a reasonable alternative.", "mentionContextAttributes": {"used": {"value": false, "score": 4.8220157623291016e-05}, "created": {"value": false, "score": 0.0003750920295715332}, "shared": {"value": false, "score": 1.233816146850586e-05}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0001811981201171875}, "created": {"value": false, "score": 0.0003750920295715332}, "shared": {"value": false, "score": 1.233816146850586e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "NumPy", "normalizedForm": "NumPy", "offsetStart": 34, "offsetEnd": 39}, "context": "The command below deploys Python, NumPy, and their dependencies as they were defined in a Guix revision from October 2021:", "mentionContextAttributes": {"used": {"value": true, "score": 0.6936231851577759}, "created": {"value": false, "score": 0.0003552436828613281}, "shared": {"value": false, "score": 1.7881393432617188e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.6936231851577759}, "created": {"value": false, "score": 0.0003552436828613281}, "shared": {"value": false, "score": 1.7881393432617188e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "guix", "normalizedForm": "guix", "offsetStart": 37, "offsetEnd": 41}, "context": "$ guix shell eigen-benchmarks --tune guix shell: tuning for CPU skylake [env]$ guix package --export-manifest \\ -p $GUIX ENVIRONMENT (use-modules (guix transformations)) (define transform1 (options->transformation '((tune .", "mentionContextAttributes": {"used": {"value": false, "score": 0.013786375522613525}, "created": {"value": false, "score": 3.2782554626464844e-06}, "shared": {"value": false, "score": 5.364418029785156e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.790754497051239}, "created": {"value": false, "score": 0.000671088695526123}, "shared": {"value": false, "score": 1.6093254089355469e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Eigen", "normalizedForm": "Eigen", "offsetStart": 39, "offsetEnd": 44}, "language": {"rawForm": "C++", "normalizedForm": "C++"}, "context": "For example, here is how you would run Eigen's matrix multiplication benchmark from the eigen-benchmarks package micro-architecture tuning:", "mentionContextAttributes": {"used": {"value": true, "score": 0.9998157024383545}, "created": {"value": false, "score": 0.00020122528076171875}, "shared": {"value": false, "score": 1.7881393432617188e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9998157024383545}, "created": {"value": false, "score": 0.006320595741271973}, "shared": {"value": false, "score": 2.086162567138672e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "GNU", "normalizedForm": "GNU", "offsetStart": 51, "offsetEnd": 54}, "context": "To make it easier for developers to adopt FMV, the GNU compilation tool chain (GCC, the Binary Utilities, and the C Library), which is widely used in HPC, provides helpers at different levels.", "mentionContextAttributes": {"used": {"value": false, "score": 9.876489639282227e-05}, "created": {"value": false, "score": 0.0007963776588439941}, "shared": {"value": false, "score": 0.00031948089599609375}}, "documentContextAttributes": {"used": {"value": false, "score": 0.1779930591583252}, "created": {"value": true, "score": 0.9999287724494934}, "shared": {"value": false, "score": 0.00031948089599609375}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "guix", "normalizedForm": "guix", "offsetStart": 53, "offsetEnd": 57}, "context": "Quite uniquely, Guix supports \"time traveling\": with guix time-machine, users can run a specific revision of Guix and use it to deploy packages as they were defined in that revision.", "mentionContextAttributes": {"used": {"value": false, "score": 4.845857620239258e-05}, "created": {"value": false, "score": 0.000671088695526123}, "shared": {"value": false, "score": 1.6093254089355469e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.790754497051239}, "created": {"value": false, "score": 0.000671088695526123}, "shared": {"value": false, "score": 1.6093254089355469e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "GNU", "normalizedForm": "GNU", "offsetStart": 54, "offsetEnd": 57}, "context": "This question is particularly acute in the context of GNU Guix, a software deployment tool with strong support for reproducible deployment. ", "mentionContextAttributes": {"used": {"value": false, "score": 4.178285598754883e-05}, "created": {"value": false, "score": 0.04034477472305298}, "shared": {"value": false, "score": 7.748603820800781e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.1779930591583252}, "created": {"value": true, "score": 0.9999287724494934}, "shared": {"value": false, "score": 0.00031948089599609375}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Guix", "normalizedForm": "Guix", "offsetStart": 55, "offsetEnd": 59}, "context": "We present a recently-introduced CPU-tuning option for Guix, the design choices we made, and how this affects reproducibility.", "mentionContextAttributes": {"used": {"value": false, "score": 9.840726852416992e-05}, "created": {"value": true, "score": 0.9999133944511414}, "shared": {"value": false, "score": 8.940696716308594e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9965587854385376}, "created": {"value": true, "score": 0.9999287724494934}, "shared": {"value": false, "score": 2.6881694793701172e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "guix install", "normalizedForm": "guix install", "offsetStart": 55, "offsetEnd": 67}, "context": "Users can pass --tune to any of the commandline tools (guix install, guix shell, etc.) and that causes \"tunable\" packages to be optimized for the host CPU. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0003343820571899414}, "created": {"value": false, "score": 0.0001316070556640625}, "shared": {"value": false, "score": 1.3709068298339844e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0003343820571899414}, "created": {"value": false, "score": 0.0001316070556640625}, "shared": {"value": false, "score": 1.3709068298339844e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Guix", "normalizedForm": "Guix", "offsetStart": 57, "offsetEnd": 61}, "context": "To offer the level of flexibility that HPC users expect, Guix lets users customize packages via package transformation options on the command line-for instance to swap two packages in the dependency graph-or through programming interfaces [2].", "mentionContextAttributes": {"used": {"value": false, "score": 4.571676254272461e-05}, "created": {"value": false, "score": 0.0002893209457397461}, "shared": {"value": false, "score": 2.6881694793701172e-05}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9965587854385376}, "created": {"value": true, "score": 0.9999287724494934}, "shared": {"value": false, "score": 2.6881694793701172e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Guix", "normalizedForm": "Guix", "offsetStart": 58, "offsetEnd": 62}, "context": "This question is particularly acute in the context of GNU Guix, a software deployment tool with strong support for reproducible deployment. ", "mentionContextAttributes": {"used": {"value": false, "score": 4.178285598754883e-05}, "created": {"value": false, "score": 0.04034477472305298}, "shared": {"value": false, "score": 7.748603820800781e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9965587854385376}, "created": {"value": true, "score": 0.9999287724494934}, "shared": {"value": false, "score": 2.6881694793701172e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "guix", "normalizedForm": "guix", "offsetStart": 59, "offsetEnd": 63}, "context": "The manifest above is a code snippet that can be passed to guix shell or guix package to redeploy the package with the same tuning parameters.", "mentionContextAttributes": {"used": {"value": false, "score": 0.031756818294525146}, "created": {"value": false, "score": 8.159875869750977e-05}, "shared": {"value": false, "score": 5.364418029785156e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.790754497051239}, "created": {"value": false, "score": 0.000671088695526123}, "shared": {"value": false, "score": 1.6093254089355469e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "GNU", "normalizedForm": "GNU", "offsetStart": 63, "offsetEnd": 66}, "context": "We propose package multi-versioning, a technique developed for GNU Guix, a tool for reproducible software deployment, and show that it allows us to implement CPU tuning without compromising on reproducibility and provenance tracking.", "mentionContextAttributes": {"used": {"value": false, "score": 9.340047836303711e-05}, "created": {"value": true, "score": 0.9999287724494934}, "shared": {"value": false, "score": 5.185604095458984e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.1779930591583252}, "created": {"value": true, "score": 0.9999287724494934}, "shared": {"value": false, "score": 0.00031948089599609375}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Guix", "normalizedForm": "Guix", "offsetStart": 67, "offsetEnd": 71}, "context": "We propose package multi-versioning, a technique developed for GNU Guix, a tool for reproducible software deployment, and show that it allows us to implement CPU tuning without compromising on reproducibility and provenance tracking.", "mentionContextAttributes": {"used": {"value": false, "score": 9.340047836303711e-05}, "created": {"value": true, "score": 0.9999287724494934}, "shared": {"value": false, "score": 5.185604095458984e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9965587854385376}, "created": {"value": true, "score": 0.9999287724494934}, "shared": {"value": false, "score": 2.6881694793701172e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "guix", "normalizedForm": "guix", "offsetStart": 67, "offsetEnd": 71}, "context": "$ guix shell --tune eigen-benchmarks --\\ benchBlasGemm 240 240 240 guix shell: tuning for CPU skylake 240 x 240 x 240 cblas: 0.208547 (15.908", "mentionContextAttributes": {"used": {"value": true, "score": 0.790754497051239}, "created": {"value": false, "score": 4.351139068603516e-06}, "shared": {"value": false, "score": 4.172325134277344e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.790754497051239}, "created": {"value": false, "score": 0.000671088695526123}, "shared": {"value": false, "score": 1.6093254089355469e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "guix shell", "normalizedForm": "guix shell", "offsetStart": 69, "offsetEnd": 79}, "context": "Users can pass --tune to any of the commandline tools (guix install, guix shell, etc.) and that causes \"tunable\" packages to be optimized for the host CPU. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0003343820571899414}, "created": {"value": false, "score": 0.0001316070556640625}, "shared": {"value": false, "score": 1.3709068298339844e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0003343820571899414}, "created": {"value": false, "score": 0.0001316070556640625}, "shared": {"value": false, "score": 1.3709068298339844e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "guix package", "normalizedForm": "guix package", "offsetStart": 73, "offsetEnd": 85}, "context": "The manifest above is a code snippet that can be passed to guix shell or guix package to redeploy the package with the same tuning parameters. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.0317569375038147}, "created": {"value": false, "score": 8.159875869750977e-05}, "shared": {"value": false, "score": 5.364418029785156e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0317569375038147}, "created": {"value": false, "score": 8.159875869750977e-05}, "shared": {"value": false, "score": 5.364418029785156e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "guix", "normalizedForm": "guix", "offsetStart": 79, "offsetEnd": 83}, "context": "$ guix shell eigen-benchmarks --tune guix shell: tuning for CPU skylake [env]$ guix package --export-manifest \\ -p $GUIX ENVIRONMENT (use-modules (guix transformations)) (define transform1 (options->transformation '((tune .", "mentionContextAttributes": {"used": {"value": false, "score": 0.013786375522613525}, "created": {"value": false, "score": 3.2782554626464844e-06}, "shared": {"value": false, "score": 5.364418029785156e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.790754497051239}, "created": {"value": false, "score": 0.000671088695526123}, "shared": {"value": false, "score": 1.6093254089355469e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "guix", "normalizedForm": "guix", "offsetStart": 82, "offsetEnd": 86}, "context": "Guix provides a command-line interface similar to that of other package managers: guix install python, for instance, installs the Python interpreter. ", "mentionContextAttributes": {"used": {"value": false, "score": 3.975629806518555e-05}, "created": {"value": false, "score": 0.00015282630920410156}, "shared": {"value": false, "score": 6.556510925292969e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.790754497051239}, "created": {"value": false, "score": 0.000671088695526123}, "shared": {"value": false, "score": 1.6093254089355469e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ARPACK-NG", "normalizedForm": "ARPACK-NG", "offsetStart": 85, "offsetEnd": 94}, "context": "It can have a very concrete impact on performance since many scientific packages-the ARPACK-NG library for solving eigenvalue problems, the Ceres solver for optimization problems, the FEn-iCSx platform for solving differential equations, to name a few-depend on Eigen.", "mentionContextAttributes": {"used": {"value": false, "score": 4.4405460357666016e-05}, "created": {"value": false, "score": 0.006320595741271973}, "shared": {"value": false, "score": 4.172325134277344e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 4.4405460357666016e-05}, "created": {"value": false, "score": 0.006320595741271973}, "shared": {"value": false, "score": 4.172325134277344e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Guix", "normalizedForm": "Guix", "offsetStart": 90, "offsetEnd": 94}, "context": "The command below deploys Python, NumPy, and their dependencies as they were defined in a Guix revision from October 2021:", "mentionContextAttributes": {"used": {"value": true, "score": 0.6936231851577759}, "created": {"value": false, "score": 0.0003552436828613281}, "shared": {"value": false, "score": 1.7881393432617188e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9965587854385376}, "created": {"value": true, "score": 0.9999287724494934}, "shared": {"value": false, "score": 2.6881694793701172e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "libc", "normalizedForm": "libc", "offsetStart": 97, "offsetEnd": 101}, "context": "Many pieces of performance-critical software already use this technique: the C standard library (libc) contains multiple versions of its string handling and math routines, the GMP library for multi-precision arithmetic uses FMV, and so do software packages ranging from cryptography libraries (Libgcrypt, Nettle) to linear algebra (OpenBLAS, FFTW).", "mentionContextAttributes": {"used": {"value": false, "score": 0.0003184080123901367}, "created": {"value": false, "score": 0.0018044114112854004}, "shared": {"value": false, "score": 8.940696716308594e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0003184080123901367}, "created": {"value": false, "score": 0.0018044114112854004}, "shared": {"value": false, "score": 8.940696716308594e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Guix", "normalizedForm": "Guix", "offsetStart": 109, "offsetEnd": 113}, "context": "Quite uniquely, Guix supports \"time traveling\": with guix time-machine, users can run a specific revision of Guix and use it to deploy packages as they were defined in that revision. ", "mentionContextAttributes": {"used": {"value": false, "score": 4.845857620239258e-05}, "created": {"value": false, "score": 0.000671088695526123}, "shared": {"value": false, "score": 1.6093254089355469e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9965587854385376}, "created": {"value": true, "score": 0.9999287724494934}, "shared": {"value": false, "score": 2.6881694793701172e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Eigen", "normalizedForm": "Eigen", "offsetStart": 119, "offsetEnd": 124}, "language": {"rawForm": "C++", "normalizedForm": "C++"}, "context": "There is no shortage of C++ header-only math libraries providing efficient, optimized SIMD versions of their routines: Eigen, MIPP, xsimd and xtensor, SIMD Everywhere (SIMDe), Highway, and many more.", "mentionContextAttributes": {"used": {"value": false, "score": 4.357099533081055e-05}, "created": {"value": false, "score": 0.00037735700607299805}, "shared": {"value": false, "score": 4.172325134277344e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9998157024383545}, "created": {"value": false, "score": 0.006320595741271973}, "shared": {"value": false, "score": 2.086162567138672e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Eigen", "normalizedForm": "Eigen", "offsetStart": 131, "offsetEnd": 136}, "language": {"rawForm": "C++", "normalizedForm": "C++"}, "context": "Thus, when compiling those packages for the baseline ISA, one misses out on all the vectorized implementations that libraries like Eigen provide. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.00464862585067749}, "created": {"value": false, "score": 4.1544437408447266e-05}, "shared": {"value": false, "score": 1.7881393432617188e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9998157024383545}, "created": {"value": false, "score": 0.006320595741271973}, "shared": {"value": false, "score": 2.086162567138672e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "xsimd", "normalizedForm": "xsimd", "offsetStart": 132, "offsetEnd": 137}, "context": "There is no shortage of C++ header-only math libraries providing efficient, optimized SIMD versions of their routines: Eigen, MIPP, xsimd and xtensor, SIMD Everywhere (SIMDe), Highway, and many more. ", "mentionContextAttributes": {"used": {"value": false, "score": 4.357099533081055e-05}, "created": {"value": false, "score": 0.00037735700607299805}, "shared": {"value": false, "score": 4.172325134277344e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 4.357099533081055e-05}, "created": {"value": false, "score": 0.00037735700607299805}, "shared": {"value": false, "score": 4.172325134277344e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Eigen", "normalizedForm": "Eigen", "offsetStart": 137, "offsetEnd": 142}, "language": {"rawForm": "C++", "normalizedForm": "C++", "wikidataId": "Q2407", "offsetStart": 106, "offsetEnd": 109}, "context": "Distributions such as Debian and Fedora that provide pre-built binaries miss out on SIMD optimizations of C++ header-only libraries like Eigen because they provide binaries targeting the baseline CPU architecture so that those binaries run on any CPU. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.00026035308837890625}, "created": {"value": false, "score": 3.725290298461914e-05}, "shared": {"value": false, "score": 8.940696716308594e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9998157024383545}, "created": {"value": false, "score": 0.006320595741271973}, "shared": {"value": false, "score": 2.086162567138672e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Ceres", "normalizedForm": "Ceres", "offsetStart": 140, "offsetEnd": 145}, "context": "It can have a very concrete impact on performance since many scientific packages-the ARPACK-NG library for solving eigenvalue problems, the Ceres solver for optimization problems, the FEn-iCSx platform for solving differential equations, to name a few-depend on Eigen.", "mentionContextAttributes": {"used": {"value": false, "score": 4.4405460357666016e-05}, "created": {"value": false, "score": 0.006320595741271973}, "shared": {"value": false, "score": 4.172325134277344e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 4.4405460357666016e-05}, "created": {"value": false, "score": 0.006320595741271973}, "shared": {"value": false, "score": 4.172325134277344e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "xtensor", "normalizedForm": "xtensor", "offsetStart": 142, "offsetEnd": 149}, "context": "There is no shortage of C++ header-only math libraries providing efficient, optimized SIMD versions of their routines: Eigen, MIPP, xsimd and xtensor, SIMD Everywhere (SIMDe), Highway, and many more. ", "mentionContextAttributes": {"used": {"value": false, "score": 4.357099533081055e-05}, "created": {"value": false, "score": 0.00037735700607299805}, "shared": {"value": false, "score": 4.172325134277344e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 4.357099533081055e-05}, "created": {"value": false, "score": 0.00037735700607299805}, "shared": {"value": false, "score": 4.172325134277344e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "guix", "normalizedForm": "guix", "offsetStart": 147, "offsetEnd": 151}, "context": "$ guix shell eigen-benchmarks --tune guix shell: tuning for CPU skylake [env]$ guix package --export-manifest \\ -p $GUIX ENVIRONMENT (use-modules (guix transformations)) (define transform1 (options->transformation '((tune .", "mentionContextAttributes": {"used": {"value": false, "score": 0.013786375522613525}, "created": {"value": false, "score": 3.2782554626464844e-06}, "shared": {"value": false, "score": 5.364418029785156e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.790754497051239}, "created": {"value": false, "score": 0.000671088695526123}, "shared": {"value": false, "score": 1.6093254089355469e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "SIMD Everywhere", "normalizedForm": "SIMD Everywhere", "offsetStart": 151, "offsetEnd": 166}, "context": "There is no shortage of C++ header-only math libraries providing efficient, optimized SIMD versions of their routines: Eigen, MIPP, xsimd and xtensor, SIMD Everywhere (SIMDe), Highway, and many more. ", "mentionContextAttributes": {"used": {"value": false, "score": 4.357099533081055e-05}, "created": {"value": false, "score": 0.00037735700607299805}, "shared": {"value": false, "score": 4.172325134277344e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 4.357099533081055e-05}, "created": {"value": false, "score": 0.00037735700607299805}, "shared": {"value": false, "score": 4.172325134277344e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Eigen", "normalizedForm": "Eigen", "offsetStart": 152, "offsetEnd": 157}, "language": {"rawForm": "C++", "normalizedForm": "C++"}, "context": "For example, on a modest Intel CORE i7 processor (of the Skylake generation), the AVX2-optimized version of the dense matrix multiplication routines of Eigen (https://eigen.tuxfamily.org),", "mentionContextAttributes": {"used": {"value": true, "score": 0.9111270308494568}, "created": {"value": false, "score": 0.00032639503479003906}, "shared": {"value": false, "score": 2.086162567138672e-06}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9998157024383545}, "created": {"value": false, "score": 0.006320595741271973}, "shared": {"value": false, "score": 2.086162567138672e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "guix", "normalizedForm": "guix", "offsetStart": 159, "offsetEnd": 163}, "context": "Like other transformation options, --tune is accepted by all the commands; for example, here is how you would build a Docker image tuned for a particular CPU: guix pack -f docker -S /bin=bin eigen-benchmarks --tune=skylake", "mentionContextAttributes": {"used": {"value": false, "score": 0.0011371374130249023}, "created": {"value": false, "score": 1.6391277313232422e-05}, "shared": {"value": false, "score": 5.364418029785156e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.790754497051239}, "created": {"value": false, "score": 0.000671088695526123}, "shared": {"value": false, "score": 1.6093254089355469e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "ld.so", "normalizedForm": "ld.so", "offsetStart": 169, "offsetEnd": 174}, "context": "GCC not only generates these versions, but also generates code to choose the right function version for the host CPU at load time, with support from the dynamic linker, ld.so. ", "mentionContextAttributes": {"used": {"value": false, "score": 0.000209808349609375}, "created": {"value": false, "score": 0.0005410909652709961}, "shared": {"value": false, "score": 8.100271224975586e-05}}, "documentContextAttributes": {"used": {"value": false, "score": 0.000209808349609375}, "created": {"value": false, "score": 0.0005410909652709961}, "shared": {"value": false, "score": 8.100271224975586e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "CentOS", "normalizedForm": "CentOS", "offsetStart": 180, "offsetEnd": 186}, "context": "This is because they build upon software provided by the host system-the compiler tool chain, \"system\" libraries, etc.-and that foundation differs from one system to another-e.g., CentOS might provide some version of GCC, and Ubuntu might provide another.", "mentionContextAttributes": {"used": {"value": false, "score": 0.0001811981201171875}, "created": {"value": false, "score": 0.00036144256591796875}, "shared": {"value": false, "score": 4.351139068603516e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0001811981201171875}, "created": {"value": false, "score": 0.0003750920295715332}, "shared": {"value": false, "score": 1.233816146850586e-05}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FEn-", "normalizedForm": "FEn", "offsetStart": 184, "offsetEnd": 188}, "context": "It can have a very concrete impact on performance since many scientific packages-the ARPACK-NG library for solving eigenvalue problems, the Ceres solver for optimization problems, the FEn-iCSx platform for solving differential equations, to name a few-depend on Eigen.", "mentionContextAttributes": {"used": {"value": false, "score": 4.4405460357666016e-05}, "created": {"value": false, "score": 0.006320595741271973}, "shared": {"value": false, "score": 4.172325134277344e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 4.4405460357666016e-05}, "created": {"value": false, "score": 0.006320595741271973}, "shared": {"value": false, "score": 4.172325134277344e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Eigen", "normalizedForm": "Eigen", "offsetStart": 262, "offsetEnd": 267}, "language": {"rawForm": "C++", "normalizedForm": "C++"}, "context": "It can have a very concrete impact on performance since many scientific packages-the ARPACK-NG library for solving eigenvalue problems, the Ceres solver for optimization problems, the FEn-iCSx platform for solving differential equations, to name a few-depend on Eigen.", "mentionContextAttributes": {"used": {"value": false, "score": 4.4405460357666016e-05}, "created": {"value": false, "score": 0.006320595741271973}, "shared": {"value": false, "score": 4.172325134277344e-07}}, "documentContextAttributes": {"used": {"value": true, "score": 0.9998157024383545}, "created": {"value": false, "score": 0.006320595741271973}, "shared": {"value": false, "score": 2.086162567138672e-06}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Libgcrypt", "normalizedForm": "Libgcrypt", "offsetStart": 294, "offsetEnd": 303}, "context": "Many pieces of performance-critical software already use this technique: the C standard library (libc) contains multiple versions of its string handling and math routines, the GMP library for multi-precision arithmetic uses FMV, and so do software packages ranging from cryptography libraries (Libgcrypt, Nettle) to linear algebra (OpenBLAS, FFTW).", "mentionContextAttributes": {"used": {"value": false, "score": 0.0003184080123901367}, "created": {"value": false, "score": 0.0018044114112854004}, "shared": {"value": false, "score": 8.940696716308594e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0003184080123901367}, "created": {"value": false, "score": 0.0018044114112854004}, "shared": {"value": false, "score": 8.940696716308594e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Nettle", "normalizedForm": "Nettle", "offsetStart": 305, "offsetEnd": 311}, "context": "Many pieces of performance-critical software already use this technique: the C standard library (libc) contains multiple versions of its string handling and math routines, the GMP library for multi-precision arithmetic uses FMV, and so do software packages ranging from cryptography libraries (Libgcrypt, Nettle) to linear algebra (OpenBLAS, FFTW).", "mentionContextAttributes": {"used": {"value": false, "score": 0.0003184080123901367}, "created": {"value": false, "score": 0.0018044114112854004}, "shared": {"value": false, "score": 8.940696716308594e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0003184080123901367}, "created": {"value": false, "score": 0.0018044114112854004}, "shared": {"value": false, "score": 8.940696716308594e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "OpenBLAS", "normalizedForm": "OpenBLAS", "offsetStart": 332, "offsetEnd": 340}, "context": "Many pieces of performance-critical software already use this technique: the C standard library (libc) contains multiple versions of its string handling and math routines, the GMP library for multi-precision arithmetic uses FMV, and so do software packages ranging from cryptography libraries (Libgcrypt, Nettle) to linear algebra (OpenBLAS, FFTW).", "mentionContextAttributes": {"used": {"value": false, "score": 0.0003184080123901367}, "created": {"value": false, "score": 0.0018044114112854004}, "shared": {"value": false, "score": 8.940696716308594e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0003184080123901367}, "created": {"value": false, "score": 0.0018044114112854004}, "shared": {"value": false, "score": 8.940696716308594e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "FFTW", "normalizedForm": "FFTW", "offsetStart": 342, "offsetEnd": 346}, "context": "Many pieces of performance-critical software already use this technique: the C standard library (libc) contains multiple versions of its string handling and math routines, the GMP library for multi-precision arithmetic uses FMV, and so do software packages ranging from cryptography libraries (Libgcrypt, Nettle) to linear algebra (OpenBLAS, FFTW).", "mentionContextAttributes": {"used": {"value": false, "score": 0.0003184080123901367}, "created": {"value": false, "score": 0.0018044114112854004}, "shared": {"value": false, "score": 8.940696716308594e-07}}, "documentContextAttributes": {"used": {"value": false, "score": 0.0003184080123901367}, "created": {"value": false, "score": 0.0018044114112854004}, "shared": {"value": false, "score": 8.940696716308594e-07}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "GNU", "normalizedForm": "GNU", "offsetStart": 363, "offsetEnd": 366}, "context": "The author remembers advice heard at the beginning of their career in HPC-advice still given today-: that to get optimal MPI performance, you would have to use the vendor-provided MPI library; that to get your code to perform well on this new cluster, you would have to recompile the complete software stack locally; that using generic, pre-built binaries from a GNU/Linux distribution will not give you good performance.", "mentionContextAttributes": {"used": {"value": false, "score": 0.1779930591583252}, "created": {"value": false, "score": 0.0016589164733886719}, "shared": {"value": false, "score": 3.814697265625e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.1779930591583252}, "created": {"value": true, "score": 0.9999287724494934}, "shared": {"value": false, "score": 0.00031948089599609375}}}, {"type": "software", "software-type": "software", "software-name": {"rawForm": "Linux", "normalizedForm": "Linux", "offsetStart": 367, "offsetEnd": 372}, "context": "The author remembers advice heard at the beginning of their career in HPC-advice still given today-: that to get optimal MPI performance, you would have to use the vendor-provided MPI library; that to get your code to perform well on this new cluster, you would have to recompile the complete software stack locally; that using generic, pre-built binaries from a GNU/Linux distribution will not give you good performance.", "mentionContextAttributes": {"used": {"value": false, "score": 0.1779935359954834}, "created": {"value": false, "score": 0.0016589164733886719}, "shared": {"value": false, "score": 3.814697265625e-06}}, "documentContextAttributes": {"used": {"value": false, "score": 0.1779935359954834}, "created": {"value": false, "score": 0.0016589164733886719}, "shared": {"value": false, "score": 3.814697265625e-06}}}], "references": [], "runtime": 130761, "id": "e38416e7360ea159f69732d326419415aec58f9c", "metadata": {"id": "e38416e7360ea159f69732d326419415aec58f9c"}, "original_file_path": "../../datalake/downloads/ART/xml/hal-03604971.grobid.tei.xml", "file_name": "hal-03604971.grobid.tei.xml"}