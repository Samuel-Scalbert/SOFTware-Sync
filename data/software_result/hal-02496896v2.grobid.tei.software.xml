<TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xml:space="preserve" xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Compressive Learning with Privacy Guarantees</title>
				<funder ref="#_gXNWUW5">
					<orgName type="full">FNRS</orgName>
				</funder>
				<funder>
					<orgName type="full">"Fonds de la Recherche Scientifique" (F.R.S. -FNRS</orgName>
				</funder>
			</titleStmt>
			<publicationStmt>
				<publisher />
				<availability status="unknown"><licence /></availability>
				<date type="published" when="2021-01-20">January 20, 2021</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">A</forename><surname>Chatalic</surname></persName>
							<affiliation key="aff0">
								<orgName type="laboratory">IRISA (</orgName>
								<orgName type="institution" key="instit1">Univ. Rennes</orgName>
								<orgName type="institution" key="instit2">Inria</orgName>
								<orgName type="institution" key="instit3">CNRS</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">V</forename><surname>Schellekens</surname></persName>
							<affiliation key="aff1">
								<orgName type="laboratory">ICTEAM/ELEN</orgName>
								<orgName type="institution">UCLouvain (</orgName>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">R</forename><surname>Gribonval</surname></persName>
							<affiliation key="aff0">
								<orgName type="laboratory">IRISA (</orgName>
								<orgName type="institution" key="instit1">Univ. Rennes</orgName>
								<orgName type="institution" key="instit2">Inria</orgName>
								<orgName type="institution" key="instit3">CNRS</orgName>
							</affiliation>
							<affiliation key="aff1">
								<orgName type="laboratory">ICTEAM/ELEN</orgName>
								<orgName type="institution">UCLouvain (</orgName>
							</affiliation>
							<affiliation key="aff3">
								<orgName type="institution" key="instit1">Univ Lyon</orgName>
								<orgName type="institution" key="instit2">Inria</orgName>
								<orgName type="institution" key="instit3">CNRS</orgName>
								<orgName type="institution" key="instit4">ENS de Lyon</orgName>
								<orgName type="institution" key="instit5">UCB Lyon 1</orgName>
								<orgName type="institution" key="instit6">LIP</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff2">
								<orgName type="institution">Imperial College London</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Compressive Learning with Privacy Guarantees</title>
					</analytic>
					<monogr>
						<imprint>
							<date type="published" when="2021-01-20">January 20, 2021</date>
						</imprint>
					</monogr>
					<idno type="MD5">DAFAD8D8A3DC0F417CF57056C4878EDA</idno>
					<idno type="DOI">10.1093/imaiai/iaab005</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.8.0" ident="GROBID" when="2024-03-07T09:37+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid" />
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div><p>This work addresses the problem of learning from large collections of data with privacy guarantees. The compressive learning framework proposes to deal with the large scale of datasets by compressing them into a single vector of generalized random moments, called a sketch vector, from which the learning task is then performed. We provide sharp bounds on the so-called sensitivity of this sketching mechanism. This allows to leverage standard techniques to ensure differential privacy -a well established formalism for defining and quantifying the privacy of a random mechanism -by adding Laplace of Gaussian noise to the sketch. We combine these standard mechanisms with a new feature subsampling mechanism, which reduces the computational cost without damaging privacy. The overall framework is applied to the tasks of Gaussian modeling, k-means clustering and principal component analysis (PCA), for which sharp privacy bounds are derived. Empirically, the quality (for subsequent learning) of the compressed representation produced by our mechanism is strongly related with the induced noise level, for which we give analytical expressions.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div><head n="1">Introduction</head><p>The size and availability of datasets has increased dramatically in the last few decades, leading to tremendous breakthroughs in machine learning and artificial intelligence. However, the large volume and level of detail of these data present two key challenges. Firstly, the sheer size of datasets calls for new machine learning methods able to process them efficiently, both in time and memory. Secondly, the data collected is often of a sensitive nature, and using it to learn publicly released models raises serious privacy concerns, creating a need for algorithms that guarantee the privacy of the dataset contributors.</p><p>Compressive learning <ref type="bibr" target="#b27">[27]</ref> has been proposed as an answer to the first challenge. In the compressive learning framework, the dataset is compressed into a sketch, a vector of generalized random moments <ref type="bibr" target="#b15">[15]</ref> -obtained by averaging over the dataset certain random (nonlinear) features of the records <ref type="bibr" target="#b44">[44]</ref> -whose size is independent from the number of records. The learning step can then be performed from this sketch only, using greatly reduced computational resources (see Figure <ref type="figure">1</ref>). Once the sketch is computed, the dataset can be discarded. As opposed to many machine learning algorithms, compressive learning does not need the data to be stored in one place nor to be accessed multiple times; computing the sketch can be done in one pass over the data or from a data stream, has a low memory footprint, and is embarrassingly parallelizable. As the size of the sketch does not depend on the size of the dataset, but rather on the amount of information we want to extract from its underlying distribution, learning from this vector has a computational cost which is independent of the initial dataset size.</p><p>As compressive learning requires only aggregate information from many individual records, it is intuitively a good candidate to answer the second challenge of privacy preservation. Differential privacy (DP) <ref type="bibr" target="#b19">[19]</ref> was proposed by Dwork et al. as a formal privacy definition, that intuitively requires the output of an algorithm to not depend too much on the presence of any record in the dataset. It has many powerful properties, and has been shown to be robust to many attacks, which has made it widely accepted by the scientific community as a standard definition of privacy. It has further received a lot of attention in the industry <ref type="bibr" target="#b50">[50,</ref><ref type="bibr" target="#b23">23]</ref>.</p><p>A standard approach to ensure differential privacy is to add noise (typically Laplace or Gaussian) to the output of the mechanism one wishes to make private. The privacy level of the resulting randomized mechanism is then known to be determined by the so-called sensitivity of the initial mechanism, which we assume to be deterministic in the following. This is the approach conducted in this paper <ref type="foot" target="#foot_0">1</ref> , leading to a generic mechanism relying on noise addition that produces differentially private versions of the sketch, which is applied to the tasks of k-means clustering, Gaussian mixture modeling and principal component analysis (PCA). This differentially private sketch is a private representation of the dataset, which can be used -possibly multiple times and for different purposes -without infringing the privacy of any user in the dataset. By sharply characterizing the sensitivity of the sketching mechanism, we obtain sharp privacy guarantees for the resulting mechanism.</p><p>Subsampling the dataset is another common practice to enhance privacy <ref type="bibr" target="#b7">[7]</ref>. Although it does not allow to grant privacy alone, it is known to amplify privacy of any existing differentially-private mechanism <ref type="bibr" target="#b4">[4]</ref>. We introduce a simple feature subsampling mechanism, which differs from more standard data subsampling mechanisms, so that each data sample only contributes to some of the entries of the sketch, in order to reduce the computational cost of sketching. Privacy guarantees are also established for this mechanism through appropriately modified measures of sentitivity. Subsampling allows to reduce drastically the computational complexity, and can be performed in some settings without degrading the quality of the sketch for subsequent learning.</p><p>Finally, as privacy naturally has to be traded off for utility, we show empirically for the k-means clustering task that the utility of a noisy sketch is driven -provided the sketch dimension exceeds some task-dependent threshold -by a signal-to-noise ratio, which provides guidelines to parameter tuning of the algorithms. The obtained framework has thus a good balance between computational efficiency, privacy preservation and quality of the learned model.</p></div>
<div><head>Summary of contributions</head><p>The contributions of this paper are as follows:</p><p>• We build on existing compressive learning and differential privacy techniques to define a noisy sketching mechanism which exploits nonlinear random features. • We derive sharp sensitivity estimates for this mechanism, leading via standard tools to sharp differential privacy guarantees for sketches designed to handle three unsupervised learning tasks: k-means clustering, Gaussian mixture modeling and principal components analysis. • We extend our framework to subsampled sketches, giving the same privacy guarantees for a lower computational cost. • We show that the utility of a noisy sketch, i.e. its quality for subsequent learning, can be measured by a signal-to-noise ratio, and use this quantity for tuning some parameters.</p></div>
<div><head>Related Work</head><p>We focus on the three learning tasks considered in this paper: Gaussian modeling (GMM), PCA and k-means clustering. The two latter have already received a lot of attention in the differential privacy literature, while the former has been less studied. Addition of noise is the most common way to achieve differential privacy, whether it is on the intermediate steps of an iterative algorithm or directly on the output. Private variants of standard iterative methods include DPLloyd for k-means <ref type="bibr" target="#b8">[8]</ref>, and variants with improved convergence guarantees <ref type="bibr" target="#b38">[38]</ref>. The popular k-means++ seeding method has also been generalized to a private framework <ref type="bibr" target="#b41">[41]</ref>. For Gaussian modeling, DP-GMM <ref type="bibr" target="#b59">[59]</ref> and DP-EM <ref type="bibr" target="#b42">[42]</ref> have been proposed. Note that for iterative algorithms, the privacy budget needs to be split between iterations, de facto limiting the total number of iterates, which becomes a hyper-parameter. Our approach does not suffer from this drawback since the sketch is released at once. Moreover, the same sketch can be used to run the learning algorithm multiple times with e.g. different initializations.</p><p>Releasing a private synopsis of the data (similarly to our sketch) rather than directly a noisy solution has already been studied as well. EUGkM <ref type="bibr" target="#b43">[43,</ref><ref type="bibr" target="#b48">48]</ref> suggests for instance to use noisy histograms for clustering (but this method is by nature limited to small dimensions), and private coresets have been investigated by Feldman et al. <ref type="bibr" target="#b24">[24,</ref><ref type="bibr" target="#b25">25]</ref>. For PCA, noise can be added directly on the covariance matrix <ref type="bibr" target="#b22">[22]</ref>.</p><p>The exponential mechanism is another standard noise-additive approach for privacy. A random perturbation is drawn according to a distribution calibrated using a user-defined quality measure, and added to the output. It has been used with success for PCA, perturbing either the covariance <ref type="bibr" target="#b14">[14,</ref><ref type="bibr" target="#b30">30,</ref><ref type="bibr" target="#b29">29]</ref> or directly the eigenvectors of the covariance <ref type="bibr" target="#b31">[31,</ref><ref type="bibr" target="#b0">1]</ref>, and with genetic algorithms for k-means <ref type="bibr" target="#b60">[60]</ref>. Such algorithms depend strongly on the quality measure of the output, which must be chosen carefully. Our sketch-based approach is in contrast more generic: the same sketch allows to solve different tasks such as clustering and GMM fitting, and it can easily be extended to new sketches in the future. Alternatively, our mechanism can be seen as a straightforward instantiation of the exponential mechanism, where the output (the sketch) is carefully designed so that is makes sense to simply use the 𝐿 1 or 𝐿 2 norms as quality measures.</p><p>Our sketching mechanism makes use of random projections, which have proven to be very useful to solve efficiently large-scale problems, and induce as well a controlled loss of information which can be leveraged to derive privacy guarantees <ref type="bibr" target="#b9">[9]</ref>. Balcan et al. investigated the large-scale high-dimensional clustering setting with an approach based on Johnson-Lindenstrauss dimensionality reduction <ref type="bibr" target="#b3">[3]</ref>. Many other embeddings based on random projections have been proposed, see e.g. <ref type="bibr" target="#b32">[32]</ref>. Linear compression of the number of samples (rather than reducing the dimension) has been considered <ref type="bibr" target="#b61">[61]</ref> but is less scalable. Random algorithms have also been used for PCA and, more generally, for low-rank factorization <ref type="bibr" target="#b28">[28,</ref><ref type="bibr" target="#b53">53,</ref><ref type="bibr" target="#b1">2]</ref>. Note however that as explained in the next section, the features resulting from the random projection undergo in our setting a nonlinear transformation, in the spirit of random features <ref type="bibr" target="#b44">[44]</ref>, and are averaged; they thus differ a lot from what is done in these works, although they share this common idea.</p><p>Private k-means clustering algorithms based on the minimum enclosing ball problem have also been proposed <ref type="bibr" target="#b40">[40,</ref><ref type="bibr" target="#b47">47]</ref>. Yet, it is not clear how such methods compare in practice to the numerous other candidates.</p><p>Private empirical risk minimization <ref type="bibr" target="#b13">[13,</ref><ref type="bibr" target="#b56">56]</ref> has emerged as a generic way to design private learning algorithms, but it relies on specific assumptions (e.g. convexity, which does not hold for PCA, GMM modeling and kmeans) on the loss function which defines the learning task, and still relies on multiple passes over the whole dataset.</p><p>Closer to our work, Balog et al. <ref type="bibr" target="#b6">[6]</ref> recently proposed to release kernel mean embeddings, either as sets of synthetic data points in the input space or using feature maps, similarly to our method. However, to the best of our knowledge, the impact of privacy on the quality of learning in such methods has not been studied in the literature.</p></div>
<div><head>Paper outline and reading guide</head><p>The main existing tools and concepts from compressive learning and differential privacy are respectively recalled in sections 2 and 3. The reader knowledgeable with tools from either of these fields can probably safely skip the corresponding sections except to get familiar with the chosen notations. These tools are combined in Section 4 where we generically characterize the sensitivity of the sketching mechanism and provide new explicit expressions of this sensitivity for particular feature maps. Section 5 is devoted to describing the proposed feature subsampling mechanism and characterizing its privacy level, and Section 6 gives evidence of the relevance of a noise-to-signal ratio as a proxy for utility, before exploring its use to provide guidelines to tune mechanisms.</p></div>
<div><head n="2">Statistical Learning using Compressive Methods</head><p>Throughout the paper, 𝑑 always refers to the dimension of the data samples. We denote D 𝑛 ≜ 𝐸 𝑛 the set of (ordered) collections of 𝑛 learning examples in a domain 𝐸, and D ≜ ∪ 𝑛∊N D 𝑛 . Unless otherwise specified, we will typically consider 𝐸 = R 𝑑 . The number of elements in a collection X is denoted |X |. Note that we work with ordered datasets for technical reasons, but this order does not matter from a learning perspective.</p><p>Essentially, machine learning aims at inferring the parameters 𝛉 ∊ H of a mathematical model from a collection X = (𝐱 1 , …, 𝐱 𝑛 ) of training samples in R 𝑑 drawn from a probability distribution 𝜋 0 , i.e. 𝐱 𝑖 iid ∼ 𝜋 0 . In statistical learning, a task is defined by a loss function 𝑙 ∶ (𝐱, 𝛉) ↦ 𝑙(𝐱, 𝛉) ∊ R which measures the relevance of the parameter 𝛉 with respect to 𝐱 for the task, and the associated risk function R(𝜋, 𝛉) = E 𝐱∼𝜋 𝑙(𝐱, 𝛉) which extends this loss to distributions (and thus depends on the chosen loss, although we do not reflect this in the notation for conciseness). Intuitively, R(𝜋, 𝛉) characterizes how 𝛉 is suited to solve the learning task for distribution 𝜋. Learning thus amounts to finding 𝛉 * ∊ arg min 𝛉∊H R(𝜋 0 , 𝛉), but since the true distribution 𝜋 0 is unknown in practical applications, one typically uses the empirical distribution 𝜋 X = 1 𝑛 ∑ 𝑛 𝑖=1 𝛿 𝐱 𝑖 associated to a dataset X and looks for θ ∊ arg min 𝛉∊H R(𝜋 X , 𝛉); this is known as empirical risk minimization.</p><p>Standard approaches for empirical risk minimization access each data sample multiple times, and hence require them to be stored for the whole runtime of the algorithm. Compressive learning was introduced as a machine learning method that bypasses these needs by learning from a heavily compressed summary of the dataset, called the sketch, instead of the full dataset. In our context, this sketch is defined as the sample average of a feature map 𝚽, as depicted in Figure <ref type="figure">1</ref>.</p><formula xml:id="formula_0">Definition 1 (Sketch). The sketch 𝐳 X of a dataset X = (𝐱 1 , … , 𝐱 𝑛 ) ∊ D associated with the feature map 𝚽 is defined as 𝐳 X ≜ 1 𝑛 𝑛 ∑ 𝑖=1 𝚽(𝐱 𝑖 ), where 𝚽 ∶ R 𝑑 → C 𝑚 or R 𝑚 .<label>(1)</label></formula><p>The choice of the feature map depends on the learning task to solve, however 𝚽 will typically be a nonlinear function, in order to capture more information from X than the first order moments. In this paper, we consider non-linear functions of the form 𝚽(𝐱) = 𝑓(Ω 𝑇 𝐱), where Ω ∈ R 𝑑×𝑚 is a randomly generated (but fixed) matrix and the nonlinear 𝑓 is applied pointwise. Hence, the sketch is a collection of generalized random moments of the empirical distribution, i.e. 𝐳 X = E 𝐱∼𝜋 X 𝚽(𝐱). Note that although the feature map is a nonlinear function, sketching is a linear operation w.r.t. distributions. Estimating the desired model parameters from the sketch is done by solving a problem of the form θ ∈ arg min 𝛉∈H S(𝐳 X , 𝛉), where S(𝐳 X , •) is a surrogate for R(𝜋 X , •). This framework bears similarities with compressive sensing <ref type="bibr" target="#b26">[26]</ref>, which investigates the possibility of recovering signals from a small number of linear measurements, provided that these signals belong to (or can be well approximated by) a low-dimensional model. In this sense, learning from the sketch can be seen as an inverse problem on probability distributions: one will try to recover, in a model adapted to the learning task, a distribution whose sketch (i.e. linear observations) matches the moments computed on the dataset.</p><p>In sections 2.1 and 2.2, we formally define the three learning tasks we are interested in -namely clustering, density fitting and PCA -, and explain how they can be solved using a compressive approach.</p></div>
<div><head n="2.1">Sketching with Fourier Features for Clustering and Density Fitting</head><p>We first define the tasks of unsupervised 𝑘-means clustering and Gaussian mixture modeling, as these can both be answered with the same feature map.</p></div>
<div><head>Definition 2 (k-means clustering task). Given an integer 𝑘 &gt; 0, k-means clustering consists in finding centroids</head><formula xml:id="formula_1">𝐶 = {𝐜 1 , … , 𝐜 𝑘 } ⊆ R 𝑑 minimizing the empirical risk R KM associated to the loss function 𝑙 KM (𝐱, 𝐜) ≜ min 1≤𝑗≤𝑘 ‖𝐱 -𝐜 𝑗 ‖ 2 2 .</formula><p>In this specific case, the empirical risk (computed on the empirical distribution 𝜋 X of the dataset X = (𝐱 1 , …, 𝐱 𝑛 )) is also called the sum of squared errors (SSE):</p><formula xml:id="formula_2">R KM (𝜋 X , 𝐶) = SSE(X , 𝐶) ≜ 1 𝑛 𝑛 ∑ 𝑖=1 min 1≤𝑗≤𝑘 ‖𝐱 𝑖 -𝐜 𝑗 ‖ 2 2 .<label>(2)</label></formula><p>For Gaussian modeling, the empirical risk is the log-likelihood of the mixture of Gaussians that the model fits to the data. Definition 3 (Gaussian mixture modeling task). Given an integer 𝑘 &gt; 0, Gaussian mixture modeling consists in finding the parameters (weights</p><formula xml:id="formula_3">𝛼 1 , …, 𝛼 𝑘 ∊ R + s.t. ∑ 1≤𝑖≤𝑘 𝛼 𝑖 = 1, locations 𝛍 1 , … , 𝛍 𝑘 ∈ R 𝑑 and covariances Σ 1 , … , Σ 𝑘 ∊ R 𝑑×𝑑 ) of a Gaussian mixture 𝑀 whose p.d.f. 𝑝 𝑀 (𝐱) ≜ ∑ 𝑘</formula><p>𝑖=1 𝛼 𝑖 N (𝐱; 𝛍 𝑖 , Σ 𝑖 ) maximizes the log-likelihood, i.e. minimizes the empirical risk R GMM associated to the loss function 𝑙 GMM (𝐱, 𝑀 ) ≜ -ln 𝑝 𝑀 (𝐱).</p><p>To solve clustering and density modeling tasks in a compressive manner, previous works focused on random Fourier features (RFF), which consist in using the complex exponential as the nonlinear function <ref type="bibr" target="#b44">[44]</ref> in the feature map. This has been applied to clustering and fitting parametric mixture models, such as Gaussian mixture models <ref type="bibr" target="#b33">[33]</ref> or alpha-stable distributions <ref type="bibr" target="#b35">[35]</ref>.</p><p>Formally, for a given matrix of frequencies Ω = [𝛚 1 , … , 𝛚 𝑚 ], the random Fourier feature map is defined by 𝚽 RFF (𝐱) ≜ exp (iΩ 𝑇 𝐱) ∈ C 𝑚 (i.e., we chose the complex exponential nonlinearity 𝑓(⋅) = exp(i⋅)). The frequency vectors are typically i.i.d. Gaussians, i.e. 𝛚 𝑖 ∼ N (0, 𝜎 2 𝐼 𝑑 ), where the variance parameter 𝜎 2 must be adapted to the data, e.g. using prior knowledge on the distribution. The choice of the frequency distribution indeed defines implicitly in the sample space a kernel function <ref type="bibr" target="#b27">[27]</ref>, which can be interpreted as an inner product whose scale must be coherent with the scale of the clusters to identify.</p><p>Once the empirical sketch 𝐳 X of a dataset has been computed, k-means clustering (or GMM fitting) can be performed by solving a linear inverse problem: one wants to recover an "ideal" distribution, i.e. belonging to a meaningful mathematical model P, whose moments are as close as possible to the moments 𝐳 X measured on the dataset. An intuitive and sound choice for the model P is the set of mixtures of 𝑘 diracs <ref type="bibr" target="#b36">[36]</ref> for clustering, or the set of mixtures of 𝑘 normal distributions <ref type="bibr" target="#b34">[34]</ref> for GMM fitting. Writing the elements of P as mixtures of 𝑘 simple parametric probability distributions, we then solve</p><formula xml:id="formula_4">𝜈 * ∈ arg min 𝜈∈P ‖E 𝐱∼𝜈 𝚽(𝐱) -𝐳 X ‖ 2 ,<label>(3)</label></formula><p>which is a parametric optimization problem acting as a surrogate for risk minimization as explained at the beginning of the section. For clustering, the locations of the 𝑘 diracs forming 𝜈 * define the estimated centroids, while for GMMs 𝜈 * itself is the estimated mixture density.</p><p>Quantized Sketches Note that the expression of random Fourier features can be rewritten 𝚽 RFF (𝐱) = (cos(Ω 𝑇 𝐱) + i cos(Ω 𝑇 𝐱 -𝜋 2 )). It was shown that the cosine in this expression can be replaced by any other nonlinear, periodic function 𝜌, while preserving the properties of the sketch. Specifically, if a uniform, random dithering 𝐮 ∈ [0, 2𝜋[ 𝑚 is added before the nonlinearity, i.e. 𝑓(⋅) = 𝜌(⋅ + 𝐮) + i𝜌(⋅ + 𝐮 -𝜋 2 ) with 𝑢 𝑗 iid ∼ U([0, 2𝜋[), the moment-fitting cost function defined in (3) can easily be adapted so that recovery can still be performed. In particular, a good approximation to the complex exponential moment fitting can be obtained using a quantized sketching variant <ref type="bibr" target="#b46">[46]</ref>, i.e. quantizing the cosine of both real and imaginary parts with ±1 (one-bit quantization). Although the average sketch will in the end belong to C 𝑚 , the mechanism produces individual sketches 𝚽 RFF (𝐱 𝑖 ) in ({-1, 1} + i{-1, 1}) 𝑚 , and thus has a reduced memory footprint (2𝑚 bits); this is especially convenient if these individual sketches have to be computed on low-power and low-memory devices, or to be sent over a network before being averaged.</p><p>To account for all possibilities, we provide a unified definition of the random Fourier feature (RFF) map, covering both quantized and unquantized cases.</p></div>
<div><head>Definition 4 (Random Fourier features).</head><p>For Ω = [𝛚 1 , … , 𝛚 𝑚 ], the random Fourier feature map is defined by</p><formula xml:id="formula_5">𝚽 RFF (𝐱) ≜ [𝜌(Ω 𝑇 𝐱 + 𝐮) + i𝜌(Ω 𝑇 𝐱 + 𝐮 - 𝜋 2 )] ∈ C 𝑚 ,<label>(4)</label></formula><p>with the particular cases { 𝐮 = 𝟎 and 𝜌 = cos for random Fourier features 𝐮 ∊ [0, 2𝜋[ 𝑚 and 𝜌 = 2 -1/2 sign ∘ cos for quantized features.</p><p>Note that with the normalization used on 𝜌, we have for any 𝑗 that |𝚽 RFF (𝐱) 𝑗 | = 1 for both quantized and nonquantized features.</p></div>
<div><head n="2.2">Sketching with Quadratic Features for Compressive PCA</head><p>Principal component analysis consists, for a given 𝑘 &lt; 𝑑, in finding a 𝑘-dimensional linear subspace that best fits the data. Such a subspace can be parametrized by a matrix 𝑊 ∊ R 𝑑×𝑘 . Definition 5 (PCA task). Principal component analysis aims at finding 𝑊 ∊ R 𝑑×𝑘 minimizing the empirical risk R PCA associated to the loss function 𝑙 PCA (𝐱, 𝑊 ) ≜ ‖𝐱 -𝑊 𝑊 𝑇 𝐱‖ 2  2 . The matrix of second moments 𝐶 = 1 𝑛 ∑ 1≤𝑖≤𝑛 𝐱 𝑖 𝐱 𝑇 𝑖 , which can be seen as a sketch computed using the feature map 𝚽(𝐱) = vec(𝐱𝐱 𝑇 ), is known to capture all the information needed to solve the PCA problem. In practical applications, only the first 𝑘 eigenvectors of 𝐶 are needed, and so the sketch can be further reduced using low-rank matrix recovery techniques. The following feature map is then used <ref type="bibr" target="#b27">[27]</ref>.</p><formula xml:id="formula_6">Definition 6 (Random quadratic features). Let Ω = [𝛚 1 , … , 𝛚 𝑚 ] ∊ R 𝑑×𝑚 . Choosing the nonlinearity 𝑓(⋅) = (⋅) 2 , the feature function used for PCA is 𝚽 RQF (𝐱) ≜ [(𝛚 𝑇 1 𝐱) 2 , … , (𝛚 𝑇 𝑚 𝐱) 2 ] 𝑇 .</formula><p>We will typically consider two different sampling schemes for Ω:</p><p>• Gaussian: the (𝛚 𝑖 ) 1≤𝑖≤𝑚 are drawn as 𝛚 𝑖 ∼ N (0, 𝑑 -1 𝐼 𝑑 ). Note that with this variance, we have E 𝛚∼N (0,𝑑 -1 𝐼 𝑑 ) ‖𝛚‖ 2 2 = 1 for coherence with the next sampling scheme. • Union of orthonormal bases: when 𝑚/𝑑 is an integer, we consider Ω = [𝐵 1 , …, 𝐵 𝑚/𝑑 ] where the (𝐵 𝑖 ) 1≤𝑖≤𝑚/𝑑 are 𝑑×𝑑 blocs whose columns form orthonormal bases of R 𝑑 . This setup is useful for two reasons. First it makes it possible to use structured blocs 𝐵 𝑖 for which the matrix-vector product can be computed efficiently using fast transforms, but it also yields sharp privacy guarantees, as will be discussed in Section 4.1.2. Note that after averaging this feature map over all data samples, we are left with rank-one measurements of the data covariance matrix, i.e.</p><formula xml:id="formula_7">𝐳 X = [𝛚 𝑇 𝑖 𝐶𝛚 𝑖 ] 𝑇 1≤𝑖≤𝑚 = [⟨𝛚 𝑖 𝛚 𝑇 𝑖 , 𝐶⟩] 𝑇 1≤𝑖≤𝑚 ≜ M(𝐶)</formula><p>, where M is a linear operator acting on matrices. Solving the PCA task is here again casted into a linear inverse problem. Indeed, one aims at recovering the first eigenvectors of 𝐶, which amounts to finding a low-rank approximation of 𝐶. It is well established in the literature that the feature function proposed above is suitable for this task <ref type="bibr" target="#b26">[26,</ref><ref type="bibr">Section 4.6]</ref>. The problem thus boils down to finding a low-rank approximation from the sketch <ref type="bibr" target="#b27">[27]</ref>:</p><formula xml:id="formula_8">Ĉ ∊ arg min Σ≥0,rank(Σ)≤𝑘 ‖M(Σ) -𝐳 X ‖.<label>(5)</label></formula><p>This is a well studied problem which can be solved using e.g. nuclear norm relaxation <ref type="bibr" target="#b26">[26]</ref>. As discussed later in the manuscript, a Burer-Monteiro factorization <ref type="bibr" target="#b11">[11]</ref> can also be used, yielding an optimization problem which, despite being non convex, usually displays nice properties <ref type="bibr" target="#b55">[55]</ref> and incurs a smaller memory cost than the convex nuclear norm formulation.</p></div>
<div><head n="3">Differential Privacy</head><p>Publishing quantities computed from a collection of people's records -e.g. a machine learning model or aggregate statistics -can compromise the privacy of these users, even when these quantities result from aggregation over millions of data providers <ref type="bibr" target="#b17">[17]</ref>. Differential Privacy (DP) was proposed as a strong privacy definition by Dwork et al. <ref type="bibr" target="#b19">[19]</ref>, and has since been studied and used extensively in research and industry <ref type="bibr" target="#b23">[23,</ref><ref type="bibr" target="#b50">50]</ref>. We here give a brief introduction to DP, and also detail the assumptions made on the attacker (the attack model), which have a direct impact on the kind of guarantees that can be achieved. </p></div>
<div><head>Attack Model</head><p>We consider a curator DP model, where a trusted curator has access to the data, and publishes a noisy sketch of this data. The adversary is non-interactive, in that they have full access to the sketch of the dataset, or to sketches of disjoint subsets of the dataset if the latter is distributed across multiple devices (Figure <ref type="figure" target="#fig_1">2</ref>), but cannot query the curator(s) for more data. Whereas there exist some approaches that use random projection matrices as encryption keys <ref type="bibr" target="#b51">[51]</ref>, we here assume that the feature map 𝚽 and the matrix of frequencies Ω are publicly known (similarly to, e.g., <ref type="bibr" target="#b32">[32]</ref>). This is essential for analysts, who need to know the feature map in order to learn from the sketch. The model also covers the case where analysts may be adversaries. We assume that each user contributes exactly one record to the total dataset, albeit our results can be extended to allow for multiple records per user. We do not make any assumptions on the background knowledge available to the adversary, nor on the operations that they are able to make. Hence, our privacy guarantees are robust to extreme cases where the adversary knows the entire database save for one user, and has infinite compute power.</p></div>
<div><head n="3.1">Definition and Properties</head><p>Randomness is an old tool for introducing uncertainty ("privacy by plausible deniability") when using sensitive information, e.g. implemented as randomized response surveys <ref type="bibr" target="#b58">[58]</ref>. Differential privacy <ref type="bibr" target="#b19">[19]</ref> provides a formal definition of the privacy guarantees offered by a randomized data release mechanism 𝑅 ∶ D → Z. Intuitively, a mechanism 𝑅 provides differential privacy if its output does not depend significantly on the presence of any one user in the database, hence hiding this presence from an adversary. Definition 7 (Differential privacy <ref type="bibr" target="#b19">[19]</ref>). The randomized mechanism 𝑅 achieves 𝜀-differential privacy (noted 𝜀-DP) iff for any measurable set 𝑆 of the co-domain of 𝑅, and any X , Y ∈ D s.t. X ∼ Y for some neighboring relation ∼ (see below):</p><formula xml:id="formula_9">P [𝑅(X ) ∈ 𝑆] ≤ exp(𝜀) P [𝑅(Y) ∈ 𝑆]<label>(6)</label></formula><p>The parameter 𝜀 &gt; 0 is called the privacy budget.</p><p>The smaller 𝜀, the closer the output distributions for two neighboring datasets are, and the stronger the privacy guarantee. Equivalently, differential privacy can be defined through the notion of privacy loss of a randomized mechanism. This is particularly useful when proving that a mechanism is differentially private.</p><p>Definition 8 (Privacy loss <ref type="bibr" target="#b21">[21]</ref>). Let 𝑅 be a randomized algorithm taking values in Z. If 𝑅 admits a density 𝑝 𝑅(X ) over Z for each input X , the privacy loss function is defined by</p><formula xml:id="formula_10">𝐿 𝑅 (𝐬, X , Y) ≜ log( 𝑝 𝑅(X ) (𝐬) 𝑝 𝑅(Y) (𝐬) ).</formula><p>The random mechanism 𝑅 achieves 𝜀-differential privacy iff sup 𝐬∈Z X ,Y∈D∶ X ∼Y 𝐿 𝑅 (𝐬, X , Y) ≤ 𝜀.</p><p>Intuitively, small values of the privacy loss of 𝑅 for some pair X , Y characterize regions of the codomain where output random variables 𝑅(X ) and 𝑅(Y) have "close" distributions.</p></div>
<div><head>Neighboring relation</head><p>The neighboring relation ∼ in definition 7 defines the practical guarantees that DP offers. A common definition, called "unbounded" differential privacy (UDP), states that two datasets are neighbors if they differ by the addition or deletion of exactly one sample. From definition 7, this implies that the output of an algorithm that satisfies unbounded DP does not significantly depend on the presence of any one user in the dataset. An alternative is bounded DP (BDP), which defines two datasets as neighbors if and only if they differ by exactly one record by replacement.</p><p>We denote ⟦1, 𝑛⟧ = {1, …, 𝑛}, S 𝑛 the permutation group of {1, … , 𝑛} and 𝜎(X ) a permuted collection: 𝜎((𝐱 </p><formula xml:id="formula_11">X B ∼ Y ⇔ |X | = |Y| and ∃ 𝜎 1 , 𝜎 2 ∊ S |X | s.t. 𝜎 1 (X ) B ≈ 𝜎 2 (Y), (𝐱 1 , …, 𝐱 𝑛 ) B ≈ (𝐲 1 , …, 𝐲 𝑛 ) ⇔ ∀𝑖 ∊ ⟦1</formula><p>, 𝑛 -1⟧, 𝐱 𝑖 = 𝐲 𝑖 , and 𝐱 𝑛 , 𝐲 𝑛 are arbitrary.</p><p>We assume |X | = |Y| + 1 in the definition for succinctness only, but the relation U ∼ is symmetric. The key practical difference between the two definitions is that BDP assumes that the size of the dataset is not a sensitive value and can be published freely. Unbounded differential privacy is a stronger definition, as an 𝜀-UDP algorithm is necessarily 2𝜀-BDP�(using the composition lemmas presented below, and because if X B ∼ Y, X can be obtained from Y by removing an element and adding a new one), while the reverse is not necessarily true. This bound might however not be tight. In the following, we mainly focus on the UDP setting, which is sometimes more tricky. However, most of the results are also adapted for BDP.</p><p>Composition An important property of differential privacy is composition: using several differentially private algorithms on the same dataset results in similar guarantees, but with a total privacy budget equal to the sum of the budgets of the individual algorithms. Hence, one can design a complex DP algorithm by splitting its privacy budget 𝜀 between different simpler routines.</p><p>Lemma 1 (Sequential composition <ref type="bibr" target="#b39">[39,</ref><ref type="bibr">Theorem 3]</ref>). Let (𝑅 𝑖 ) 1≤𝑖≤𝑟 be a collection of DP mechanisms on the same domain with respective privacy budgets (𝜀 𝑖 ) 1≤𝑖≤𝑟 . Then 𝑅 ∶ X ↦ (𝑅 1 (X ), … , 𝑅 𝑟 (X )) provides (∑ 𝑟 𝑖=1 𝜀 𝑖 )-DP. This holds for both bounded and unbounded DP. Parallel composition can also be performed; the following lemma however holds only in the unbounded case.</p><p>Lemma 2 (Parallel composition <ref type="bibr" target="#b39">[39,</ref><ref type="bibr">Theorem 4]</ref>). Let (𝑅 𝑖 ) 1≤𝑖≤𝑟 be a collection of independent 𝜀-UDP algorithms on the same domain D, and D 𝑖 be disjoint subsets of D. Then 𝑅 ∶ X ↦ (𝑅 1 (X ∩D 1 ), … , 𝑅 𝑟 (X ∩ D 𝑟 )) provides 𝜀-UDP, where (𝐱 1 , …, 𝐱 𝑛 ) ∩ D 𝑗 denotes the subtuple with original ordering of the samples (𝐱 𝑖 ) 1≤𝑖≤𝑛 that are in D 𝑗 .</p><p>These lemmas hold only when the 𝑅 𝑖 are differentially private according to the same neighboring relation between datasets. Note also that privacy is robust to post-processing: if a mechanism 𝑅 is 𝜀-DP, then 𝑓(𝑅(•)) is also 𝜀-DP for any function 𝑓. Thus Lemma 2 implies in particular that in a distributed setting, each data holder can compute and release an 𝜀-DP synopsis of its local data (e.g. a noisy sketch), and merging these quantities will lead to a global synopsis which is also 𝜀-DP with respect to the whole dataset.</p><p>Alternative privacy definitions Many alternative definitions of privacy have been proposed in the literature <ref type="bibr" target="#b54">[54]</ref>. Traditional statistical disclosure control metrics, such as 𝑘-anonymity <ref type="bibr" target="#b49">[49]</ref>, define anonymity as a property of the data, e.g. requiring that each user is indistinguishable from 𝑘 -1 others. However, anonymizing large-scale high-dimensional data (such as, e.g., mobility datasets) was shown to be hard, due to the high uniqueness of users in such datasets <ref type="bibr" target="#b16">[16]</ref>. Researchers have proposed to make privacy a property of the algorithm, enforcing for instance that the mutual information leakage is bounded <ref type="bibr" target="#b18">[18]</ref>. Differential privacy is the most popular of such definitions, as it considers a worst-case adversary, and is hence "future-proof": no future release of auxiliary information can break the privacy guarantees. Connections between differential privacy and other information-theoretic definitions have also been investigated <ref type="bibr" target="#b57">[57]</ref>.</p></div>
<div><head n="3.2">The Laplace Mechanism</head><p>In this section, we describe the Laplace mechanism <ref type="bibr" target="#b19">[19]</ref>, a very common and simple mechanism to release privately a function 𝑓 computed over sensitive values. This mechanism adds Laplace noise to the function's output, whose scale ensures differential privacy. In the following, L(𝑏) denotes the centered Laplace distribution of parameter 𝑏. </p><formula xml:id="formula_12">∼ L(𝑏) (resp. L C (𝑏)).</formula><p>The Laplace mechanism provides differential privacy if the scale 𝑏 of the noise is chosen carefully. This scale depends on the notion of sensitivity, which measures the maximum variation of a function between two neighboring datasets.</p><formula xml:id="formula_13">Definition 13 (𝐿 1 -sensitivity). The 𝐿 1 -sensitivity of a function 𝑓 ∶ D → R 𝑚 for a neighborhood relation ∼ is defined as Δ 1 (𝑓) ≜ sup X ,Y∈D∶ X ∼Y ‖𝑓(X ) -𝑓(Y)‖ 1 . (<label>7</label></formula><formula xml:id="formula_14">)</formula><p>This definition extends to complex-valued functions by the canonical isomorphism between C 𝑚 and R 2𝑚 .</p><p>Throughout the paper, we will use superscripts Δ U 1 and Δ B 1 to denote sensitivities computed respectively w.r.t. the UDP and BDP neighboring relations. Dwork et. al <ref type="bibr" target="#b20">[20]</ref> proved that the Laplace mechanism provides 𝜀-differential privacy for the noise level 𝑏 = Δ 1 (𝑓)/𝜀. We propose below a straightforward extension of this result for the complex setting. Although only an upper bound on the sensitivity is required in order to prove that a mechanism is differentially private, we will also provide sharp bounds when possible, hence the notion of "sharp privacy level".</p><formula xml:id="formula_15">Theorem 1. Let 𝑓 ∶ D → R 𝑚 or C 𝑚 .</formula><p>The Laplace mechanism applied on 𝑓 is differentially private with sharp privacy budget 𝜀 * = Δ 1 (𝑓)/𝑏. For 𝜀 &gt; 0, the lowest noise level yielding 𝜀-differential privacy is given by 𝑏 * = Δ 1 (𝑓)/𝜀. This holds for both bounded and unbounded DP, provided that the sensitivities are computed according to the relevant neighborhood relation.</p><formula xml:id="formula_16">Proof. Let X , Y ∊ D be such that X ∼ Y.</formula><p>Let 𝑝 X and 𝑝 Y denote the probability densities of the Laplace mechanism applied on 𝑓 for datasets X and Y. In the real case, the privacy loss function takes the form</p><formula xml:id="formula_17">𝐿 𝑓 (𝐬, X , Y) = log( 𝑝 X (𝐬) 𝑝 Y (𝐬) ) = 1 𝑏 (‖𝑓(Y) -𝐬‖ 1 -‖𝑓(X ) -𝐬‖ 1 )</formula><p>Hence: sup</p><formula xml:id="formula_18">𝐬∊R 𝑚 X ,Y∊D∶ X ∼Y 𝐿 𝑓 (𝐬, X , Y) = 1 𝑏 sup X ,Y∊D∶ X ∼Y 𝑚 ∑ 𝑗=1 sup 𝑠 𝑗 ∊R |𝑓(Y) 𝑗 -𝐬 𝑗 | -|𝑓(X ) 𝑗 -𝐬 𝑗 | ( * ) = sup X ,Y∊D∶ X ∼Y ‖𝑓(X ) -𝑓(Y)‖ 1 𝑏 = Δ 1 (𝑓) 𝑏 .</formula><p>The inequality ≤ in (*) follows from the triangle inequality; 𝑠 𝑗 = 𝑓(Y) 𝑗 shows the equality. In the complex case, the proof is similar but using the density of a complex Laplace variable (Definition 11), and the definition of 𝐿 1 -sensitivity in the complex case.</p><p>Note that the function 𝑓 ∶ X ↦ |X | has UDP/BDP sensitivities Δ U 1 (𝑓) = 1 and Δ B 1 (𝑓) = 0, as all neighboring datasets have the same size for BDP. Releasing 𝑛 publicly is therefore 𝜀-BDP for any value of 𝜀, but this is not the case with UDP. This confirms the intuition that UDP treats the dataset size as sensitive, while BDP does not.</p></div>
<div><head n="3.3">Approximate Differential Privacy and the Gaussian Mechanism</head><p>Differential privacy is a very strong guarantee, and for many real-world tasks it can lead to severe degradations of the algorithms performance (utility) for small privacy budgets. For this reason, many relaxations of DP have been introduced, the most prominent of which is approximate differential privacy, also commonly called (𝜀, 𝛿)-DP <ref type="bibr" target="#b20">[20]</ref>.</p><p>Definition 14 (Approximate differential privacy <ref type="bibr" target="#b20">[20]</ref>). The randomized mechanism 𝑅 achieves (𝜀, 𝛿)-approximate differential privacy (noted (𝜀, 𝛿)-DP) for 𝜀 &gt; 0, 𝛿 ≥ 0 iff for any measurable set 𝑆 of the co-domain of 𝑅, and any X , Y ∈ D s.t. X ∼ Y for some neighboring relation:</p><formula xml:id="formula_19">P [𝑅(X ) ∈ 𝑆] ≤ exp(𝜀) ⋅ P [𝑅(Y) ∈ 𝑆] + 𝛿.<label>(8)</label></formula><p>The most common mechanism to achieve (𝜀, 𝛿)-DP is the Gaussian mechanism, adding Gaussian noise to the output of a function. As for the Laplace mechanism, we here consider potentially complexvalued outputs, and denote 𝑧 ∼ N C (0, 𝜎<ref type="foot" target="#foot_1">2</ref> ) a random variable whose real and imaginary component are independently identically distributed as ℜ𝑧, ℑ𝑧 ∼ N (0, 𝜎 2 ) (note that the variance of 𝑧 then reads</p><formula xml:id="formula_20">𝜎 2 𝑧 = 2𝜎 2 ). Definition 15 (Gaussian Mechanism). For any 𝑓 ∶ D → R 𝑚 (resp. C 𝑚 ), the Gaussian mechanism with parameter 𝜎 is the random mechanism X ↦ 𝑓(X ) + 𝛏 where (𝜉 𝑗 ) 1≤𝑗≤𝑚 iid ∼ N (0, 𝜎 2 ) (resp. N C (0, 𝜎 2 )).</formula><p>The advantage of this DP relaxation is that the noise standard deviation needed for (𝜀, 𝛿)-DP scales not with the 𝐿 1 but with the 𝐿 2 sensitivity of 𝑓, defined just below, which can be significantly smaller for many functions, including our sketching operator.</p><formula xml:id="formula_21">Definition 16 (𝐿 2 -sensitivity). The 𝐿 2 -sensitivity of a function 𝑓 ∶ D → R 𝑚 for a neighborhood relation ∼ is defined as Δ 2 (𝑓) ≜ sup X ,Y∈D∶ X ∼Y ‖𝑓(X ) -𝑓(Y)‖ 2 .</formula><p>This definition extends to complexvalued functions using the canonical isomorphism between C 𝑚 and R 2𝑚 .</p><p>The "classical" noise calibration for the (real) Gaussian mechanism comes from [21, Appendix A], which shows that, assuming 𝜀 &lt; 1, a standard deviation 𝜎 &gt; (2 ln(1.25/𝛿)) 0.5 Δ 2 (𝑓)/𝜀 is sufficient to guarantee (𝜀, 𝛿)-DP. This bound is commonly used but not sharp, especially in the high privacy regime (i.e. small 𝜀), and restricted to 𝜀 &lt; 1. The calibration of the required noise parameter 𝜎 has recently been carefully tightened by Balle et al. <ref type="bibr" target="#b5">[5]</ref>, which is the mechanism we will use in this work 2 .</p><p>Theorem 2 (Analytical Gaussian mechanism <ref type="bibr" target="#b5">[5,</ref><ref type="bibr">Theorem 9]</ref>). For each 𝜀, 𝛿 &gt; 0, the lowest noise level 𝜎 * such that the (real) Gaussian mechanism provides (𝜀, 𝛿)-DP is given by 𝜎 * = 𝜂(𝜀, 𝛿)</p><formula xml:id="formula_22">Δ 2 (𝑓) √ 2𝜀</formula><p>, where 𝜂(𝜀, 𝛿) is described in <ref type="bibr" target="#b5">[5]</ref> and can be computed with a numerical algorithmic procedure.</p><p>Note that the term 𝜂(𝜀, 𝛿) depends on 𝜀, hence it is incorrect to say that 𝜎 * scales in 𝜀 -1/2 . In particular, when 𝜀 → 0 the noise level converges to a finite constant <ref type="bibr" target="#b5">[5,</ref><ref type="bibr">Section 2.1]</ref>. Compared to the standard Gaussian mechanism of Dwork and Roth, Theorem 2 has also the advantage to hold in the low-privacy regime (i.e. when 𝜀 &gt; 1).</p><p>The result holds for complex-valued feature maps as well using the canonical isomorphism between C 𝑚 and R 2𝑚 , as applying the complex Gaussian mechanism on a complex-valued 𝚽(•) is equivalent to applying the real Gaussian mechanism to [ℜ𝚽(•); ℑ𝚽(•)], and</p><formula xml:id="formula_23">‖[ℜ𝚽(•); ℑ𝚽(•)]‖ 2 = ‖𝚽(•)‖ 2 .</formula><p>We expect from the literature and from the definitions of the sensitivities that using the Gaussian mechanism should help to reduce the noise level required to achieve privacy, and thus increase the overall learning performance. We will see in particular in the next section that the 𝐿 1 and 𝐿 2 sensitivities scale with the sketch size 𝑚 respectively in 𝑚 and 𝑚 1/2 .</p><p>Note that simple composition theorems also exist for approximate differential privacy similarly to Lemma 1. We provide here only the result on sequential composition for succinctness, but results on parallel composition can be found in the literature as well.</p><p>Lemma 3 (Sequential composition <ref type="bibr" target="#b21">[21,</ref><ref type="bibr">Theorem 3.16]</ref>). Let (𝑅 𝑖 ) 1≤𝑖≤𝑟 be a collection of (𝜀 𝑖 , 𝛿 𝑖 )-DP mechanisms on the same domain. Then 𝑅 ∶ X ↦ (𝑅 1 (X ), … , 𝑅 𝑟 (X )) provides (∑ 𝑟 𝑖=1 𝜀 𝑖 , ∑ 𝑟 𝑖=1 𝛿 𝑖 )-DP. We now explain how the privacy definitions introduced in this section can be satisfied with the sketching framework.</p></div>
<div><head n="4">Differentially Private Sketching</head><p>Sketching, as proposed in Definition 1, is not sufficient per se to ensure the differential privacy of user contributions, despite the fact that the sketch itself (which is just at most 𝑚 ≪ 𝑛𝑑 real or complex numbers) cannot contain much information about each of the 𝑛 samples 𝐱 𝑖 ∈ R 𝑑 . In particular, although the vectors (𝛚 𝑗 ) 𝑚 𝑗=1 are randomly drawn, the sketching mechanism induced by a given set of such vectors is deterministic. We construct a noisy sketch, based on the Laplacian (resp. Gaussian) mechanism, that guarantees 𝜀-differential privacy (resp. (𝜀, 𝛿)-differential privacy).</p><p>The clean sketch 𝐳 X from (1) can be written 𝐳 X = 𝚺(X )/|X |, where 𝚺(X ) ≜ ∑ 𝑛 𝑖=1 𝚽(𝐱 𝑖 ) denotes the sum of features and |X | the number of records. Our mechanism adds noise to the numerator and denominator separately, i.e. releases (𝚺(X ) + 𝛏, |X | + 𝜁) where both 𝛏 and 𝜁 are random. Both quantities are thus made private provided that the noise levels are properly chosen, as discussed in the following subsections. This also means that we can further average sketches after computation in a distributed setting. The sketch 𝐳 X can then be estimated from these two quantities, e.g. using 𝐬(X ) ≜ (𝚺(X ) + 𝛏)/(|X | + 𝜁), which is private by composition properties of differential privacy. Note that DP is also robust to postprocessing, so one could for instance replace |X | + 𝜁 by max(|X | + 𝜁, 1) to avoid dividing by a null or negative quantity. The noise 𝛏 added to 𝚺 can be either Laplacian or Gaussian, and we provide guarantees for both cases respectively in Section 4.1 and Section 4.2, each time for both random Fourier features and PCA. In the following, we use the notations 𝚺 RFF and 𝚺 RQF when 𝚺 is computed using respectively 𝚽 = 𝚽 RFF and 𝚽 = 𝚽 RQF .</p></div>
<div><head n="4.1">Private Sketching with the Laplace Mechanism</head><p>We introduce formally the noisy sum of features.</p></div>
<div><head>Definition 17. The noisy sum of features 𝚺</head><formula xml:id="formula_24">L of a dataset X = (𝐱 𝑖 ) 𝑛 𝑖=1 ∊ D 𝑛 with noise parameters 𝑏 is the random variable 𝚺 L (X ) = 𝚺(X ) + 𝛏, where 𝚺(X ) ≜ ∑ 𝑛 𝑖=1 𝚽(𝐱 𝑖 ) and ∀𝑗 ∊ 1, 𝑚 , 𝜉 𝑗 iid ∼ { L C (𝑏) if 𝚽 is complex-valued L(𝑏) if 𝚽 is real-valued .</formula><p>The scale of the noise will depend on the feature map used. Remember that we need an estimate of the sketch, and not just the sum of features. We introduce a generic lemma for this purpose. 2 ) is 𝜀 2 -UDP. The result comes from the sequential composition Lemma 1.</p></div>
<div><head>Lemma 4. For any privacy parameter 𝜀 &gt; 0 and any choice of</head><formula xml:id="formula_25">𝜀 1 , 𝜀 2 &gt; 0 such that 𝜀 1 + 𝜀 2 = 𝜀, if 𝚺 has a finite sensitivity Δ U 1 (𝚺), then any mechanism to estimate 𝐳 X using 𝚺 L (X ) instantiated with a noise level 𝑏 = Δ U 1 (𝚺)/𝜀 1 and |X | + 𝜁, where 𝜁 ∼ L(𝜀 -1 2 ), is 𝜀-UDP. Proof. The Laplace mechanism applied on 𝚺 with 𝑏 = Δ U 1 (𝚺)/𝜀 1 is 𝜀 1 -UDP</formula><p>To prove differential privacy of the sketching mechanism, we thus only need to compute the sensitivity Δ U 1 (𝚺) of the sum-of-features function. We will see in Section 4.2 that a similar result can be stated for the Gaussian mechanism using the 𝐿 2 sensitivity. We introduce in the following lemma a common expression to deal with the different cases -Laplacian and Gaussian mechanisms, real-and complexvalued feature maps.</p><formula xml:id="formula_26">Lemma 5. Let 𝚺 ∶ (𝐱 1 , …, 𝐱 𝑛 ) ↦ ∑ 1≤𝑖≤|X | 𝚽(𝐱 𝑖 )</formula><p>where 𝚽 is any feature map taking values in R 𝑚 or C 𝑚 . For 𝑝 = 1, 2, the 𝐿 𝑝 sensitivity of 𝚽 for datasets on a domain 𝐸 is</p><formula xml:id="formula_27">Δ U 𝑝 (𝚺) = sup 𝐱∊𝐸 𝑄 U 𝑝 (𝐱)</formula><p>where 𝑄 U 𝑝 (𝐱) = ‖𝚽(𝐱)‖ 𝑝 for real-valued features maps, and extends to complex-valued feature maps using the canonical isomorphism between C 𝑚 and R 2𝑚 .</p><p>Note that in particular, 𝑄 U 1 (𝐱) = ‖R(𝚽(𝐱))‖ 1 + ‖I(𝚽(𝐱))‖ 1 for a complex-valued 𝚽. Proof. For a real-valued feature map 𝚽, we have by definitions 9, 13 and 16:</p><formula xml:id="formula_28">Δ U 𝑝 (𝚺) = sup X ,Y∊D∶X U ∼Y ‖𝚺(X ) -𝚺(Y)‖ 𝑝 = sup X =(𝐱 1 ,…,𝐱 𝑛 )∊D, Y=(𝐲 1 ,…,𝐲 𝑛-1 )∊D, such that X U ∼Y ∥ 𝑛 ∑ 𝑖=1 𝚽(𝐱 𝑖 ) - 𝑛-1 ∑ 𝑖=1 𝚽(𝐲 𝑖 )∥ 𝑝 = sup 𝐱∊𝐸 ‖𝚽(𝐱)‖ 𝑝 . (<label>9</label></formula><formula xml:id="formula_29">)</formula><p>The result extends to the complex case using the canonical isomorphism between C 𝑚 and R 2𝑚 , with</p><formula xml:id="formula_30">‖[R(𝚽(𝐱)); I(𝚽(𝐱))]‖ 2 = ‖𝚽(𝐱)‖ 2 and ‖[R(𝚽(𝐱)); I(𝚽(𝐱))]‖ 1 = ‖R(𝚽(𝐱))‖ 1 + ‖I(𝚽(𝐱))‖ 1 .</formula><p>In the following, we use the notations 𝑄 RFF 𝑝 , 𝑄 RQF 𝑝 when the feature maps 𝚽 RFF , 𝚽 RQF are used. Note however that this Lemma is generic, and could be applied to any new feature map in the future. We compute Δ U 1 (𝚺 RFF ) and Δ U 1 (𝚺 RQF ) using Lemma 5 respectively in Section 4.1.1 and Section 4.1.2. Note that we compute the sensitivities using the expression of the feature maps given in Definitions 4 and 6, but any constant factor 𝑐 𝚽 could be used in these expressions provided that the inverse problem is solved using the same scaling (one could for instance use 𝑐 𝚽 = 1/ √ 𝑚 to get normalized features); this would yield similar privacy guarantees, but the sensitivity and thus the noise level 𝑏 would be multiplied by the same factor. We discuss how to optimally split the privacy budget between 𝜀 1 and 𝜀 2 in Section 6.5.</p></div>
<div><head n="4.1.1">Random Fourier Features</head><p>We compute the 𝐿 1 -sensitivity of 𝚺 RFF in Lemma 7. We first introduce a lemma on diophantine approximation, that will be needed to prove the sharpness of our bound. Definition 18. The scalars (𝜔 𝑗 ) 1≤𝑗≤𝑚 ∊ R are called nonresonant frequencies <ref type="bibr" target="#b52">[52]</ref>  </p><formula xml:id="formula_31">(𝚺 RFF ) = 𝑚 √ 2.</formula><p>Proof. We recall that 𝚽 RFF (𝐱) = (𝜌(Ω 𝑇 𝐱 + 𝐮) + i𝜌(Ω 𝑇 𝐱 + 𝐮 -𝜋 2 )) in order to deal with both unquantized (𝜌 = cos, 𝐮 = 0) and quantized (𝜌 = 2 -1/2 sign ∘ cos, 𝐮 ∊ [0, 2𝜋[ 𝑚 ) mechanisms with the same formalism. Using the definition of 𝑄 𝑝 from Lemma 5 in the Laplace real case, we have As a result, denoting 𝑓 𝛗 (𝐱) ≜ ∑ 𝑚 𝑗=1 𝑓(𝛚 𝑇 𝑗 𝐱 -𝜑 𝑗 ) for each 𝛗 ∊ R 𝑚 , we obtain</p><formula xml:id="formula_32">𝑄 RFF 1 (𝐱) ≜ ‖ℜ(𝚽 RFF (𝐱))‖ 1 + ‖ℑ(𝚽 RFF (𝐱))‖ 1 = 𝑚 ∑ 𝑗=1 |𝜌(𝛚 𝑇 𝑗 𝐱 + 𝑢 𝑗 )| + |𝜌(𝛚 𝑇 𝑗 𝐱 + 𝑢 𝑗 - 𝜋 2 )| Denoting 𝑓(•) ≜ 𝜌(•) + 𝜌(• -𝜋/2) we show that |𝜌(•)| + |𝜌(• -𝜋/2)| = sup 𝜑∈{0,𝜋/2,</formula><formula xml:id="formula_33">𝑄 RFF 1 (𝐱) = 𝑚 ∑ 𝑗=1 sup 𝜑 𝑗 ∊{0,𝜋/2,𝜋,3𝜋/2} 𝑓(𝛚 𝑇 𝑗 𝐱 + 𝑢 𝑗 -𝜑 𝑗 ) = sup 𝛗∊{0,𝜋/2,𝜋,3𝜋/2} 𝑚 𝑓 𝛗-𝐮 (𝐱).<label>(10)</label></formula><p>In the complex exponential case 𝜌 = cos and 𝑓 ∶ 𝑥 ↦ √ 2 cos(𝑥 -𝜋/4). In the quantized case as </p><formula xml:id="formula_34">𝜌 = 2 -1/2 sign</formula><formula xml:id="formula_35">Δ U 1 (𝚺 RFF ) = sup 𝐱∊R 𝑑 𝑄 RFF 1 (𝐱) = sup 𝛗∊{0,𝜋/2,𝜋,3𝜋/2} 𝑚 sup 𝐱∊R 𝑑 𝑓 𝛗-𝐮 (𝐱) = 𝑚 √ 2,<label>(11)</label></formula><p>where the supremum is independent of the choice of 𝛗.</p><p>Note that this holds only for 𝐸 = R 𝑑 . If the domain is restricted to e.g. 𝐸 = B 2 = {𝐱 ∶ ‖𝐱‖ 2 ≤ 1} the upper bound may not be reached, even with nonresonant frequencies, so an improved privacy may be possible.</p><p>For this result to be applicable, we still need to prove that the frequencies are nonresonant in practice. </p><formula xml:id="formula_36">Δ U 1 (𝚺 RQF ) = sup 𝐱∊B 2 𝑄 RQF 1 (𝐱) = sup 𝐱∊B 2 ‖𝚽 RQF (𝐱)‖ 1 = sup 𝐱∊B 2 𝑚 ∑ 𝑗=1 (𝜔 𝑇 𝑗 𝐱) 2 = sup 𝐱∶‖𝐱‖≤1 𝐱 𝑇 ( 𝑚 ∑ 𝑗=1 𝛚 𝑗 𝛚 𝑇 𝑗 )𝐱 = 𝜆 max (ΩΩ 𝑇 ) = ‖Ω‖ 2 2 .</formula><p>The quantity ‖Ω‖ 2 2 can be computed numerically for a given Ω. When 𝑚 is a multiple of 𝑑 and Ω is a concatenation of 𝑚/𝑑 orthonormal bases as detailed in Section 2.2, we have ΩΩ 𝑇 = 𝑚/𝑑𝐈 𝑑 and thus ‖Ω‖ 2 2 = 𝑚/𝑑. When Ω has i.i.d. N (0, 1/𝑑) entries, ‖Ω‖ 2 2 is of the same order with high probability.</p></div>
<div><head n="4.2">Approximate Differential Privacy with the Gaussian Mechanism</head><p>In practice, in order to increase the utility of private mechanisms relying on additive perturbations, 𝜀-DP is often relaxed to approximate (𝜀, 𝛿)-DP. In this section we provide an (𝜀, 𝛿)-DP sketching mechanism based on the Gaussian mechanism.</p></div>
<div><head>Definition 19. The Gaussian noisy sum of features 𝚺</head><formula xml:id="formula_37">G (X ) of a dataset X = (𝐱 𝑖 ) 𝑛 𝑖=1 with noise param- eters 𝜎 is the random variable 𝚺 G (X ) = 𝚺(X ) + 𝛏 where 𝚺(X ) ≜ ∑ 𝑛 𝑖=1 𝚽(𝐱 𝑖 ) and ∀𝑗 ∊ 1, 𝑚 , 𝜉 𝑗 iid ∼ { N C (0, 𝜎 2 ) if 𝚽 is complex-valued N (0, 𝜎 2 ) if 𝚽 is real-valued .</formula><p>The only difference with Definition 17 is that the noise added on the sum of features 𝚺(X ) is Gaussian. We now introduce an equivalent of the composition lemma 4 for the Gaussian case.</p><p>Lemma 10. For any privacy parameter 𝜀 &gt; 0 and choice of 𝜀 2 ) is (𝜀 2 , 0)-UDP. The result comes from Lemma 3 on sequential composition of approximate differential privacy.</p><p>Note that we add Laplacian noise on the dataset size; if Gaussian noise was added we would have to split not only 𝜀 but also 𝛿 between the sum of features and the dataset size. As there is no difference between</p><formula xml:id="formula_38">Δ U 1 (| • |) and Δ U 2 (| • |)</formula><p>, allocating a part of 𝛿 to the denominator would not bring any substantial gain compared to putting all the budget on the numerator.</p><p>We now compute the sensitivities Δ U 2 (𝚺 RFF ) (Section 4.2.1) and Δ U 2 (𝚺 RQF ) (Section 4.2.2). Here again, in case the feature maps are multiplied by a constant factor, the 𝐿 2 sensitivity and thus the noise level 𝜎 need to be multiplied by the same factor.</p></div>
<div><head n="4.2.1">Random Fourier Features</head><p>For random Fourier features, computing the 𝐿 2 sensitivity is much more straightforward than the 𝐿 1 sensitivity, as each component of the feature map has a constant modulus. We get the following result. Proof. Using the fact that |𝚽(𝐱) 𝑗 | = 1 for any 𝑗 and 𝐱, we have by Lemma 5</p><formula xml:id="formula_39">Δ U 2 (𝚺 RFF ) = sup 𝐱∊R 𝑑 𝑄 RFF 2 (𝐱) = sup 𝐱∈R 𝑑 √ √ √ ⎷ 𝑚 ∑ 𝑗=1 |𝚽 𝑗 (𝐱)| 2 = √ 𝑚.</formula><p>As expected, the standard deviation of the Gaussian noise is smaller than the standard deviation of the Laplacian noise that one would need to add in order to reach the same privacy level with the Laplace mechanism. Indeed, the 𝐿 2 sensitivity only scales with √ 𝑚, where the 𝐿 1 sensitivity was scaling linearly with 𝑚.</p><p>For bounded differential privacy, we have the following result. </p></div>
<div><head n="4.2.2">Random Quadratic Features</head><p>In this subsection, we consider again datasets whose elements are bounded by 1 in 𝐿 2 -norm, and reuse the notations</p><formula xml:id="formula_40">𝐸 = B 2 , D 𝑛 = 𝐸 𝑛 , D ≜ ∪ 𝑛∊N D 𝑛 .</formula><p>Lemma 13. The function 𝚺 RQF built using a matrix of frequencies</p><formula xml:id="formula_41">Ω = [𝛚 1 , …, 𝛚 𝑚 ], has 𝐿 2 sensitivity Δ U 2 (𝚺 RQF ) = 𝑆 4 (Ω), where 𝑆 4 (Ω) = (sup 𝐱∶‖𝐱‖ 2 ≤1 ∑ 𝑚 𝑗=1 (𝜔 𝑇 𝑗 𝐱) 4 ) 1/2 .</formula><p>Proof. We have by Lemma 5</p><formula xml:id="formula_42">Δ U 2 (𝚺 RQF ) = sup 𝐱∊B 2 𝑄 RQF 2 (𝐱) = sup 𝐱∊B 2 ‖𝚽 RQF (𝐱)‖ 2 = ( sup 𝐱∶‖𝐱‖ 2 ≤1 𝑚 ∑ 𝑗=1 (𝜔 𝑇 𝑗 𝐱) 4 ) 1/2 = 𝑆 4 (Ω).</formula><p>The quantity 𝑆 4 (Ω) can be estimated numerically.</p></div>
<div><head n="5">A faster mechanism with frequency subsampling</head><p>We now introduce a sketching mechanism that subsamples the features as shown in Figure <ref type="figure">3</ref>, and then build on top of it a noisy sketch that guarantees 𝜀-differential privacy. This mechanism differs from the standard approach which consists in subsampling the data samples <ref type="bibr" target="#b4">[4]</ref> rather than the features. The following result is for instance well known in the literature.</p></div>
<div><head>Lemma 14 ([4, Table 1]).</head><p>Let 𝑀 be an 𝜀-UDP mechanism, and denote by S the Poisson data-subsampling mechanism with parameter 𝛼 (i.e. each data sample 𝐱 𝑖 is kept independently from the others with probability 𝛼). Then the mechanism X ↦ 𝑀 (S(X )) is 𝜀 ′ -UDP with 𝜀 ′ = log(1 + 𝛼(exp(𝜀) -1)) &lt; 𝜀.</p><p>We will see in Lemma 15 that this privacy level 𝜀 ′ is sharp when Lemma 14 is applied to our sketching mechanism, but also that the same bound is obtained -and is still sharp -when sampling the features with probability 𝛼 rather than the data samples. Although sampling the data is more generic -this can be used for any application and any mechanism, while sampling the features is more specific -, both techniques are relevant in our setting, and we will see in Section 6.3 that subsampling the features rather than the data can in some cases yield better utility-privacy tradeoffs at constant computational complexity. We will focus mostly on pure differential privacy guarantees for simplicity and conciseness, and give a generic upper bound that applies to approximate differential privacy as well.</p><p>The proposed subsampling mechanism, which consists in computing only some of the 𝑚 entries of 𝚽(𝐱 𝑖 ) for each data sample 𝐱 𝑖 as shown in Figure <ref type="figure">3</ref>, is mainly introduced in order to reduce the computational complexity of the sketching operation. This complexity is dominated by the computation of all the (𝛚 𝑇 𝑗 𝐱 𝑖 ) 1≤𝑖≤𝑛,1≤𝑗≤𝑚 , i.e. by the matrix product Ω 𝑇 𝑋, which costs Θ(𝑚𝑑𝑛) when using a dense matrix Ω. As shown below in Lemma 16, subsampling (whether it is on the data samples or on the features) does not bring any advantage in enforcing differential privacy, i.e. the noise level required to get privacy is at least the same as without subsampling. Indeed, the privacy "amplification" induced by the subsampling operation is compensated by the fact that the sketch must be properly rescaled afterwards. We will prove however that in some settings, the guarantees obtained with and without subsampling are exactly the same. Moreover, it will be shown in Section 6.4 that feature subsampling can be performed for large collections without significantly damaging the utility of the sketch, which motivates our approach.</p><p>Subsampling does also reduce the amount of information that is released about each sample, although this has no impact on differential privacy guarantees. Indeed, in the extreme case of feature subsampling we will measure only one floating point (or complex) number per data sample. When using a quantized sketch, this is further reduced to one bit (or two) of information per sample. For instance, if we only have the quantized random Fourier measurement of a sample 𝐱 associated to the frequency 𝛚 𝑗 , we can can only infer that 𝐱 belongs to a union of "slices" of the ambient space delimited by affine hyperplanes orthogonal to 𝛚 𝑗 . But in practice these features are further averaged over the samples (such individual sketches are computed by the data holder but not released publicly), the subsampling is performed randomly (so that we don't know which entry of the sketch a given sample contributed to) and, in the differential privacy scenario, noise can still be added to the obtained sketch. Although we only focus on differential privacy in this paper, we expect that this variant of the framework would be beneficial when working with alternative privacy definitions that rely on average information-theoretic quantities, such as mutual information <ref type="bibr" target="#b57">[57]</ref>.</p></div>
<div><head>Subsampling schemes</head><p>We define H ≜ {0, 1} 𝑚 the set of binary masks 𝐡 and H 𝑛 the set of all possible tuples (𝐡 1 , … , 𝐡 𝑛 ) of 𝑛 such masks. Pointwise multiplication is denoted ⊙. In the following, we consider a real number 0 &lt; 𝛼 ≤ </p><formula xml:id="formula_43">H 𝑟 ≜ {𝐡 ∊ H | 𝑚 ∑ 𝑖=1 ℎ 𝑖 = 𝑟},<label>(12)</label></formula><p>where 1 ≤ 𝑟 ≤ 𝑚 is an integer, in which case U(H 𝑟 ) ∊ P 𝛼 with 𝛼 ≜ 𝑟/𝑚; • Block-uniform feature sampling: when 𝑚/𝑑 is an integer and 𝑟 is a multiple of 𝑑, U(H struct.</p></div>
<div><head>𝑟</head><p>) is the uniform distribution over H struct.</p></div>
<div><head>𝑟</head><p>, the subset of H 𝑟 containing only the vectors which are structured by blocs of size 𝑑, i.e. H struct.</p></div>
<div><head>𝑟</head><p>≜ {𝐡 = [ℎ 1 , …, ℎ 𝑚 ] ∊ H 𝑟 |∀𝑖 ∊ ⟦1, 𝑚/𝑑⟧, ℎ (𝑖-1)𝑑+1 = ℎ (𝑖-1)𝑑+2 = … = ℎ 𝑖𝑑 }. In this case we also have U(H struct.</p></div>
<div><head>𝑟</head><p>) ∊ P 𝛼 with 𝛼 ≜ 𝑟/𝑚. This scheme will be useful when Ω is a structured transform, as explained in the next paragraph.</p><p>A note on sketching complexity When computing 𝑟 = ⌈𝛼𝑚⌉ features per input sample rather than computing the whole matrix product Ω 𝑇 𝑋, the sketching complexity goes down from Θ(𝑚𝑑𝑛) to Θ(𝑟𝑑𝑛). In the high-dimensional setting, previous works <ref type="bibr" target="#b12">[12]</ref> suggested to speed such computations by using structured matrices Ω made of ⌈𝑚/𝑑⌉ square 𝑑 × 𝑑 blocks associated to as many fast transforms. In that case, the matrix-vector multiplication for each square block is performed at once using the corresponding fast transform with complexity Θ(𝑑 log(𝑑)). We can thus rely on block-uniform subsampling mechanism introduced above using 𝑟 = 𝑑, so that for each data sample 𝐱 𝑖 we compute the 𝑑 measurements associated to a randomly chosen block. The sketching cost is then Θ(𝑑 log(𝑑)𝑛), while computing the same number 𝑟 = 𝑑 of measurements with a dense matrix Ω would have scaled in Θ(𝑑 2 𝑛).</p></div>
<div><head>Sketching with subsampling</head><p>We first define how features are subsampled using a fixed tuple of masks, and then define the sketching mechanism using random masks. Definition 20. The sum of subsampled features of a dataset X = (𝐱 1 , …, 𝐱 𝑛 ), using a fixed set of binary masks 𝐻 = (𝐡 1 , …, 𝐡 𝑛 ) ∊ H 𝑛 that has been drawn according to some distribution in P 𝛼 is defined as</p><formula xml:id="formula_44">𝚺 𝐻 (X ) ≜ 1 𝛼 𝑛 ∑ 𝑖=1 𝚽(𝐱 𝑖 ) ⊙ 𝐡 𝑖 .</formula><p>The constant 1/𝛼 in Definition 20 is used to ensure that we always have E 𝐻 |X | -1 𝚺 𝐻 (X ) = 𝐳 X when 𝐻 is drawn according to 𝑝 𝑛 𝐡 for some 𝑝 𝐡 ∊ P 𝛼 . We will see below that, although subsampling reduces the noise level allowing to make the (unnormalized) sum of features private (which is sometimes referred to as "privacy amplification by subsampling"), the rescaling factor 1/𝛼 is required to obtain sketches of comparable utility for a given noise level, and privacy is not amplified once taking this factor into account. We now introduce the whole mechanism, where the masks themselves are drawn randomly. Definition 21. The Laplacian subsampled sum of features ̅ 𝚺 L (X ) of a dataset X ∊ D 𝑛 using a mask distribution 𝑝 𝐡 ∊ P 𝛼 and a noise parameter 𝑏 is the random variable</p><formula xml:id="formula_45">̅ 𝚺 L (X ) = 𝚺 𝐻 (X ) + 𝛏, (<label>13</label></formula><formula xml:id="formula_46">)</formula><p>where</p><formula xml:id="formula_47">∀𝑗 ∊ 1, 𝑚 , 𝜉 𝑗 iid ∼ { L C (𝑏) if 𝚽 is complex-valued L(𝑏) if 𝚽 is real-valued , and 𝐻 = (𝐡 1 , …, 𝐡 𝑛 ) with 𝐡 𝑖 iid ∼ 𝑝 𝐡 .</formula><p>For a deterministic set of masks 𝐻, we denote 𝚺 L,𝐻 (X ) = 𝚺 𝐻 (X ) + 𝛏 the sum that is randomized only on 𝛏. Compared to the deterministic sum of features 𝚺, the Laplacian subsampled sum of features ̅ 𝚺 L thus picks at random some values from each feature vector 𝚽(𝐱 𝑖 ) according to a random mask 𝐡 𝑖 and then adds Laplacian noise 𝛏 on the sum of those contributions. Note that in this mechanism (and by opposition to 𝚺 L,𝐻 ), both 𝛏 and 𝐻 are random quantities.</p><p>In order to formulate our results, we define a quantity 𝑄 U 1 which is similar to the quantity from Lemma 5 but takes into account a mask 𝐡 ∈ H. Although we only consider 𝑄 U 1 for the moment, we also introduce the quantities 𝑄 B 1 , 𝑄 U 2 , 𝑄 B 2 which will be used in Section 5.3 for generalizing some results to the BDP and/or approximate DP settings. For a real-valued feature map and 𝑝 ∊ {1, 2}, we define</p><formula xml:id="formula_48">𝑄 U 𝑝 (𝐱, 𝐡) ≜ 1 𝛼 ‖𝚽(𝐱) ⊙ 𝐡‖ 𝑝<label>(14)</label></formula><formula xml:id="formula_49">𝑄 B 𝑝 (𝐱, 𝐲, 𝐡) ≜ 1 𝛼 ‖(𝚽(𝐱) -𝚽(𝐲)) ⊙ 𝐡‖ 𝑝 .<label>(15)</label></formula><p>The definition extends to complex-valued feature maps using the canonical isomorphism between C 𝑚 and R 2𝑚 , but using the same mask 𝐡 for both real and imaginary parts.</p><p>Similarly to Section 4 where the privacy was directly driven by the quantity Δ U 1 (𝚺), itself equal to sup 𝐱∊𝐸 𝑄 U 1 (𝐱), the following lemma gives a generalization taking the masks into account.</p><p>Lemma 15. The Laplacian subsampled sum ̅ 𝚺 L (X ) from Definition 21 with noise level 𝑏 is UDP with sharp privacy parameter 𝜀 * , defined as</p><formula xml:id="formula_50">exp(𝜀 * ) = sup 𝐱∊𝐸 E 𝐡 exp( 1 𝑏 𝑄 U 1 (𝐱, 𝐡)).<label>(16)</label></formula><p>The proof can be found in Appendix C.1. For the standard Poisson data-subsampling mechanism, Equation ( <ref type="formula" target="#formula_50">16</ref>) can be rewritten</p><formula xml:id="formula_51">exp(𝜀 * ) = sup 𝐱∊𝐸 {(1 -𝛼) ⋅ 1 + 𝛼 ⋅ exp( 1 𝑏 1 𝛼 ‖𝚽(𝐱)‖ 1 )} = 1 + 𝛼(exp( 1 𝛼 Δ U 1 (𝚺) 𝑏 ) -1). (<label>17</label></formula><formula xml:id="formula_52">)</formula><p>We thus recover the known bound of Lemma 14, however with the additional guarantee in our case that the bound is sharp. Indeed, according to this lemma if 𝑀 is a random mechanism and S denotes the Poisson data-subsampling mechanism with parameter 𝛼, then the mechanism X ↦ 𝑀 (S(X )) is 𝜀 ′ -UDP with 𝜀 ′ = log(1 + 𝛼(exp(𝜀) -1)). Applying this result to the mechanism 𝑀 ∶ X ↦ 𝛼 -1 𝚺(X ) + 𝛏 which, by Theorem 1, is 𝜀-UDP with 𝜀 = Δ U 1 (𝛼 -1 𝚺)𝑏 -1 = 𝛼 -1 Δ U 1 (𝚺)𝑏 -1 when 𝛏 has iid (complex) Laplace components with parameter 𝑏, yields that the mechanism ̅ 𝚺 L (X ) is 𝜀 ′ -UDP with exp(𝜀 ′ ) = 1 + 𝛼(exp(𝜀) -1) = 1 + 𝛼(exp(𝛼 -1 Δ U 1 (𝚺)𝑏 -1 ) -1) = exp(𝜀 * ). Lemma 15 allows us to show that subsampling cannot improve differential privacy guarantees. Lemma 16. If the Laplacian subsampled sum ̅ 𝚺 L (X ) from Definition 21 is 𝜀-UDP, then the noisy sum 𝚺 L (X ) computed with the same feature map and the same noise parameter (but without subsampling) is 𝜀-UDP as well.</p><p>Before we prove Lemma 16, let us just mention that for specific feature maps discussed later, the Laplacian subsampled sum ̅ 𝚺 L (X ) is in fact just as differentially private as the one computed without subsampling (i.e. 𝚺 L (X )), while offering flexible tradeoffs between computational complexity and utility.</p><p>Furthermore, note that Lemma 16 also applies to standard Poisson data-subsampling. Hence, the idea that privacy might be "amplified" by subsampling should be mitigated. While the required noise level in order to make the sum of features private is indeed smaller when subsampling, the plain subsampled sum of features still needs to be rescaled by 𝛼 -1 to obtain a sketch whose utility is comparable with that of the sketch computed using all samples. Overall, with both subsampling strategies (on the samples or on the features), one can at best obtain the same guarantees as when no subsampling is used.</p><p>Proof. Recall the definitions of 𝑄 U 1 (𝐱) and 𝑄 U 1 (𝐱, 𝐡) given respectively in Lemma 5 and Equation ( <ref type="formula" target="#formula_48">14</ref>). Using Jensen's inequality and the fact that the masks are drawn according to some 𝑝 𝐡 ∊ P 𝛼 , we have for any 𝐱 the lower bound</p><formula xml:id="formula_53">E 𝐡 exp( 1 𝑏 𝑄 U 1 (𝐱, 𝐡)) ≥ exp( 1 𝑏 E 𝐡 𝑄 U 1 (𝐱, 𝐡)) = exp( 1 𝑏 𝑄 U 1 (𝐱))</formula><p>According to Lemma 15, taking the supremum on 𝐱, we get sup</p><formula xml:id="formula_54">X ,Y∊D∶X U ∼Y sup 𝐬∊Z 𝑝 ̅ 𝚺 L (X ) (𝐬) 𝑝 ̅ 𝚺 L (Y) (𝐬) = sup 𝐱∊𝐸 E 𝐡 exp( 1 𝑏 𝑄 U 1 (𝐱, 𝐡)) ≥ sup 𝐱∊𝐸 exp( 1 𝑏 𝑄 U 1 (𝐱)) = exp( 1 𝑏 sup 𝐱∊𝐸 𝑄 U 1 (𝐱)) = exp( 1 𝑏 Δ U 1 (𝚺))</formula><p>where the last equality comes from Lemma 5. If ̅ 𝚺 L (X ) is 𝜀-DP, we thus have exp(</p><formula xml:id="formula_55">1 𝑏 Δ U 1 (𝚺)) ≤ sup X ,Y∊D∶X U ∼Y sup 𝐬∊Z 𝑝 ̅ 𝚺 L (X ) (𝐬) 𝑝 ̅ 𝚺 L (Y) (𝐬) ≤ exp(𝜀)</formula><p>which means 𝑏 ≥ Δ U 1 (𝚺)/𝜀, hence by Theorem 1, 𝚺 L (X ) is 𝜀-DP.</p><p>In the following, we denote ̅ 𝚺 RFF 𝐻 and ̅ 𝚺 RQF 𝐻 the sums of subsampled features when using respectively 𝚽 = 𝚽 RFF or 𝚽 = 𝚽 RQF as a feature map. We now provide specific results for these two feature maps.</p></div>
<div><head n="5.1">Random Fourier Features</head><p>The following lemma generalizes the notion of sensitivity to the subsampled case. We include the BDP case which will be used in Section 5.3.</p></div>
<div><head>Lemma 17.</head><p>Consider 𝚽 RFF built using nonresonant frequencies, and 𝑟 ∊ ⟦1, 𝑚⟧. For each 𝐡 ∊ H 𝑟 we have sup</p><formula xml:id="formula_56">𝐱∊R 𝑑 𝑄 U 1 (𝐱, 𝐡) = sup 𝐱∊R 𝑑 inf 𝐡 ′ ∊H 𝑟 𝑄 U 1 (𝐱, 𝐡 ′ ) = √ 2𝑚. sup 𝐱,𝐲∊R 𝑑 𝑄 B 1 (𝐱, 𝐲, 𝐡) = sup 𝐱,𝐲∊R 𝑑 inf 𝐡 ′ ∊H 𝑟 𝑄 B 1 (𝐱, 𝐲, 𝐡 ′ ) = 2 √ 2𝑚.</formula><p>Moreover </p><formula xml:id="formula_57">(X ) (𝐬) 𝑝 ̅ 𝚺 RFF L (Y) (𝐬) = sup 𝐱∊𝐸 E 𝐡 exp( 1 𝑏 𝑄 U 1 (𝐱, 𝐡)) = E 𝐡 exp( 1 𝑏 sup 𝐱∊𝐸 𝑄 U 1 (𝐱, 𝐡)) = exp( 1 𝑏 𝑚 √ 2) = exp(𝜀).</formula><p>The second and third equalities are consequences of Lemma 17, and hold because 𝐡 belongs to H 𝑟 almost surely.</p></div>
<div><head n="5.2">Random Quadratic Features</head><p>We recall that for random quadratic features,  </p><formula xml:id="formula_58">𝐸 = B 2 = {𝑥 ∊ R 𝑑 ∶ ‖𝑥‖ 2 ≤ 1}, D 𝑛 ≜ (B 2 ) 𝑛 ,</formula><formula xml:id="formula_59">= B 2 sup X ,Y∊D∶X U ∼Y sup 𝐬∊Z 𝑝 ̅ 𝚺 RQF L (X ) (𝐬) 𝑝 ̅ 𝚺 RQF L (Y) (𝐬) = sup 𝐱∊𝐸 E 𝐡 exp( 1 𝑏 𝑄 U 1 (𝐱, 𝐡)) ≤ sup 𝐱∊𝐸 sup 𝐡∊supp(𝑝 𝐡 ) exp( 1 𝑏 𝑄 U 1 (𝐱, 𝐡)) = exp( 1 𝑏 1 𝛼 sup 𝐡∊supp(𝑝 𝐡 ) ‖Ω 𝐡 ‖<label>2</label></formula></div>
<div><head>𝑟</head><p>) be the block-uniform distribution. For any 𝜀 &gt; 0, releasing ̅ 𝚺 RQF L (X ) with mask distribution 𝑝 𝐡 and noise parameter 𝑏 = 𝑚/(𝑑𝜀) is 𝜀-UDP, and the bound is sharp.</p><p>Proof. By Lemma 15 and Lemma 21, it follows that sup</p><formula xml:id="formula_60">X ,Y∊D∶X U ∼Y sup 𝐬∊Z 𝑝 ̅ 𝚺 RQF L (X ) (𝐬) 𝑝 ̅ 𝚺 RQF L (Y) (𝐬) = sup 𝐱∊𝐸 E 𝐡 exp( 1 𝑏 𝑄 U 1 (𝐱, 𝐡)) = sup 𝐱∊𝐸 exp( 1 𝑏 𝑚 𝑑 ‖𝐱‖ 2 2 ) = exp( 𝑚 𝑑𝑏 ) = exp(𝜀),</formula><p>where the second equality comes from Lemma 21 as any 𝐱 for which ‖𝐱‖ 2 = 2 reaches the supremum for all 𝐡 ∊ H struct.</p></div>
<div><head>𝑟</head><p>simultaneously.</p><p>Note that the noise level required to get differential privacy when Ω is a union of orthonormal bases is independent of 𝑟 and is the same as when 𝑟 = 𝑚, i.e. without subsampling.</p></div>
<div><head n="5.3">An Upper Bound for Approximate and Bounded Differential Privacy</head><p>Similarly to Definition 21, we define the Gaussian subsampled sum of features.</p></div>
<div><head>Definition 22. The Gaussian subsampled sum of features ̅</head><p>𝚺 G (X ) of a dataset X ∊ D 𝑛 using a mask distribution 𝑝 𝐡 ∊ P 𝛼 and a noise parameter 𝜎 is the random variable</p><formula xml:id="formula_61">̅ 𝚺 G (X ) = 𝚺 𝐻 (X ) + 𝛏,<label>(18)</label></formula><p>where ∀𝑗 ∊ 1, 𝑚 , 𝜉 </p><formula xml:id="formula_62">𝑗 iid ∼ { N C (0, 𝜎 2 ) if 𝚽 is complex-valued N (0, 𝜎</formula><formula xml:id="formula_63">, Y ∈ D ′ such that X ≈ Y ∀𝐬 ∊ Z ∶ 𝑝 𝑅 𝐻 (X ) (𝐬) ≤ exp(𝜀)𝑝 𝑅 𝐻 (Y) (𝐬) + 𝛿,<label>(19)</label></formula><p>Note that the sensitivities depend on the neighboring relation used (UDP/BDP), but are always computed for an ordered relation, thus for 𝑝 ∊ {1, 2}, we have</p><formula xml:id="formula_64">Δ 𝑝,≈ (𝚺 𝐻 ) = 𝑄 𝑝 (𝐡 𝑛 ) if 𝐻 = (𝐡 1 , …, 𝐡 𝑛 ).</formula><p>The result follows by taking the expectation of these inequalities, which hold simultaneously for all 𝐻 provided that 𝑏 ≥ max 𝐻∊supp(𝑝 𝐻 ) 𝑏 * 𝐻 = max 𝐡∈supp(𝑝 𝐡 ) 𝑄 1 (𝐡)/𝜀 (resp. that 𝜎 ≥ max 𝐻∊supp(𝑝 𝐻 ) 𝜎 * 𝐻 = 𝜂(𝜀, 𝛿) max 𝐡∈supp(𝑝 𝐡 ) 𝑄 2 (𝐡)/(2𝜀) 1/2 ).</p><p>The masks are drawn i.i.d. according to 𝑝 𝐡 , and for any pair (X , 𝐻) we have 𝚺 𝐻 (𝜎(X )) = 𝚺 𝜎 -1 (𝐻) (X ), thus for any dataset X and permutation 𝜎 ∊ S |X | we have</p><formula xml:id="formula_65">𝑝 𝑅(X ) (𝐬) = E 𝐻 [𝑝 𝑅 𝐻 (X ) (𝐬)] = E 𝐻 [𝑝 𝑅 𝜎 -1 (𝐻) (X ) (𝐬)] = E 𝐻 [𝑝 𝑅 𝐻 (𝜎(X )) (𝐬)]</formula><p>If X and Y are two datasets such that X ∼ Y (we assume for now |X | ≥ |Y|), then there are two permutations 𝜎 1 ∊ S |X | , 𝜎 2 ∊ S |Y| such that 𝜎 1 (X ) ≈ 𝜎 2 (Y) for the related ordered relation (it follows from the definition for BDP, and one can take one permutation to be the identity for UDP).</p><p>Thus using the appropriate noise level according to Equation <ref type="bibr" target="#b19">(19)</ref> we have </p><formula xml:id="formula_66">∀X ∼ Y, 𝐬 ∊ Z ∶ E 𝐻 [𝑝 𝑅 𝐻 (𝜎 1 (X )) (𝐬)] ≤ exp(𝜀)E 𝐻 [𝑝 𝑅 𝐻 (𝜎 2 (Y)) (𝐬)] + 𝛿 i.e. ∀X ∼ Y, 𝐬 ∊ Z ∶ 𝑝 𝑅(𝜎 1 (X )) (𝐬) ≤ exp(𝜀)𝑝 𝑅(𝜎 2 (Y)) (𝐬) + 𝛿 i.e. ∀X ∼ Y, 𝐬 ∊ Z ∶ 𝑝 𝑅(X ) (𝐬) ≤ exp(𝜀)𝑝 𝑅(Y) (𝐬) +</formula><formula xml:id="formula_67">(𝛚 𝑇 𝑖 𝐱) 4 ) 1/2 = 𝑚 𝑟 𝑆 4 (Ω 𝐡 )</formula><p>As 𝚽 RQF takes positive values and vanishes in 𝟎, which belongs to 𝐸, the same bound holds for BDP.</p><p>Note that in these two cases, subsampling increases the bounds and might have a negative impact on the utility (for subsequent learning) of the mechanism.</p><p>Table <ref type="table">1</ref>: Summary of privacy results without subsampling (Section 4) and for the sum of features only. For each type of privacy guarantee (column) and for each sketch feature function (row), we provide a potentially loose (≤) or sharp (=) bound on the relevant sensitivity Δ, which can be plugged into the associated privacy-preserving sum of features mechanism (top row). We use the notation 𝜂 = 𝜂(𝜀, 𝛿), which refers to Theorem 2. (1) With ℎ = 𝟏, i.e. Δ 1 (𝚺 RFF ) = sup 𝐱 𝑄 B 1 (𝐱, 𝟏) where 𝑄 B 1 is computed with 𝑟 = 𝑚. (2) Using a simple triangle inequality. </p><formula xml:id="formula_68">Pure 𝜀-DP Approximate (𝜀, 𝛿)-DP ̅ 𝚺 L (X ) = 𝚺 𝐻 (X ) + 𝛏 with 𝜉 𝑗 ∼ L(𝑏), 𝐻 ∼ 𝑝 𝑛 𝐡 ̅ 𝚺 G (X ) = 𝚺 𝐻 (X ) + 𝛏 with 𝜉 𝑗 ∼ N (0, 𝜎</formula><formula xml:id="formula_69">𝑏 * ≤ 𝑚/(𝑑𝜖)</formula><p>No particular closed form Table <ref type="table">2</ref>: Summary of privacy results with subsampling (Section 5). For each type of privacy guarantee (column) and for each sketch feature function (row), we provide a potentially loose (≤) or sharp (=) bound on the required additive noise levels (𝑏 * or 𝜎 * ). We denote 𝜂 = 𝜂(𝜀, 𝛿), which refers to Theorem 2, and 𝛼 the subsampling parameter (and 𝑟 ≜ 𝛼𝑚 when relevant). (1) Using a simple triangle inequality.</p></div>
<div><head n="6">Utility Guarantees under Differential Privacy</head><p>Having established the differential privacy properties of noisy sketching mechanisms, we conclude this paper by investigating the impact of different aspects of those mechanisms on their utility for subsequent learning (i.e. the quality of the models learned from noisy sketches, as measured by the metrics introduced in Definitions 2, 3 and 5). More precisely, we derive a principled approach to tune various parameters of our mechanism (e.g. the subsampling strategy, the split of the privacy budget, the sketch size) a priori. Given a fixed target privacy level, several choices of parameters are indeed possible, that can each yield a different utility value. Our goal is to pick the best choice of parameters (or at least a promising one), without accessing the data, which would require to allocate a significant part of the privacy budget for parameter tuning.</p><p>We first establish, both from theoretical sketched learning guarantees as well as from numerical simulations, that a proxy comprising of a noise-to-signal ratio (NSR) and the sketch size 𝑚 can qualitatively predict the utility (Section 6.1). The NSR is then computed analytically (Section 6.2) and used to tune some of the parameters of our method: the subsampling strategy (Sections 6.3 and 6.4), the splitting of the privacy budget (Section 6.5), and the choice of the sketch size (Section 6.6, where we exploit the combined influence of the NSR and 𝑚 on the utility).</p></div>
<div><head n="6.1">Noise to signal ratio as a proxy for utility</head><p>We recall (see the beginning of Section 2) that a learning task is defined by a risk function R and a domain H (also known as the hypothesis class), and the parameters one would like to learn are 𝛉 * ∈ arg min 𝛉∈H R(𝜋 0 , 𝛉), where 𝜋 0 is the true (unknown) distribution of the data. The goal is to estimate -in our case, from the noisy sketch only -a set of parameters θ such that the quantity R(𝜋 0 , θ )-R(𝜋 0 , 𝛉 * ) , called an excess risk, can be controlled. Previous works <ref type="bibr" target="#b27">[27,</ref><ref type="bibr" target="#b10">10]</ref> showed that such a control can be achieved using proof techniques that leverage the analogy between sketching and compressive sensing. Indeed, although the feature map 𝚽 is non-linear, sketching is a linear operation w.r.t. distributions, and we denote A the associated operator defined as A(𝜋) = E 𝑥∼𝜋 Φ(𝑥). With this notation, the clean "true" sketch would be 𝐳 = A(𝜋 0 ), and the clean empirical sketch can be denoted 𝐳 X = A(𝜋 X ). In practice, we observe a noisy version 𝐬(X ) of the empirical sketch, which can for example be computed as the ratio 𝐬(X ) = (𝚺(X ) + 𝛏)/(|X | + 𝜁) with 𝛏 being either Laplacian or Gaussian according to Definitions 17 and 19. As shown in <ref type="bibr" target="#b27">[27,</ref><ref type="bibr" target="#b10">10]</ref>, for 𝑘-means clustering, Gaussian mixture modeling and PCA, learning from the noisy sketch 𝐬(X ) can be expressed as solving a linear inverse problem on a certain parametric set of probability distributions. Under some assumptions on the sketching function 𝚽 and the learning task, the excess risk can be bounded by a quantity that involves a measure of noise level ‖𝐞‖ 2 , with 𝐞 ≜ 𝐬(X ) -𝐳.</p><p>As a proxy for the utility of a noisy sketch, we thus propose the noise-to-signal ratio (NSR), defined as NSR ≜ ‖𝐬(X ) -𝐬‖ 2 2 /‖𝐬‖ 2 w.r.t. some reference sketch 𝐬, that will typically be the clean empirical sketch of X , 𝐳 X , or the "true" sketch 𝐳 of the assumed underlying distribution 𝜋 0 .</p><p>The NSR was indeed shown empirically <ref type="bibr" target="#b45">[45]</ref> to be a good proxy to estimate the utility of a sketching mechanism for the task of clustering where performance is measured with the SSE (sum of squared errors) defined in <ref type="bibr" target="#b1">(2)</ref>. Figures <ref type="figure">4</ref> and<ref type="figure">5</ref> give an overview of this correlation. On Figure <ref type="figure">4</ref>, we plot the relative SSE (RSSE, i.e. the ratio between the SSE obtained with centroids determined from a sketch and the SSE obtained with centroids computed using Lloyd's algorithm) for data generated according to Gaussian mixtures with parameters 𝑘 = 𝑑 = 10, 𝑚 = 10𝑘𝑑. The desired NSR is obtained by adding isotropic noise of controlled magnitude on the clean sketch computed without subsampling. In Figure <ref type="figure">5</ref>, we plot the RSSE for 𝑛 = 10 4 using different sketch sizes and NSRs, again obtained with isotropic noise and without subsampling. The red dashed line corresponds to 𝑚 = 2𝑘𝑑, and as expected <ref type="bibr" target="#b36">[36]</ref> the reconstruction fails below this line. From this plot, we derive that when 𝑚 ≥ 2𝑘𝑑, one can consider that the reconstruction is successful provided that NSR ≤ 𝑚/(10 3 𝑘𝑑) ≜ NSR max (𝑚) (yellow area). We thus propose to use NSR-minimization as a criterion to tune the parameters of our method, assuming the sketch size 𝑚 is fixed (we discuss how to select this size in Section 6.6). </p></div>
<div><head n="6.2">Analytical estimation of the noise level</head><p>We now compute in this section the expected noise level (and NSR) induced by the mechanisms introduced in the previous sections and possibly combined with a hybrid dataset subsampling mechanism (i.e., we consider subsampling at the same time features and data samples as explained below).</p><p>Let X be a fixed dataset. The noise level can be measured with respect to the "true" sketch 𝐳 of the assumed underlying distribution 𝜋 0 , or with respect to the clean empirical sketch 𝐳 X . In the first case, which is relevant to take into account the statistical significance due to the size 𝑛 of the dataset, we define 𝐞 ≜ 𝐬(X ) -𝐳, and the noise level as E‖𝐞‖ 2  2 , where the expectation is taken on both the randomness of the mechanism and on the draw of X . We define the noise-to-signal ratio (NSR) as the noise level normalized by the signal energy, i.e. NSR = E‖𝐞‖ 2  2 /‖𝐳‖ 2 2 . When 𝐳 X is chosen as the reference signal rather than 𝐳, we have NSR = E‖𝐬(X ) -𝐳 X ‖ 2 2 /‖𝐳 X ‖ 2 2 , and the expectation is taken w.r.t. the randomness of the mechanism only.</p><p>Subsampling the dataset. Although we were mainly interested in subsampling the individual features 𝚽(𝐱 𝑖 ) when introducing our sampling mechanism in Section 5, we have seen that another straightforward way to reduce the computational complexity is to simply subsample the dataset. The sum of features combining both subsampling strategies is given as</p><formula xml:id="formula_70">Σ(X ) ≜ 1 𝛽 ( 1 𝛼 𝑛 ∑ 𝑖=1 𝑔 𝑖 ⋅ 𝚽(𝐱 𝑖 ) ⊙ 𝐡 𝑖 + 𝛏),<label>(20)</label></formula><p>where the scalars (𝑔 𝑖 ) 1≤𝑖≤𝑛 are in {0, 1} and randomly drawn (i.i.d. Bernoulli with parameter 𝛽, or 𝑛 ′ among 𝑛 without replacement, in which case we define 𝛽 ≜ 𝑛 ′ /𝑛), the masks (𝐡 𝑖 ) 1≤𝑖≤𝑛 are drawn as previously i.i.d. according to a distribution 𝑝 𝐡 ∊ P 𝛼 , and the additive noise 𝛏 is Laplacian or Gaussian. Note that, when the (𝑔 𝑖 ) 1≤𝑖≤𝑛 are drawn i.i.d. according to a Bernoulli distribution, then (20) can be seen as a special case of Definition 21 with 𝐡 ′ 𝑖 = 𝑔 𝑖 𝐡 𝑖 and 𝛼 ′ = 𝛼𝛽. We here clearly dissociate the two sampling strategies, which allows us to consider sampling the data without replacement, but will also make it easier to separate the contributions to the NSR coming from the two sampling strategies. From now on, we consider an estimator 𝐬(X ) of 𝐳 X as a function of the sum of features Σ(X ) introduced in (20), which by an adequate choice of the parameters encompasses all the mechanisms previously defined.</p><p>Noise-to-signal ratio when 𝑛 is public. When the dataset size 𝑛 is assumed to be public (e.g. in a BDP setting), we can use the estimator 𝐬(X ) ≜ Σ(X )/𝑛. The following result is proved in Appendix D.</p><p>Lemma 26. The noise-to-signal ratio of the mechanism 𝐬(X ) = Σ(X )/𝑛 with additive noise of variance 𝜎 2 𝜉 , features subsampling with parameter 𝛼 ≜ 𝑟/𝑚 and i.i.d. Poisson subsampling of the dataset samples with parameter 0 ≤ 𝛽 ≤ 1 is w.r.t. 𝐳:</p><formula xml:id="formula_71">NSR 𝐳 = 1 𝑛 ( 1 𝛼𝛽 E 𝐱 ‖𝚽(𝐱)‖ 2 ‖𝐳‖ 2 -1) + 𝑚 𝑛 2 𝛽 2 𝜎 2 𝜉 ‖𝐳‖ 2 w.r.t. 𝐳 X : NSR 𝐳 X = 1 𝑛 ( 1 𝛼𝛽 -1)( 1 𝑛 𝑛 ∑ 𝑖=1 ‖𝚽(𝐱 𝑖 )‖ 2 ) 1 ‖𝐳 X ‖ 2 + 𝑚 𝑛 2 𝛽 2 𝜎 2 𝜉 ‖𝐳 X ‖ 2 .</formula><p>The expressions for sampling without replacement differ slightly and are given in the proof in Appendix D.</p><p>Noise-to-signal ratio when 𝑛 is sensitive. When the dataset size is considered sensitive, noise 𝜁 must be added on 𝑛 for privacy as discussed earlier. Our estimator of the sketch can then be written</p><formula xml:id="formula_72">𝐬(X ) = Σ(X )𝑓(|X | + 𝜁), where 𝑓(|X | + 𝜁) is an estimator of 1/|X |. The noise-to-signal ratio is now defined as NSR ≜ E‖ Σ(X )𝑓(|X | + 𝜁) -𝐬‖ 2 2 /‖𝐬‖ 2 2</formula><p>, where 𝐬 stands for the reference signal, which can again be either 𝐳 or 𝐳 X . An analytic expression of this NSR is given in Appendix D which involves the bias and variance of the estimator of 1/|X | defined by 𝑓. Considering an unbiased estimator, a Cramer-Rao lower bound leads to the following result which is proved in Appendix D. Lemma 27. When using an estimator 𝑓 of 1/𝑛 computed from the quantity 𝑛+𝜁, where 𝜁 ∼ L(0, 𝜎 𝜁 / √ 2), a Cramer-Rao bound on the noise-to-signal ratio of the sketching mechanism is</p><formula xml:id="formula_73">NSR 𝜁 ≥ (1 + 𝜎 2 𝜁 2𝑛 2 )(NSR + 1) -1,</formula><p>where NSR refers to the ratio obtained without 𝑓 (i.e. when 𝜁 = 0) as computed in Lemma 26, and can be computed with respect to either 𝐳 or 𝐳 X .</p></div>
<div><head n="6.3">Comparison of the two subsampling strategies</head><p>For a given dataset size 𝑛, the sketching cost scales in Θ(𝑛𝛼𝛽) when subsampling the sketches with 𝑟 = 𝛼𝑚 observations (with 𝛼 ≤ 1) and subsampling the dataset by using only 𝑛 ′ = 𝛽𝑛 samples. Hence for a given 𝑛, a constant product 𝛼𝛽 means a constant computational complexity. We now use Lemma 26 to show that, for an equivalent computational complexity and privacy, subsampling the sketches leads to a better NSR, and hence likely a better utility, than subsampling the dataset.</p><p>For Poisson data subsampling, the only term of the NSR (given in Lemma 26) that varies with (𝛼, 𝛽) at constant complexity 𝛼𝛽 is the term coming from the additive noise:</p><formula xml:id="formula_74">NSR 𝜉 ≜ 𝑚 𝑛 2 𝛽 2 𝜎 2 𝜉 ‖𝐳‖ 2 .<label>(21)</label></formula><p>Note that this holds as well when working with the Cramer-Rao bound from Lemma 27, as the term 𝜎 𝜁 does not depend on 𝛼, 𝛽 at all. To investigate how this varies we need to take into account that for a fixed target privacy 𝜀, the variance 𝜎 2 𝜉 also depends on 𝛽. Let us consider the 𝜀-DP setting with random Fourier features as an illustration (a similar reasoning holds for random quadratic features). When the (𝑔 𝑖 ) 1≤𝑖≤𝑛 are i.i.d. Bernoulli random variables with parameter 𝛽, then the distribution of the (𝑔 𝑖 𝐡 𝑖 ) 1≤𝑖≤𝑛 is in P 𝛼𝛽 and thus according to Lemma 15, releasing Σ as defined in <ref type="bibr" target="#b20">(20)</ref> with noise 𝛏 of parameter 𝑏 𝜉 (i.e. with total noise level 𝑏 𝜉 /𝛽 given that 𝛏 is normalized by when the product 𝛼𝛽 is constant. Displayed using <ref type="bibr" target="#b23">(23)</ref> with the convention 𝑚 3 𝑛 2 ‖𝐳‖ 2 = 1 to fix a vertical scale. where (i) follows from Lemma 15 (applied on the mechanism which subsamples only the features and adds Laplacian noise at level 𝑏 𝜉 ) and Lemma 18 (assuming non-resonant frequencies and distribution 𝑝 𝐡 such that 𝐡 ∈ H 𝑟 almost surely, where 𝑟 = 𝛼𝑚). This is equivalent to saying that ( <ref type="formula" target="#formula_70">20</ref>) is 𝜀-DP provided</p><formula xml:id="formula_75">𝛽 -1 in (20)) is 𝜀-DP with exp(𝜀) = sup 𝐱∊𝐸 E 𝑔 E 𝐡 exp( 𝛽 𝑏 𝜉 1 𝛼𝛽 ‖𝚽(𝐱) ⊙ (𝑔𝐡)‖ 1 ) = sup 𝐱∊𝐸 ((1 -𝛽) • 1 + 𝛽 • E 𝐡 exp( 1 𝑏 𝜉 1 𝛼 ‖𝚽(𝐱) ⊙ 𝐡‖ 1 )) (i) = (1 -𝛽) + 𝛽 • exp(𝜀 ′ ), with 𝜀 ′ = √ 2𝑚 𝑏 𝜉 ,</formula><formula xml:id="formula_76">𝑏 𝜉 = √ 2𝑚 𝜀 ′ , with 𝜀 ′ = log(1 + (exp(𝜀) -1)/𝛽)<label>(22)</label></formula><p>and that this noise level is sharp. The same bound could have been obtained by applying Lemma 14 on our mechanism which subsamples only the features, however here again Lemma 15 additionally proves that the bound is sharp. Given that 𝜎 2 𝜉 ∝ 𝑏 2 𝜉 , the resulting NSR term is then according to ( <ref type="formula" target="#formula_74">21</ref>) and ( <ref type="formula" target="#formula_76">22</ref>) of the order of</p><formula xml:id="formula_77">NSR 𝜉 ∝ 𝑚 3 𝑛 2 ‖𝐳‖ 2 1 𝛽 2 (𝜀 ′ ) 2 = 𝑚 3 𝑛 2 ‖𝐳‖ 2 1 𝛽 2 log 2 (1 + (exp(𝜀) -1)/𝛽) .<label>(23)</label></formula><p>In particular we have NSR 𝜉 ∝ 𝑚 3 𝑛 2 ‖𝐳‖ 2 1 𝜀 2 when 𝛽 = 1. The behavior of this quantity as a function of the Poisson data subsampling rate 0 &lt; 𝛽 &lt; 1 (recall that we consider a constant overall subsampling rate 𝛼𝛽) depends on the considered privacy regime. As illustrated on Figure <ref type="figure" target="#fig_7">6</ref>, for each of the three curves: a) when 𝜀 ≪ 𝛽, we have 𝜀 ′ ≈ 𝜀/𝛽 and 1/(𝛽 2 (𝜀 ′ ) 2 ) ≈ 1/𝜀 2 , thus NSR 𝜉 is of the same order for 𝛽 ≪ 1 and 𝛽 = 1, hence the difference between the two subsampling schemes is negligible; b) if 𝜀 ≫ 1 then 𝜀 ′ ≈ 𝜀 and NSR 𝜉 is thus increased by a factor 1/𝛽 2 when subsampling on 𝑛 (i.e. when 𝛽 ≪ 1, and in comparison with the setting 𝛽 = 1), which might be damageable in terms of utility. Put differently, in light of the expression <ref type="bibr" target="#b23">(23)</ref>, for each privacy parameter 𝜀, the minimum value of 1/(𝛽𝜀 ′ ) 2 -the quantity which drives NSR 𝜉 -is achieved at 𝛽 = 1. The effect on the total NSR for the two sampling scenarios is shown in Figure <ref type="figure" target="#fig_8">7</ref> using the analytic expressions of Lemma 26 and Equation <ref type="bibr" target="#b23">(23)</ref>. This confirms that subsampling the features rather than the samples yields substantial NSR gains for moderate 𝜀 (i.e. neither too large nor too small). For large 𝜀, the noise level is very low anyway, and no difference appears between the two scenarios. Additional experiments (not shown here) show that when sampling the dataset without replacement rather than with Poisson sampling, and measuring the NSR with 𝐳 X as a reference signal, subsampling the features can become slightly disadvantaging for large values of 𝜀, but the difference is very small.</p></div>
<div><head n="6.4">Regimes combining privacy and utility</head><p>In this section, we try to highlight the regimes in which the sketches produced by our mechanism are still useful from a learning perspective. We do so by comparing the different contributions to the NSR.</p><p>In light of the results of Section 6.3, we focus on subsampling the features only (i.e. 𝛽 = 1). In this setting, and when working with random Fourier features, since ‖𝚽 RFF (𝐱)‖ 2 = 𝑚 for every 𝐱, the different contributions to the NSR (computed with 𝐳 as reference) are of the order of</p><formula xml:id="formula_78">NSR X ≈ 1 𝑛 (𝐶 0 -1), NSR 𝜉 ≈ 𝐶 0 𝑚 2 𝑛 2 𝜀 2 , NSR 𝐻 ≈ 𝐶 0 𝑛 ( 1 𝛼 -1),</formula><p>where 𝐶 0 ≜ 𝑚/‖𝐳‖ 2 . Using the interpretation of ‖𝐳‖ 2 /𝑚 as an expected value <ref type="bibr" target="#b27">[27]</ref> the quantity 𝐶 0 is essentially independent of 𝑚 and satisfies 𝐶 0 &gt; 1. In practice, empirical simulations on very different datasets suggest that one can safely assume 𝐶 0 &lt; 10.</p><p>Acceptable noise level without subsampling. The total noise is acceptable when the sum of these contributions to the NSR is smaller than some threshold NSR max , which depends on the sketch size 𝑚 as seen on Figure <ref type="figure">4</ref>. Necessary conditions read:</p><formula xml:id="formula_79">NSR X ≤ NSR max ⇔ 𝑛 ≳ 1 NSR max NSR 𝜉 ≤ NSR max ⇔ 𝑛 ≳ 𝑚 𝜀√NSR max<label>(24)</label></formula><p>Thus utility is preserved (and privacy achieved) when</p><formula xml:id="formula_80">𝑛 ≳ max( 1 NSR max , 𝑚 𝜀√NSR max ).<label>(25)</label></formula><p>Acceptable noise level with subsampling. The noise induced by feature subsampling is acceptable when NSR 𝐻 ≲ NSR max , i.e., for subsampling with 𝛼 = 1/𝑚, when 𝑛 ≳ 𝑚/NSR max . Combining this with the two conditions from the previous paragraph, we conclude that</p><formula xml:id="formula_81">𝑛 ≳ 𝑚 max( 1 NSR max , 1 𝜀√NSR max )<label>(26)</label></formula><p>allows drastic feature subsampling while preserving utility.</p><p>Regime where feature subsampling adds insignificant noise. When</p><formula xml:id="formula_82">NSR 𝐻 ≪ max(NSR X , NSR 𝜉 ) ⇔ 1 𝛼 ≪ 1 + max(1, 𝑚 2 𝑛𝜀 2 ),<label>(27)</label></formula><p>feature subsampling adds insignificant noise compared to the other noises. When subsampling with parameter 𝛼 = 1/𝑚, this is equivalent to 𝑛 ≪ 𝑚 𝜀 2 . In light of <ref type="bibr" target="#b24">(24)</ref>, one can check that the regime where subsampling noise is insignificant while the total noise is acceptable corresponds to</p><formula xml:id="formula_83">𝑚 𝜀√NSR max ≲ 𝑛 ≪ 𝑚 𝜀 2 ,<label>(28)</label></formula><p>which is only feasible when the target privacy satisfies 𝜀 ≪ √NSR max .</p><p>Example (compressive clustering with random Fourier Features) When performing compressive clustering using random Fourier Features, we observed empirically on Figure <ref type="figure">5</ref> that NSR max ≈ 10 -3 𝑚/(𝑘𝑑). Thus the condition <ref type="bibr" target="#b26">(26)</ref> for having an acceptable noise level when subsampling can be rewritten</p><formula xml:id="formula_84">𝑛 ≳ max(10 3 𝑘𝑑, √ 10 3 𝑘𝑑𝑚 𝜀 ).<label>(29)</label></formula><p>Similarly, subsampling with 𝛼 = 1/𝑚 will induce an insignificant noise level only when 𝜀 ≪ √10 -3 𝑚/(𝑘𝑑) according to Equation <ref type="bibr" target="#b28">(28)</ref>. This confirms that sketching is compatible with drastic features subsampling for private compressive clustering when working with large collections, but also that subsampling can be perfomed without any impact on the NSR for high privacy levels.</p></div>
<div><head n="6.5">A Heuristic for Privacy Budget Splitting (Laplacian Noise)</head><p>When using unbounded differential privacy, one needs to split the total privacy budget 𝜀 between a budget 𝜀 𝜉 ≜ 𝛾𝜀 (where 𝛾 ∊]0, 1[) used for releasing the sum of sketches Σ, and a budget 𝜀 𝜁 ≜ (1 -𝛾)𝜀 used for releasing the dataset size. This is only needed in the UDP setting since for BDP there is no need to split the privacy budget, given that the dataset size is not considered as sensitive.</p><p>We build a heuristic for the 𝜀-DP setting which consists in choosing 𝛾 * ∊]0, 1[ minimizing the NSR. In light of Section 6.3, we consider for simplicity 𝛽 = 1, i.e. subsampling is only performed on the features but not on the samples. We further focus on random Fourier features, where ‖𝚽 RFF (𝐱)‖ 2 2 = 𝑚 does not depend on 𝐱, leading to a simplified expression of the Cramer-Rao bound on the NSR from Lemma 27:</p><formula xml:id="formula_85">NSR RFF * = (1 + 𝜎 2 𝜁 2𝑛 2 )(1 - 1 𝑛 + 𝑚 𝑛‖𝐳‖ 2 ( 1 𝛼 + 1 𝑛 𝜎 2 𝜉 )) -1,</formula><p>with 𝐳 as the reference signal. By injecting for 𝜎 </p><formula xml:id="formula_86">when 𝑛 ≫ 1/𝜀, 𝛾 * (𝑛, 𝜀) ≈ 1 -(𝑛𝜀) -2/3 .</formula><p>In practice, it is important to choose 𝛾 independently of 𝑛 in order for the whole mechanism to stay private. Given that the NSR only decreases with 𝑛, we have for any 𝜀 &gt; 0 and any 𝑛 0 that arg min 𝛾 max 𝑛≥𝑛 0 NSR(𝛾, 𝑛) = 𝛾 * (𝑛 0 , 𝜀), yielding a simple rule to choose 𝛾. In light of Section 6.4, in the regime of acceptable noise levels we have Note that this is only a heuristic, allowing to choose 𝛾 independently of 𝑛 but optimized for the worstcase scenario with acceptable utility; even if 𝑛 &lt; 𝑛 0 the mechanism will be guaranteed to be private (although with limited utility).</p></div>
<div><head n="6.6">Choice of the Sketch Size</head><p>Because the noise level depends on the sketch size 𝑚, the design of a sketching procedure becomes delicate since overestimating 𝑚 decreases the performance, unlike in the non-private case where increasing 𝑚 usually only helps. As an illustration of this fact, consider the numerical experiment represented Figure <ref type="figure" target="#fig_11">8</ref> (top row), where we estimate the relative SSE (RSSE) achieved by compressive k-means (CKM) from the 𝜀-DP sketch as a function of its size 𝑚. Relative SSE is defined as the ratio between the method SSE, as defined in Equation ( <ref type="formula" target="#formula_2">2</ref>), and the SSE of Lloyd's standard kmeans algorithm, which is not private nor compressive. As expected, in the non-private setting the SSE decreases monotonically with 𝑚. However, when 𝜀 &lt; ∞ and 𝑛 is moderate, increasing 𝑚 (and thus the noise, which is proportional to 𝑚 according to Lemma 7) results in a worse SSE at some point. This phenomenon is more pronounced when the privacy constraints are higher, i.e. a smaller 𝜀 induces a smaller range of "optimal" values for the sketch size. There is thus a trade-off to make between revealing enough information for CKM to succeed (𝑚 large enough) and not revealing too much information, such that the noise needed to ensure the privacy guarantee is not too penalizing, this trade-off being more difficult in the high privacy regime. This behavior can be explained by the observations of Section 6.4 (paragraph "acceptable noise level") relative to the NSR. We consider for conciseness here that no subsampling is used (i.e. NSR 𝐻 = 0) and 10 -0.5 10 0.0 10 0.5 10 1.0 10 1.  𝜀-DP (𝛿 = 0). Given that utility is measured w.r.t. the RSSE (which is relative to the optimal error for the given dataset, but agnostic to the true data distribution), we take 𝐳 X as the reference signal to compute the NSR, i.e. we have NSR X = 0. Utility is then preserved provided that NSR 𝜉 ≤ NSR max , which according to <ref type="bibr" target="#b29">(29)</ref> translates to the condition 𝑛 ≥ √ 1000𝑘𝑑𝑚/𝜀. Recall that we also need 𝑚 ≥ 2𝑘𝑑 as shown in Section 6.1. These conditions can be rewritten 2 ≤ 𝑚/(𝑘𝑑) ≤ 𝑛 2 𝜀 2 /(10 3 (𝑘𝑑) 2 ), which is possible only when 𝑛 ≥ √ 2 × 10 3 𝑘𝑑/𝜀. In Figure <ref type="figure" target="#fig_11">8</ref> we have 𝑘 = 4, 𝑑 = 8, thus this requirement translates respectively for 𝑛 = 10 4 , 10 5 , 10 6 to the conditions 𝜀 ≥ 0.14, 𝜀 ≥ 0.014, 𝜀 ≥ 0.0014, which correspond quite well to what is observed (top row).</p><p>As shown on Figure <ref type="figure" target="#fig_11">8</ref> (bottom), relaxing the privacy constraint to allow 𝛿 &gt; 0 mitigates the impact of 𝑚 on the noise to add (recall from theorem 11 that the noise is then proportional to √ 𝑚 instead of 𝑚), and that even for smaller values of 𝑛. This relaxation has the clear advantage of improving the utility for similar values of 𝑛 and 𝜀 even for small 𝛿, and also facilitates the choice of 𝑚, as good utilities can be reached on a wider range of sketch sizes.</p></div>
<div><head n="7">Discussion and Perspectives</head><p>We proposed a framework to learn from potentially massive datasets using limited computational resources, while ensuring the differential privacy of the data providers. Beside being promising as privacyinducing mechanism in terms of privacy, our framework has several key interesting features compared to other methods from the literature, that are discussed here together with main limitations and perspectives.</p><p>Efficient and Distributed Learning Firstly, the computational advantages of non-private sketching <ref type="bibr" target="#b33">[33,</ref><ref type="bibr" target="#b36">36]</ref> remain valid after our addition of a privacy layer. In particular, learning from the sketch can be done with time and space complexities which do not depend on the number of samples 𝑛 in the dataset. Moreover, the sketching process is embarassingly parallel due to the averaging operation. Sketches coming from several separate data holders can thus be aggregated again after sketching, providing distributed differential privacy for free, without any need for a trusted central party.</p><p>Versatility Another advantage is that the sketch, acting as a surrogate for the whole dataset, contains more information than just the output of one specialized algorithm, and can thus be used multiple times. This can be leveraged to solve different learning tasks from a same sketch without breaking privacy, assuming that those tasks can be solved using the same sketching operator <ref type="bibr" target="#b27">[27]</ref>. This is what we already observed for random Fourier features, which can be used for both 𝑘-means clustering and fitting a Gaussian mixture model, two different but related estimation problems.</p><p>This potential versatility of the sketch also allows to run the learning algorithm with different initializations and parameters, producing multiple solutions; the distance to the empirical sketch can be used as a metric to pick the best of these solutions. This is in contrast with usual (e.g. iterative) differentially private methods that can be highly sensitive to the choice of such parameters (which have to be selected a priori, as accessing the data for parameter tuning breaks the privacy guarantee). Of course the devil is in the details, and further studies are needed to investigate to what extent it is possible to choose parameters such as the sketch dimension or the "scale parameter" of random Fourier features (see below) so as to combine privacy, utility and versatility. Preliminary investigations indicate that one can find sketch sizes enabling to achieve good utility for both compressive gaussian mixture modeling and compressive k-means with 𝛿 = 10 -8 and 𝜀 above or equal to 10 -1.5</p><p>Open challenges Although the sketch serves as a general-purpose synopsis of the dataset, at least some a priori knowledge about the data distribution and/or the target task is required when designing the sketch feature map 𝚽 ∶ 𝐱 ↦ 𝑓(Ω 𝑇 𝐱). We discussed how the nonlinearity 𝑓 must be selected according to the desired task, and explained in Section 6.6 that the choice of the sketch size 𝑚 could be seen as a trade-off between performance and privacy. Going for approximate DP mitigates this difficulty. Another crucial point is the choice of the frequencies distribution for Fourier features (Ω is drawn i.i.d. Gaussian in the PCA setting, and this concern does not apply in that case). Even when the general shape of the frequency distribution is selected and only a single scale parameter 𝜎 has to be pinned down (𝜎 essentially controls the scale at which we can detect individual clusters), estimating an appropriate value for it is not straightforward. This might be a limitation to using sketching in practice but, on the other side, any heuristic that could be developed in the future to estimate 𝜎 should be easy to make private as it releases a single scalar value.</p><p>Perspectives Finally, we expect that compressive learning will be extended to more learning tasks in future works. The private sketching framework presented here would be directly transferable to those new algorithms, although the sketch sensitivity would have to be re-computed for novel feature functions. The true potential of private sketching will depend on how well the general field of compressive learning will be able to answer this challenge in the coming years.</p></div>
<div><head>A Results on Nonresonant Frequencies</head><p>In order to prove the sharpness of the sensitivity computed in Lemma 7, we rely on some results from diophantine approximation theory. We recall the definition of nonresonant frequencies. Definition 23. The vectors (𝜔 𝑗 ) 1≤𝑗≤𝑚 ∊ R are called nonresonant frequencies if they are linearly independent over the rationals. The vectors (𝛚 𝑗 ) 1≤𝑗≤𝑚 ∊ R 𝑑 are called nonresonant frequency vectors if there exists a vector 𝐯 ∊ R 𝑑 such that the scalars (𝛚 𝑇 𝑗 𝐯) 1≤𝑗≤𝑚 are nonresonant frequencies. Before proving Lemma 6, we introduce a variant of the result in dimension 1.</p><p>Lemma 29. Let (𝜔 𝑗 , 𝜑 𝑗 ) 1≤𝑗≤𝑚 be real numbers, and 𝑓 a 2𝜋-periodic function such that there exists 𝑧 at which 𝑓 is continuous and reaches its maximum. If the (𝜔 𝑗 ) 1≤𝑗≤𝑚 are linearly independent over the rationals, then sup 𝑥∊ℝ inf 𝑗∊ 1;𝑚 𝑓(𝜔 𝑗 𝑥 -𝜑 𝑗 ) = sup 𝑥∊R 𝑓(𝑥).</p><p>Proof. Let 𝑧 ∊ [0, 2𝜋[ be a point at which 𝑓 reaches its maximum, i.e., 𝑧 ∈ arg max [0,2𝜋[ 𝑓(𝑧), and at which 𝑓 is continuous. Using this continuity assumption, the result amounts to saying that one can find 𝑡 ∊ R such that the (𝜔 𝑗 𝑡 -𝜑 𝑗 -𝑧) 1≤𝑗≤𝑚 are simultaneously arbitrary close to 2𝜋Z. Denoting 𝑑(𝑥, 𝑆) = inf{|𝑥 -𝑠| ∶ 𝑠 ∊ 𝑆}, this is equivalent to saying that for any 𝜀 &gt; 0, we can find a real 𝑡 such that we simultaneously have 𝑑((𝜔 𝑗 𝑡 -𝜑 𝑗 -𝑧)/(2𝜋), Z) &lt; 𝜀 for all 𝑗 ∊ 1, 𝑚 . This derives directly from Kronecker's theorem <ref type="bibr" target="#b37">[37]</ref> on diophantine approximation, given that the 𝜔 𝑗 /(2𝜋) are linearly independent over the rationals.</p><p>Proof of Lemma 6. We propose to convert the problem to its one-dimensional counterpart. sup</p><formula xml:id="formula_87">𝐱∊R 𝑑 inf 𝑗∊ 1;𝑚 𝑓(𝛚 𝑇 𝑗 𝐱 -𝜑 𝑗 ) = sup 𝐯∊R 𝑑 ∶‖𝐯‖=1 sup 𝑥∊R inf 𝑗∊ 1;𝑚 𝑓(𝑥𝛚 𝑇 𝑗 𝐯 -𝜑 𝑗 )<label>(30)</label></formula><p>Let 𝐯 be such that the scalars 𝑎 𝑗 ≜ 𝛚 𝑇 𝑗 𝐯 (for 1 ≤ 𝑗 ≤ 𝑚) are nonresonant, which exists because the vectors (𝛚 𝑗 ) 1≤𝑗≤𝑚 are themselves nonresonant. The quantity <ref type="bibr" target="#b30">(30)</ref>  where the last equality comes from Lemma 29, the 𝑎 𝑗 being nonresonant.</p></div>
<div><head>B Results without subsampling</head><p>Proof of Lemma 12. We have</p><formula xml:id="formula_88">Δ B 2 (𝚺 RFF ) 2 = sup 𝐱,𝐲∈R 𝑑 ‖𝚽(𝐱) -𝚽(𝐲)‖ 2 2 = sup 𝐱,𝐲∈R 𝑑 𝑚 ∑ 𝑗=1 |𝚽(𝐱) 𝑗 -𝚽(𝐲) 𝑗 | 2 = sup 𝐱,𝐲∈R 𝑑 𝑚 ∑ 𝑗=1 |(𝜌(𝛚 𝑇 𝑗 𝐱 + 𝑢 𝑗 ) + 𝑖𝜌(𝛚 𝑇 𝑗 𝐱 + 𝑢 𝑗 -𝜋 2 )) -(𝜌(𝛚 𝑇 𝑗 𝐲 + 𝑢 𝑗 ) + 𝑖𝜌(𝛚 𝑇 𝑗 𝐲 + 𝑢 𝑗 -𝜋 2 ))| 2 = sup 𝐱,𝐲∈R 𝑑 𝑚 ∑ 𝑗=1 (𝜌(𝛚 𝑇 𝑗 𝐱 + 𝑢 𝑗 ) -𝜌(𝛚 𝑇 𝑗 𝐲 + 𝑢 𝑗 )) 2 + (𝜌(𝛚 𝑇 𝑗 𝐱 + 𝑢 𝑗 -𝜋 2 ) -𝜌(𝛚 𝑇 𝑗 𝐲 + 𝑢 𝑗 -𝜋 2 )) 2 = sup 𝐱,𝐲∈R 𝑑 𝑚 ∑ 𝑗=1 2(1 -(𝜌(𝛚 𝑇 𝑗 𝐱 + 𝑢 𝑗 )𝜌(𝛚 𝑇 𝑗 𝐲 + 𝑢 𝑗 ) + 𝜌(𝛚 𝑇 𝑗 𝐱 + 𝑢 𝑗 -𝜋 2 )𝜌(𝛚 𝑇 𝑗 𝐲 + 𝑢 𝑗 -𝜋 2 ))<label>(31)</label></formula><p>• For unquantized features, we have 𝜌 = cos and 𝜌(• -𝜋 2 ) = sin, hence </p><formula xml:id="formula_89">Δ B 2 (𝚺 RFF ) 2 = sup 𝐱,𝐲∈R 𝑑 𝑚 ∑ 𝑗=1<label>2</label></formula><formula xml:id="formula_90">𝐲 + 𝑢 𝑗 -𝜋 2 ) = 2 -1/2 inf 𝐲∈R 𝑑 𝑚 ∑ 𝑗=1 ±𝜌(𝛚 𝑇 𝑗 𝐲 + 𝑢 𝑗 ) ± 𝜌(𝛚 𝑇 𝑗 𝐲 + 𝑢 𝑗 -𝜋 2 ) = 2 -1/2 inf 𝐲∈R 𝑑 𝑚 ∑ 𝑗=1 𝑓(𝛚 𝑇 𝑗 𝐲 + 𝑢 𝑗 + 𝜑 𝑗 ) = -2 -1/2 sup 𝐲∈R 𝑑 𝑚 ∑ 𝑗=1 𝑓 𝜋-𝛗-𝐮 (𝛚 𝑇 𝑗 𝐲) = -𝑚</formula><p>which is independent of the choice of 𝐱 and concludes the proof.</p></div>
<div><head>C Proofs on Sketching with Subsampling</head></div>
<div><head>C.1 General results</head><p>Proof of Lemma 15. We define the permutation of a set of masks as 𝜎((𝐡 1 , …, 𝐡 𝑛 )) = (𝐡 𝜎(1) , …, 𝐡 𝜎(𝑛) ) for 𝜎 ∊ S 𝑛 . For any set of masks 𝐻 ∊ H 𝑛 , and any dataset X such that |X | = 𝑛, we denote 𝑝 X (•|𝐻) = 𝑝 𝚺 L,𝐻 (X ) (•) the density of 𝚺 L,𝐻 (X ). Unless otherwise specified, 𝑝 X denotes the density of ̅ 𝚺 L (X ). We prove the result for a real-valued feature map 𝚽, and discuss the complex case at the end of the proof. We will prove that sup </p><formula xml:id="formula_91">(𝐬) = E 𝐻 [𝑝 X (𝐬|𝐻)] = E 𝐻 [𝑝 X (𝐬|𝜎 -1 (𝐻))] = E 𝐻 [𝑝 𝜎(X ) (𝐬|𝐻)] = E 𝐻 𝑛-1 ,𝐡 𝑛 [𝑝 𝜎(X ) (𝐬|𝐻 𝑛-1 , 𝐡 𝑛 )] = E 𝐡 𝑛 E 𝐻 𝑛-1 [𝑝 𝜎(X ) (𝐬|𝐻 𝑛-1 , 𝐡 𝑛 )] 𝑝 Y (𝐬) = E 𝐻 𝑛-1 [𝑝 Y (𝐬|𝐻 𝑛-1 )]</formula><p>As a consequence we have</p><formula xml:id="formula_92">𝑝 X (𝐬) 𝑝 Y (𝐬) = E 𝐡 𝑛 E 𝐻 𝑛-1 [𝑝 𝜎(X ) (𝐬|𝐻 𝑛-1 , 𝐡 𝑛 )] E 𝐻 𝑛-1 [𝑝 Y (𝐬|𝐻 𝑛-1 )] = E 𝐡 𝑛 E 𝐻 𝑛-1 exp(-1 𝑏 ‖𝐬 -̅ 𝚺 𝐻 𝑛-1 ,𝐡 𝑛 (𝜎(X ))‖ 1 ) E 𝐻 𝑛-1 exp(-1 𝑏 ‖𝐬 -̅ 𝚺 𝐻 𝑛-1 (Y)‖ 1 )<label>(32)</label></formula><p>Note that for any 𝐻 𝑛-1 , 𝐡 𝑛 we have ̅ 𝚺 𝐻 𝑛-1 ,𝐡 𝑛 (𝜎(X )) = ̅ 𝚺 𝐻 𝑛-1 (Y) + 1 𝛼 𝚽(𝐱 𝑛 ) ⊙ 𝐡 𝑛 by definition of 𝜎 and thus for any 𝐻 𝑛-1 , 𝐡 𝑛 , 𝐬 we have</p><formula xml:id="formula_93">-‖𝐬 -̅ 𝚺 𝐻 𝑛-1 ,𝐡 𝑛 (𝜎(X ))‖ 1 = -‖𝐬 -̅ 𝚺 𝐻 𝑛-1 (Y) - 1 𝛼 𝚽(𝐱 𝑛 ) ⊙ 𝐡 𝑛 ‖ 1 ≤ -‖𝐬 -̅ 𝚺 𝐻 𝑛-1 (Y)‖ 1 + ‖ 1 𝛼 𝚽(𝐱 𝑛 ) ⊙ 𝐡 𝑛 ‖ 1 .<label>(33)</label></formula><p>Equality holds iff for all 𝑗 ∊ ⟦1, 𝑚⟧, (𝐬 -̅ 𝚺 𝐻 𝑛-1 ,𝐡 𝑛 (𝜎(X ))) 𝑗 and (𝚽(𝐱 𝑛 ) ⊙ 𝐡 𝑛 ) 𝑗 have the same sign or any of the two terms is null. Define 𝑐 ≜ max 1≤𝑖≤𝑛 ‖𝚽(𝐱 𝑖 )‖ ∞ . For any choice of binary masks 𝐻 𝑛-1 , we have</p><formula xml:id="formula_94">‖ ̅ 𝚺 𝐻 𝑛-1 ,𝐡 𝑛 (𝜎(X ))‖ ∞ ≤ 𝑛𝑐 1 𝛼 ≜ 𝑀.</formula><p>In particular, if we define s ≜ 𝑀 sign(𝚽(𝐱 𝑛 )), where sign is applied pointwise, s yields equality in Equation ( <ref type="formula" target="#formula_93">33</ref>) for all 𝐻 𝑛-1 , 𝐡 𝑛 simultaneously. Using Equation <ref type="bibr" target="#b33">(33)</ref> in Equation ( <ref type="formula" target="#formula_92">32</ref>) and taking the supremum over 𝐬, we get</p><formula xml:id="formula_95">sup 𝐬∊Z 𝑝 X (𝐬) 𝑝 Y (𝐬) ≤ sup 𝐬∊Z E 𝐡 𝑛 E 𝐻 𝑛-1 exp(-1 𝑏 ‖𝐬 -̅ 𝚺 𝐻 𝑛-1 (Y)‖ 1 + 1 𝑏 ‖ 1 𝛼 𝚽(𝐱 𝑛 ) ⊙ 𝐡 𝑛 ‖ 1 ) E 𝐻 𝑛-1 exp(-1 𝑏 ‖𝐬 -̅ 𝚺 𝐻 𝑛-1 (Y)‖ 1 ) = E 𝐡 𝑛 exp( 1 𝑏 1 𝛼 ‖𝚽(𝐱 𝑛 ) ⊙ 𝐡 𝑛 ‖ 1 )</formula><p>but we also have</p><formula xml:id="formula_96">sup 𝐬∊Z 𝑝 X (𝐬) 𝑝 Y (𝐬) ≥ 𝑝 X ( s ) 𝑝 Y ( s ) = E 𝐡 𝑛 exp( 1 𝑏 1 𝛼 ‖𝚽(𝐱 𝑛 ) ⊙ 𝐡 𝑛 ‖ 1 ),</formula><p>therefore equality holds.</p><formula xml:id="formula_97">Case |X | = |Y| -1 We assumed so far |X | = |Y| + 1, but now if |X | + 1 = |Y| = 𝑛, there is 𝜎 such that 𝜎(Y) U ≈ X and we have ̅ 𝚺 𝐻 𝑛-1 (X ) = ̅ 𝚺 𝐻 𝑛-1 ,𝐡 𝑛 (𝜎(Y)) -1 𝛼 𝚽(𝐲 𝑛 ) ⊙ 𝐡 𝑛 . Another triangular inequality yields -‖𝐬 -̅ 𝚺 𝐻 𝑛-1 (X )‖ 1 = -‖𝐬 -̅ 𝚺 𝐻 𝑛-1 ,𝐡 𝑛 (𝜎(Y)) + 1 𝛼 𝚽(𝐲 𝑛 ) ⊙ 𝐡 𝑛 ‖ 1 ≤ -‖𝐬 -̅ 𝚺 𝐻 𝑛-1 ,𝐡 𝑛 (𝜎(X ))‖ 1 + ‖- 1 𝛼 𝚽(𝐲 𝑛 ) ⊙ 𝐡 𝑛 ‖ 1 .<label>(34)</label></formula><p>Using Jensen's inequality (all quantities are positive and 𝑥 ↦ 1/𝑥 is convex on R + ) we get </p><formula xml:id="formula_98">𝑝 X (𝐬) 𝑝 Y (𝐬) = 𝑝 X (𝐬) 𝑝 𝜎(Y) (𝐬) = E 𝐻 𝑛-1 exp(-1 𝑏 ‖𝐬 -̅ 𝚺 𝐻 𝑛-1 (X ))‖ 1 E 𝐡 𝑛 E 𝐻 𝑛-1 exp(-1 𝑏 ‖𝐬 -̅ 𝚺 𝐻 𝑛-1 ,𝐡 𝑛 (𝜎(Y))‖ 1 ) ≤ E 𝐡 𝑛 E 𝐻 𝑛-1 exp(-1 𝑏 ‖𝐬 -̅ 𝚺 𝐻 𝑛-1 (X )‖ 1 ) E 𝐻 𝑛-1 exp(-1 𝑏 ‖𝐬 -̅ 𝚺 𝐻 𝑛-1 ,𝐡 𝑛 (𝜎(Y))‖ 1 ) ≤ E 𝐡 𝑛 E 𝐻 𝑛-1 exp(-1 𝑏 ‖𝐬 -̅ 𝚺 𝐻 𝑛-1 ,𝐡 𝑛 (Y)‖ 1 ) exp( 1 𝑏 ‖ 1 𝛼 𝚽(𝐲 𝑛 ) ⊙ 𝐡 𝑛 ‖ 1 ) E 𝐻 𝑛-1 exp(-1 𝑏 ‖𝐬 -̅ 𝚺 𝐻 𝑛-1 ,𝐡 𝑛 (𝜎(Y))‖ 1 ) = E 𝐡 𝑛 exp(<label>1</label></formula><formula xml:id="formula_99">(𝐬) = sup 𝐱∊𝐸 E 𝐡 𝑛 exp( 1 𝑏 1 𝛼 ‖𝚽(𝐱) ⊙ 𝐡 𝑛 ‖ 1 ) = sup 𝐱∊𝐸 E 𝐡 exp( 1 𝑏 𝑄 U 1 (𝐱, 𝐡)),</formula><p>which concludes the proof.</p><p>Complex case If 𝚽 is complex, the same proof holds using the canonical isomorphism between C 𝑚 and R 2𝑚 . Indeed, an equivalent of Equation ( <ref type="formula" target="#formula_92">32</ref>) can be established using Definition 11 of a complex Laplace random variable. The triangle inequality Equation <ref type="bibr" target="#b33">(33)</ref> holds in a similar manner by considering complex and real parts independently, and s can be defined as s = 𝑀 (sign(ℜ𝚽(𝐱 𝑛 )) + 𝑖 sign(ℑ𝚽(𝐱 𝑛 ))).</p><p>We get sup</p><formula xml:id="formula_100">X ,Y∊D∶X U ∼Y sup 𝐬∊Z 𝑝 X (𝐬) 𝑝 Y (𝐬) = sup 𝐱∊𝐸 E 𝐡 𝑛 exp( 1 𝑏 1 𝛼 (‖ℜ𝚽(𝐱) ⊙ 𝐡 𝑛 ‖ 1 + ‖ℑ𝚽(𝐱) ⊙ 𝐡 𝑛 ‖ 1 )) = sup 𝐱∊𝐸 E 𝐡 exp( 1 𝑏 𝑄 U 1 (𝐱, 𝐡)),</formula><p>which concludes the proof.</p></div>
<div><head>C.2 Random Fourier Features</head><p>Proof of Lemma 17. This proof bears strong similarities with the proof of Lemma 7, and we therefore use the same notations and tools. In particular, we recall that 𝑓(•) ≜ 𝜌(•) + 𝜌(• -𝜋/2), and that sup 𝑥∈R 𝑓(𝑥) = √ 2 for both complex exponential case and one-bit quantization. We also denote supp(𝐡) = {𝑗 ∊ ⟦1, 𝑚⟧ | ℎ 𝑗 ≠ 0} the support of 𝐡.</p><p>By analogy with Equations ( <ref type="formula" target="#formula_33">10</ref>) and ( <ref type="formula" target="#formula_35">11</ref>), but summing only on the frequencies that appear in the mask 𝐡, denoting 𝑓 𝛗,𝐡 (𝐱) ≜ ∑ 𝑗∊supp(𝐡) 𝑓(𝛚 𝑇 𝑗 𝐱 -𝜑 𝑗 ), the quantities 𝑄 U 1 (𝐱, 𝐡) and 𝑄 B 1 (𝐱, 𝐲, 𝐡) can be expressed as 𝑛 -𝑛 ′ 𝑛 -1 .</p><formula xml:id="formula_101">𝑄 U 1 (𝐱, 𝐡) = 1 𝛼 ∑ 𝑗∊supp(𝐡) |𝜌(𝛚 𝑇 𝑗 𝐱 + 𝑢 𝑗 )| + |𝜌(𝛚 𝑇 𝑗 𝐱 + 𝑢 𝑗 - 𝜋 2 )| = 1 𝛼 sup 𝛗∊{0,𝜋/2,</formula><p>We can now give the proof.</p><p>Proof of Lemma 26. We define the error as 𝐞 ≜ 𝐬(X ) -𝐬 for some reference signal 𝐬, which can be either 𝐳 X or the true sketch 𝐳. The noise level is E‖𝐞‖ 2  2 , and the noise-to-signal ratio is defined as NSR = E‖𝐞‖ 2  2 /‖𝐬‖ 2 2 . In these expressions, the expectations are taken w.r.t. the randomness of the sketching mechanism when 𝐳 X is chosen as the reference signal, and w.r.t. both the randomness of the mechanism and the draw of X when 𝐳 is the reference signal. We denote 𝚺 the clean sum of features, 𝑛 ′ = 𝛽𝑛, 𝚺 𝑛 ′ the sum of features computed on a random subset of the collection, 𝚺 𝐻,𝑛 ′ the mechanism combining both types of subsampling, i.e. Thus the error can be decomposed as</p></div>
<div><head>𝚺(X ) =</head><formula xml:id="formula_102">𝐞 = 1 𝑛 Σ(X ) -𝐬 = 1 𝑛 Σ(X ) -𝐬 ⏟⏟⏟⏟⏟ 𝐞 X + 1 𝑛 ′ 𝚺 𝑛 ′ (X ) -1 𝑛 Σ(X ) ⏟⏟⏟⏟⏟⏟⏟⏟⏟ 𝐞 𝑛 ′ + 1 𝑛 ′ (𝚺 𝐻,𝑛 ′ (X ) -𝚺 𝑛 ′ (X )) ⏟⏟⏟⏟⏟⏟⏟⏟⏟⏟⏟ 𝐞 𝐻 + 1 𝑛 ′ 𝛏 ⏟ 𝐞 𝜉</formula><p>.</p><p>We now estimate the noise level of each of these components separately.</p><p>Without noise nor subsampling. When no noise is added (𝛏 = 𝜁 = 0), and all features of all samples are used (𝑟 = 𝑚, no subsampling), then 𝐬(X ) = 𝐳 X = A(𝜋 X ) = 𝚺(X ) |X | . When the true sketch is chosen as the reference signal, we have:</p><formula xml:id="formula_103">𝐞 X = 1 𝑛 ∑ 𝚽(𝐱 𝑖 ) -𝐳 E X 𝐞 X = 0 ‖𝐞 X ‖ 2 2 = ‖𝐳 X -𝐳‖ 2 2 E X ‖𝐞 X ‖ 2 2 = 𝑚 ∑ 𝑗=1 Var X ( 1 𝑛 𝑛 ∑ 𝑖=1 𝚽(𝐱 𝑖 ) 𝑗 ) = 1 𝑛 𝑚 ∑ 𝑗=1</formula><p>Var 𝐱 (𝚽(𝐱) 𝑗 )</p><formula xml:id="formula_104">E X ‖𝐞 X ‖ 2 2 = 1 𝑛 (E 𝐱 ‖𝚽(𝐱)‖ 2 -‖𝐳‖ 2 )</formula><p>If 𝐳 X is chosen as the reference signal, then 𝐞 X = 0, E‖𝐞 X ‖ 2 2 = 0 .</p><p>Additive noise (for privacy). The noise contribution due to the additive noise is 𝐞 𝜉 = 𝛏/𝑛 ′ , thus</p><formula xml:id="formula_105">E 𝜉 𝐞 𝜉 = 0 E 𝜉 ‖𝐞 𝜉 ‖ 2 2 = 1 (𝑛 ′ ) 2 𝑚E[𝜉 2 𝑖 ] E 𝜉 ‖𝐞 𝜉 ‖ 2 2 = 𝑚 (𝑛 ′ ) 2 𝜎 2 𝜉</formula><p>and is independent from the reference signal. Here 𝜎 2  𝜉 is the noise level such that the whole mechanism (including the sampling step) is 𝜀-DP. It is thus computed using a privacy level 𝜀 ′ = log(1+(exp(𝜀)-1)/𝛽).</p></div>
<div><head>Samples subsampling</head><p>We consider here the noise contribution due to the dataset subsampling operation. We have</p><formula xml:id="formula_106">𝐞 𝑛 ′ = 1 𝑛 ′ 𝚺 𝑛 ′ (X ) -1 𝑛 𝚺(X ) E 𝐠 𝐞 𝑛 ′ = 0</formula><p>The noise level here depends on the subsampling strategy. We consider two cases</p><p>• sampling of 𝑛 ′ samples out of 𝑛 without replacement (denoted WOR(𝑛, 𝑛 ′ )):</p><formula xml:id="formula_107">E 𝐠∼WOR(𝑛,𝑛 ′ ) ‖𝐞 𝑛 ′ ‖ 2 = 𝑚 ∑ 𝑗=1 Var 𝐠 ( 1 𝑛 ′ 𝑛 ∑ 𝑖=1 𝑔 𝑖 𝚽(𝐱 𝑖 ) 𝑗 ) = 𝑚 ∑ 𝑗=1 ( ∑ 𝑛 𝑖=1 |𝚽(𝐱 𝑖 ) 𝑗 -(𝐳 X ) 𝑗 | 2 𝑛𝑛 ′ 𝑛 -𝑛 ′ 𝑛 -1</formula><p>) by Lemma 30</p><formula xml:id="formula_108">= 1 𝑛𝑛 ′ 𝑛 -𝑛 ′ 𝑛 -1 𝑛 ∑ 𝑖=1 ‖𝚽(𝐱 𝑖 ) -𝐳 X ‖ 2 2 E 𝐠∼WOR(𝑛,𝑛 ′ ) ‖𝐞 𝑛 ′ ‖ 2 = 1 𝑛 -1 ( 𝑛 𝑛 ′ -1)( 1 𝑛 𝑛 ∑ 𝑖=1 ‖𝚽(𝐱 𝑖 )‖ 2 2 -‖𝐳 X ‖ 2 2 )</formula><p>Taking the expectation with respect to the draw of X as well we obtain Taking the expectation with respect to the draw of X as well we obtain</p><formula xml:id="formula_109">E X E 𝐠∼Bern(𝛽) 𝑛 ‖𝐞 𝑛 ′ ‖ 2 = 1 𝑛 ( 1 𝛽 -1)E 𝐱 ‖𝚽(𝐱)‖ 2 2</formula><p>Frequencies subsampling. We define the noise contribution due to frequency subsampling as Thus the noise-to-signal ratio NSR 𝜁 of the whole mechanism (including noise 𝜁) can be written as a function of the noise-to-signal ratio of Σ(X )/𝑛 as computed in Lemma 26 (i.e. using the same parameters but without 𝜁), which we denote simply NSR in the rest of the proof. </p><formula xml:id="formula_110">𝐞</formula><p>For an unbiased estimator 𝑓 (if there exists any), we have (E𝑓) 2 = 1/𝑛 2 and the variance can be bounded via a Cramer-Rao bound.</p><p>A bound on the variance of 𝑓. Remember that 𝜁 is drawn as 𝜁 ∼ L(0, 𝑏). We want to estimate 𝜃 = 1/𝑛 from an observation 𝑥 drawn with probability density (and log-density)</p><p>𝑝 𝜃 (𝑥) = 1 2𝑏 𝜁 𝑒 </p></div>
<div><head>E Heuristic for Splitting the Privacy Budget</head><p>Proof of Lemma 28. The noise level for 𝜁 is 𝑏 𝜁 = 1/𝜀 𝜁 = 1/((1 -𝛾)𝜀) for Laplacian noise according to Lemma 4. In the Laplacian-UDP setting, the lowest noise level yielding 𝜀-DP is 𝜎 𝜉 = 2𝑏 = 2 √ 2𝑚/(𝛾𝜀) (complex Laplace distribution). We then have</p><formula xml:id="formula_112">NSR RFF * = (1 + 1 𝑛 2 (1 -𝛾) 2 𝜀 2 )(1 - 1 𝑛 + 𝑚 𝑛‖𝐳‖ 2 ( 1 𝛼 + 1 𝑛 8𝑚 2 𝛾 2 𝜀 2 )) -1,</formula><p>For succinctness in the derivation, denote 𝐴 = 1/(𝑛 2 𝜀 2 ), 𝐵 = 1 -1/𝑛 + 𝑚 2 /(𝑛𝑟‖𝐳‖ 2 ) and 𝐶 = where 𝐴𝐵/𝐶 = (1 -</p><formula xml:id="formula_113">1 𝑛 2 ‖𝐳‖ 2</formula><formula xml:id="formula_114">1 𝑛 + 𝑚 2 𝑛𝑟‖𝐳‖ 2 ) ‖𝐳‖ 2 𝑚 1 8𝑚 2 ≪ 1.</formula><p>Note that, if we start from the expression of the NSR which takes 𝐳 X as a reference signal, we would get 𝐵 = 1-1/𝑛+𝑚 2 /(𝑛𝑟‖𝐳‖ 2 ), but the same approximation would still hold. The only real root of 𝛾 3 -3𝛾 2 +(2𝐴+3)𝛾-(𝐴+1) can be computed as 𝛾 * = 1-1 3 𝐸+ 2𝐴 𝐸 = 1 + 6𝐴-𝐸 2 3𝐸 , where</p><formula xml:id="formula_115">𝐸 = 1 2 1/3 (27𝐴 + 3 √ 81𝐴 2 + 96𝐴 3 ) 1/3</formula><p>In this setting where 𝜀 ≪ 1/𝑛, 𝐴 ≫ 1 and we can use the following approximation.</p><formula xml:id="formula_116">𝛾 * = 1 + 6𝐴 -𝐸 2 3𝐸 ≈ 1 + 6𝐴 -6𝐴(1 + 27𝐴 3 √ 96𝐴 3/2 ) 2/3 √ 6𝐴 1/2 ≈ 1 2 .</formula><p>On the other side, if 𝐴 ≪ 1, we get 𝐸 ≈ 3𝐴 1/3 and 𝛾 * = 1 + 6𝐴 -𝐸 2 3𝐸 ≈ 1 + 6𝐴 -9𝐴 2/3 9𝐴 1/3 ≈ 1 -𝐴 1/3 .</p></div><figure xml:id="fig_0"><head>𝐱 1 Figure 1 :</head><label>11</label><figDesc>Figure 1: Overview of sketching and parameter learning.</figDesc></figure>
<figure xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Attack model. The dataset is distributed between 𝐿 devices, each computing and releasing publicly a subsampled sketch 𝐬(X 𝑖 ).</figDesc></figure>
<figure xml:id="fig_2"><head /><label /><figDesc>according to Theorem 1. Releasing |X | has sensitivity 1, and thus releasing |X | + 𝜁 with 𝜁 ∼ L(𝜀 -1</figDesc></figure>
<figure xml:id="fig_3"><head /><label /><figDesc>𝜋,3𝜋/2} 𝑓(⋅ -𝜑). Indeed, both 𝜌 = cos and 𝜌 = 2 -1/2 sign ∘ cos satisfy the property ∀𝑡 ∶ 𝜌(𝑡) = -𝜌(𝑡 -𝜋), hence for each 𝑡 ∈ R: +𝜌(𝑡) + 𝜌(𝑡 -𝜋/2) = 𝑓(𝑡) +𝜌(𝑡) -𝜌(𝑡 -𝜋/2) = 𝜌(𝑡) + 𝜌(𝑡 + 𝜋/2) = 𝑓(𝑡 + 𝜋/2) -𝜌(𝑡) -𝜌(𝑡 -𝜋/2) = -𝑓(𝑡) = 𝑓(𝑡 + 𝜋) -𝜌(𝑡) + 𝜌(𝑡 -𝜋/2) = -𝑓(𝑡 + 𝜋/2) = 𝑓(𝑡 + 3𝜋/2).</figDesc></figure>
<figure xml:id="fig_4"><head>Lemma 11 .</head><label>11</label><figDesc>The function 𝚺 RFF has sensitivity Δ U 2 (𝚺 RFF ) = √ 𝑚 for both quantized and unquantized cases.</figDesc></figure>
<figure xml:id="fig_5"><head>Lemma 12 .Figure 3 :</head><label>123</label><figDesc>Figure 3: Overview of the sketching mechanism from Definition 21 with subsampling.</figDesc></figure>
<figure xml:id="fig_6"><head>Figure 4 : 1 Figure 5 :</head><label>415</label><figDesc>Figure 4: Correlation between relative (w.r.t. k-means with 3 trials) SSE and NSR. Medians of 100 trials and variance.</figDesc></figure>
<figure xml:id="fig_7"><head>Figure 6 :</head><label>6</label><figDesc>Figure6: Variation of NSR 𝜉 as a function of 𝜀 for different values of the data subsampling parameter 𝛽. This quantity is the only variable term of the NSR (cf Lemma 26) at constant computational complexity, i.e. when the product 𝛼𝛽 is constant. Displayed using<ref type="bibr" target="#b23">(23)</ref> with the convention 𝑚 3 𝑛 2 ‖𝐳‖ 2 = 1 to fix a vertical scale.</figDesc></figure>
<figure xml:id="fig_8"><head>Figure 7 :</head><label>7</label><figDesc>Figure 7: Total NSR vs total subsampling factor 𝛼𝛽. (plain) pure feature subsampling (𝛼 ∊ [1/𝑚, 1], 𝛽 = 1); (dashed) pure data subsampling (𝛼 = 1, 𝛽 ∊ [1/𝑛, 1], Poisson sampling). All curves computed with analytic expressions of NSR, for 𝑚 = 10 3 , 𝑛 = 10 4 .</figDesc></figure>
<figure xml:id="fig_9"><head /><label /><figDesc>𝑛 ≳ 𝑛 0 (𝑚, 𝜀) ≜ 𝑚 max ( hence a possible heuristic is to choose 𝛾(𝑚, 𝜀) ≜ 𝛾 ⋆ (𝑛 0 (𝑚, 𝜀), 𝜀) ≈ 1 -(𝑛 0 𝜀) -2/3 .</figDesc></figure>
<figure xml:id="fig_10"><head>2 𝑛 = 10 6 ,</head><label>26</label><figDesc>𝛿 = 10 -8</figDesc></figure>
<figure xml:id="fig_11"><head>Figure 8 :</head><label>8</label><figDesc>Figure 8: Performance of differentially private compressive k-means as a function of 𝑚 for 𝛿 = 0 (top) and 𝛿 = 10 -8 (bottom), 𝑛 = 10 4 , 10 5 , 10 6 and different values of 𝜀. Medians over 200 trials. Synthetic data, 𝑘 = 4, 𝑑 = 8.</figDesc></figure>
<figure xml:id="fig_12"><head /><label /><figDesc>is upper-bounded by sup 𝑥∈R 𝑓(𝑥) = 𝑓(𝑧), and can be lower-bounded by sup 𝑥∊R inf 𝑗∊ 1;𝑚 𝑓(𝑥𝑎 𝑗 -𝜑 𝑗 ) = sup 𝑥∊R 𝑓(𝑥)</figDesc></figure>
<figure xml:id="fig_13"><head>𝑔</head><label /><figDesc>𝑖 𝚽(𝐱 𝑖 ) 𝚺 𝐻,𝑛 ′ (X ) = 1 𝛼 𝑛 ∑ 𝑖=1 𝑔 𝑖 (𝚽(𝐱 𝑖 ) ⊙ 𝐡 𝑖 ) 𝐬(X ) = 1 𝑛 ′ (𝚺 𝐻,𝑛 ′ (X ) + 𝛏).</figDesc></figure>
<figure xml:id="fig_14"><head>𝐻 = 1 𝑛𝑔 2 +</head><label>12</label><figDesc>′ (𝚺 𝐻,𝑛 ′ (X ) -𝚺 𝑛 ′ (X ))where:𝚺 𝐻,𝑛 ′ = 𝑚 𝑟 𝑛 ∑ 𝑖=1 𝑔 𝑖 (𝚽(𝐱 𝑖 ) ⊙ 𝐡 𝑖 ) 𝚺 𝑛 ′ = 𝑛 ∑ 𝑖=1 𝑔 𝑖 𝚽(𝐱 𝑖 ) E 𝐻 ‖𝐞 𝐻 ‖ 𝑖 ‖𝚽(𝐱 𝑖 )‖ 2Recall that the masks entries are in {0, 1}, thus ∀𝑖, 𝑗 (𝐡 𝑖 ) 2 𝑗 = (𝐡 𝑖 ) 𝑗 , but also ∀𝑗 E 𝐡∼𝑝 𝐡 𝐡 𝑗 = 𝑟/𝑚 because 𝑝 𝐡 ∊ P 𝛼 . Therefore we haveVar(𝐡 𝑖 ) 𝑗 = E ((𝐡 𝑖 ) 𝑗 ) 2 -(E (𝐡 𝑖 ) 𝑗 ) 2 = E (𝐡 𝑖 ) 𝑗 -𝑓 2 )Var( Σ(X ) 𝑗 ) + Var(𝑓)|𝐬 𝑗 | 2 𝑛 2 ]= E(𝑓 2 )𝑛 2 E‖ Σ(X )/𝑛 -𝐬‖ 2 Var(𝑓)‖𝐬‖ 2 𝑛 2</figDesc></figure>
<figure xml:id="fig_15"><head>NSR 𝜁 = E(𝑓 2 )</head><label>2</label><figDesc>𝑛 2 NSR + Var(𝑓)𝑛 2 = ((E𝑓) 2 + Var(𝑓))𝑛 2 NSR + (E𝑓) 2 𝑛 2 Var(𝑓) (E𝑓) 2 = (E𝑓) 2 𝑛 2 [(1 + Var(𝑓) (E𝑓) 2 )(NSR + 1) -1].</figDesc></figure>
<figure xml:id="fig_16"><head>- 2 𝑝 1 = 2 𝜁2𝑛 2 )</head><label>2122</label><figDesc>𝜃 (𝑥)) = -log(2𝑏 𝜁 )Using the Cramer-Rao bound for an unbiased estimator 𝑓, we haveVar(𝑓) ≥ E[( 𝑑(log 𝑝 𝜃 (𝑥)) 𝑑𝜃 ) 𝜃 (𝑥)𝑑𝑥] -𝑏 2 𝜁 𝜃 4 = 𝑏 2 𝜁 /𝑛 4 = 𝜎 2 𝜁 /(2𝑛 4 ) = (E𝑓) 2 𝜎 2 𝜁 /(2𝑛 2 ).ConclusionCombining this bound with Equation (35) yields for an unbiased estimator of minimal variance (if there exists any) NSR 𝜁 ≥ (1 + 𝜎 (NSR + 1) -1.</figDesc></figure>
<figure xml:id="fig_17"><head>8𝑚 3 𝜀 2 ,</head><label>32</label><figDesc>so that we try to minimize NSR RFF * Note that NSR RFF * diverges to +∞ when 𝛾 → 0 + or 𝛾 → 1 -, but is continuous on ]0, 1[. Any minimizer on ]0, 1[ must cancel the quantity1 2𝐶 𝛾 3 (1 -𝛾) 3 𝑑NSR RFF * 𝐶𝛾 3 + 𝐴𝛾 -(1 -𝛾) 3 -𝐴(1 -𝛾)= (𝐴𝐵/𝐶 + 1)𝛾 3 -3𝛾 2 + (2𝐴 + 3)𝛾 -(𝐴 + 1)</figDesc></figure>
<figure type="table" xml:id="tab_0"><head /><label /><figDesc><ref type="bibr" target="#b0">1</ref> , …, 𝐱 𝑛 )) = (𝐱 𝜎(1) , …, 𝐱 𝜎(𝑛) ) for 𝜎 ∊ S 𝑛 . 𝐱 𝑖 = 𝐲 𝑖 ) and 𝐱 𝑛 is arbitrary).</figDesc><table><row><cell cols="4">Definition 9. An algorithm provides 𝜀-unbounded DP (UDP) iff it provides 𝜀-DP for the "removal"</cell></row><row><cell>neighborhood relation</cell><cell cols="2">U ∼, defined as</cell></row><row><cell /><cell>X</cell><cell>U ∼ Y ⇔ {</cell><cell>||X | -|Y|| = 1 (we can assume w.l.o.g. |X | = |Y| + 1 ≜ 𝑛 ≥ 2) ∃ 𝜎 ∊ S |X | s.t. 𝜎(X ) U ≈ Y,</cell></row><row><cell cols="4">where (𝐱 1 , …, 𝐱 𝑛 ) ≈ (𝐲 1 , …, 𝐲 𝑛-1 ) ⇔ ((∀𝑖 ∊ ⟦1, 𝑛 -1⟧, Definition 10. An algorithm provides 𝜀-bounded DP (BDP) iff it provides 𝜀-DP for the "replacement" U</cell></row><row><cell>neighborhood relation</cell><cell /><cell /></row></table><note><p><p>B</p>∼:</p></note></figure>
<figure type="table" xml:id="tab_1"><head /><label /><figDesc>Definition 11 (Complex Laplace distribution). A random variable 𝑧 follows a centered complex Laplace distribution of parameter 𝑏 (denoted 𝑧 ∼ L C (𝑏)) iff its real and imaginary parts follow independently a real Laplace distribution of parameter 𝑏. In that case, 𝑧 admits a density 𝑝 𝑧 (𝑧) ∝ exp(-(|ℜ𝑧| + |ℑ𝑧|)/𝑏) and has variance 𝜎 2 𝑧 = E[|𝑧| 2 ] = 4𝑏 2 . Definition 12 (Laplace Mechanism). For any function 𝑓 ∶ D → R 𝑚 (resp. C 𝑚 ), the Laplace mechanism with parameter 𝑏 ∊ R is the random mechanism X ↦ 𝑓(X ) + 𝛏 where (𝜉 𝑖 ) 1≤𝑖≤𝑚</figDesc><table><row><cell>iid</cell></row></table></figure>
<figure type="table" xml:id="tab_2"><head /><label /><figDesc>if they are linearly independent over the rationals. The vectors (𝛚 𝑗 ) 1≤𝑗≤𝑚 ∊ R 𝑑 are called nonresonant frequency vectors if there exists a vector 𝐯 ∊ R 𝑑 such that the scalars (𝛚 𝑇 The proof is in Appendix A. We can now compute the desired sensitivity. The function 𝚺 RFF built using 𝑚 frequencies has sensitivity Δ U 1 (𝚺 RFF ) ≤ 𝑚 √ 2 for both quantized and unquantized cases. If the frequencies are non resonant then Δ U 1</figDesc><table><row><cell>Lemma 7.</cell></row></table><note><p>𝑗 𝐯) 1≤𝑗≤𝑚 are nonresonant frequencies. Lemma 6. Let (𝜑 𝑗 ) 1≤𝑗≤𝑚 be real numbers, (𝛚 𝑗 ) 1≤𝑗≤𝑚 ∊ R 𝑑 nonresonant frequencies, and 𝑓 a 2𝜋periodic function such that there exists 𝑧 at which 𝑓 is continuous and reaches its maximum. Then sup 𝐱∊R 𝑑 inf 𝑗∊ 1;𝑚 𝑓(𝛚 𝑇 𝑗 𝐱 -𝜑 𝑗 ) = sup 𝑥∊R 𝑓(𝑥).</p></note></figure>
<figure type="table" xml:id="tab_3"><head /><label /><figDesc>∘ cos, 𝑓 is a piecewise constant function taking values 0, When the frequencies (𝛚 𝑗 ) 1≤𝑗≤𝑚 are nonresonant, 𝑓 being 2𝜋 periodic and admitting (in both quantized/unquantized cases) a point 𝑧 ∊ R at which it reaches its maximum and is continuous, we apply Lemma 6 and get according to Lemma 5:</figDesc><table><row><cell>have sup 𝑥∊R 𝑓(𝑥) = that Δ U 1 (𝚺 RFF ) ≤ 𝑚</cell><cell>√ √ 2 as claimed. 2. We obtain sup 𝐱∈R 𝑑 𝑓 𝛗-𝐮 (𝐱) ≤ 𝑚</cell><cell>√</cell><cell>√ 2 for any 𝛗, 𝐮 hence, by Lemma 5, we get 2, 0, -√ 2. Thus in both cases we</cell></row></table></figure>
<figure type="table" xml:id="tab_4"><head>1.2 Random Quadratic Features In</head><label /><figDesc>The function 𝚺 RQF built using a matrix of frequenciesΩ = [𝛚 1 , …, 𝛚 𝑚 ], has sensitivity Δ U 1 (𝚺 RQF ) = ‖Ω‖ 2 2where ‖ • ‖ 2 denotes the spectral norm. Proof. Let 𝜆 max denote the largest eigenvalue function. We have according toLemma 5    </figDesc><table /><note><p>Lemma 8. Frequency vectors drawn i.i.d. according to a distribution which is absolutely continuous w.r.t. the Lebesgue measure are almost surely nonresonant. Proof. The set of resonant frequencies has a zero Lebesgue measure. The reader can refer to [52, Corollary 9.3 p. 166] for a proof relying on strong incommensurability. 4.this section only, we restrict ourselves to datasets whose elements are bounded by 1 in 𝐿 2 -norm. The domain is thus 𝐸 = B 2 ≜ {𝑥 ∊ R 𝑑 ∶ ‖𝑥‖ 2 ≤ 1}, and we still use the notations D 𝑛 ≜ 𝐸 𝑛 and D ≜ ∪ 𝑛∊N D 𝑛 . Lemma 9.</p></note></figure>
<figure type="table" xml:id="tab_5"><head /><label /><figDesc>1 , 𝜀 2 &gt; 0 such that 𝜀 1 + 𝜀 2 = 𝜀, if 𝚺 G has finite 𝐿 2 sensitivity Δ U 2 (𝚺), then any mechanism to estimate 𝐳 X using 𝚺 G (X ) with noise level 𝜎 = 𝜂(𝜀 1 , 𝛿) ⋅ Δ U 2 (𝚺)/√2𝜀 1 (where 𝜂 refers to Theorem 2), and |X | + 𝜁 where 𝜁 ∼ L(𝜀 -1 2 ), is 𝜀-UDP. Proof. The Gaussian mechanism applied on 𝚺 with 𝜎 = 𝜂(𝜀 1 , 𝛿)Δ U 2 (𝚺)/√2𝜀 1 is (𝜀 1 , 𝛿)-UDP according to Theorem 2. As in lemma 4, releasing |X | + 𝜁 with 𝜁 ∼ L(𝜀 -1</figDesc><table /></figure>
<figure type="table" xml:id="tab_6"><head /><label /><figDesc>1 and denote P 𝛼 the set of probability distributions 𝑝 𝐡 on H satisfying ∀𝑗 ∊ ⟦1, 𝑚⟧ E 𝐡∼𝑝 𝐡 𝐡 𝑗 = 𝛼. Particular examples of probability distributions belonging to P 𝛼 include • Poisson feature sampling: the distribution (Bern (𝛼)) 𝑚 , corresponding to masks which 𝑚 entries are drawn i.i.d. according to a Bernoulli distribution with parameter 𝛼; • Poisson data sampling: the masks are 𝜒𝟏 with 𝜒 ∼ Bern (𝛼). This corresponds to subsampling the data rather than the features, which is a well known strategy as discussed above.</figDesc><table /><note><p>• Uniform feature sampling: the uniform distribution U(H 𝑟 ) over</p></note></figure>
<figure type="table" xml:id="tab_7"><head /><label /><figDesc>The bound is sharp if 𝚽 RFF is built using nonresonant frequencies.</figDesc><table><row><cell cols="4">Proof. By Lemma 15 and Lemma 17 we have</cell><cell /></row><row><cell>sup X ,Y∊D∶X U ∼Y</cell><cell cols="2">𝐬∊Z sup</cell><cell>𝑝 ̅ 𝚺 RFF L</cell><cell /></row><row><cell>𝑄 U 1 (𝐱, 𝐡) ≤</cell><cell>√</cell><cell cols="2">2𝑚 and 𝑄 B 1 (𝐱, 𝐲, 𝐡) ≤ 2</cell><cell>√</cell><cell>2𝑚 always hold, even for resonant frequencies.</cell></row><row><cell cols="6">The proof is quite similar to the proof of Lemma 7, and can be found in Appendix C.</cell></row><row><cell cols="6">We can now state the main result for random Fourier features.</cell></row></table><note><p>Lemma 18. Consider 𝑟 ∊ ⟦1, 𝑚⟧, 𝛼 = 𝑟/𝑚, and a probability distribution 𝑝 𝐡 ∊ P 𝛼 such that 𝐡 ∈ H 𝑟 almost surely. Then for any 𝜀 &gt; 0, ̅ 𝚺 RFF L (X ) from Definition 21 with noise level 𝑏 = √ 2𝑚/𝜀 and mask distribution 𝑝 𝐡 is 𝜀-UDP.</p></note></figure>
<figure type="table" xml:id="tab_8"><head /><label /><figDesc>and D ≜ ∪ 𝑛∊N D 𝑛 . We give a generic upper bound in Lemma 20, and below in Lemma 22 a sharp bound when Ω is a union of orthonormal bases. We first provide a simple lemma used in both results. For any mask 𝐡 ∊ H 𝑟 with 𝑟 non-zero entries at indexes 𝑖 1 , …, 𝑖 𝑟 , and any matrix of frequencies Ω = [𝛚 1 , …, 𝛚 𝑚 ] ∊ R 𝑑×𝑚 , we denote Ω 𝐡 = [𝛚 𝑖 1 , …, 𝛚 𝑖 𝑟 ] the matrix obtained from Ω by keeping only the columns corresponding to nonzero indexes of 𝐡.</figDesc><table><row><cell /><cell cols="2">sup 𝐱∊𝐸</cell><cell cols="5">𝑄 U 1 (𝐱, 𝐡) = sup 𝐱,𝐲∊𝐸</cell><cell cols="2">𝑄 B 1 (𝐱, 𝐲, 𝐡) =</cell><cell>1 𝛼</cell><cell>‖Ω 𝐡 ‖ 2 2 .</cell></row><row><cell>Proof.</cell><cell /><cell /><cell /><cell /><cell /><cell /><cell /><cell /></row><row><cell>sup 𝐱,𝐲∊𝐸</cell><cell cols="2">𝑄 B 1 (𝐱, 𝐲, 𝐡) = sup 𝐱,𝐲∊𝐸</cell><cell>1 𝛼</cell><cell cols="2">𝑗∊supp(𝐡) ∑</cell><cell cols="4">|(𝛚 𝑇 𝑗 𝑥) 2 -(𝛚 𝑇 𝑗 𝑦) 2 |</cell></row><row><cell /><cell>= sup 𝐱∊𝐸</cell><cell>1 𝛼</cell><cell cols="2">∑ 𝑗∊supp(𝐡)</cell><cell cols="4">(𝛚 𝑇 𝑗 𝑥) 2 = sup 𝐱∊𝐸</cell><cell>𝑄 U 1 (𝐱, 𝐡)</cell></row><row><cell /><cell>= sup 𝐱∊𝐸</cell><cell>1 𝛼</cell><cell cols="4">𝐱 𝑇 ( ∑ 𝑗∊supp(𝐡)</cell><cell cols="3">𝛚 𝑗 𝛚 𝑇 𝑗 )𝐱 =</cell><cell>1 𝛼</cell><cell>𝜆 max ( ∑ 𝑗∊supp(𝐡)</cell><cell>𝛚 𝑗 𝛚 𝑇 𝑗 ) =</cell><cell>1 𝛼</cell><cell>‖Ω 𝐡 ‖ 2 2 .</cell></row></table><note><p>Lemma 19. Consider the functions 𝑄 U 1 , 𝑄 B 1 associated to the feature map 𝚽 RQF . For each 𝐡 ∈ H For any 𝑝 𝐡 ∊ P 𝛼 , we denote supp(𝑝 𝐡 ) the support of 𝑝 𝐡 , that is the set of possible outcomes of 𝐡 ∼ 𝑝 𝐡 . Lemma 20. Let 𝑝 𝐡 ∊ P 𝛼 . For any 𝜀 &gt; 0, releasing ̅ 𝚺 RQF L (X ) from Definition 21 with noise parameter 𝑏 = 𝑚 𝑟𝜀 sup 𝐡∊supp(𝑝 𝐡 ) ‖Ω 𝐡 ‖ 2 2 and mask distribution 𝑝 𝐡 is 𝜀-UDP. Proof. By Lemma 15, with 𝐸</p></note></figure>
<figure type="table" xml:id="tab_9"><head /><label /><figDesc>Consider 𝑚 a multiple of 𝑑 and Ω a concatenation of 𝑚/𝑑 orthonormal bases as described in Section 2.2. Let 𝑟 be a multiple of 𝑑, and 𝐡 ∊ H struct. Let us rewrite Ω = [𝐵 1 , …, 𝐵 𝑚/𝑑 ] where the (𝐵 𝑖 ) 1≤𝑖≤𝑚/𝑑 are 𝑑 × 𝑑 blocs corresponding to orthonormal bases. We have ΩΩ 𝑇 = ∑ 𝑚/𝑑 𝑖=1 𝐵 𝑖 𝐵 𝑇 𝑖 = 𝑚/𝑑 𝐈 𝑑 . As 𝐡 ∊ H struct. 𝐡 Ω 𝑇 𝐡 = (𝑟/𝑑) 𝐈 𝑑 . As a result, for any 𝐱 ∈ 𝐸 we have 𝑄 U 1 (𝐱, 𝐡) = 1 𝛼 (𝑟/𝑑)‖𝐱‖ 2 2 = (𝑚/𝑑)‖𝐱‖ 2 2 and the result follows from 𝐸 = B 2 . Given that 𝚽 RFF takes only positive values and vanishes in 0, we have sup 𝐱,𝐲∊𝐸 𝑄 B 1 (𝐱, 𝐲, 𝐡) = sup 𝐱,𝐲∊𝐸 ‖𝚽 RFF (𝐱) -𝚽 RFF (𝐲)‖ 1 = sup 𝐱∊𝐸 ‖𝚽 RFF (𝐱)‖ 1 = 𝑄 U 1 (𝐱, 𝐡). Lemma 22. Consider 𝑚 a multiple of 𝑑 and Ω a concatenation of 𝑚/𝑑 orthonormal bases as described in Section 2.2. Let 𝑟 be a multiple of 𝑑, and 𝑝 𝐡 = U(H struct.</figDesc><table><row><cell>Proof.</cell><cell /><cell /><cell /></row><row><cell /><cell>2 ),</cell><cell /><cell /></row><row><cell>by Lemma 19, which concludes the proof.</cell><cell /><cell /><cell /></row><row><cell cols="4">Whether or when the bound of Lemma 20 is sharp in general is an open question. The finer bound E 𝐡 exp( 1 𝑏 1 2 ) holds, but does not yield explicit guarantees. A sharp and explicit bound can be 𝛼 ‖Ω 𝐡 ‖ 2 achieved in a specific case of interest.</cell></row><row><cell>Lemma 21. 𝐱,𝐲∊𝐸</cell><cell>𝑄 B 1 (𝐱, 𝐲, 𝐡) =</cell><cell>𝑚 𝑑</cell><cell>.</cell></row></table><note><p><p><p><p>𝑟</p>. Then for any 𝐱 such that ‖𝐱‖ 2 = 1, we have</p>𝑄 U 1 (𝐱, 𝐡) = sup 𝐱∊𝐸 𝑄 U 1 (𝐱, 𝐡) = sup 𝑟</p>, we have for the same reason Ω</p></note></figure>
<figure type="table" xml:id="tab_10"><head /><label /><figDesc>Although we do not have an equivalent of Lemma 15 for approximate DP, we provide in Lemma 23 a generic upper bound, which holds for both pure and approximate DP, bounded and unbounded DP. In order to do so, we introduce the following definitions for 𝑝 ∊ {1, 2} and 𝐡 ∈ H Let 𝑝 𝐡 ∊ P 𝛼 be a mask distribution.• For any 𝜀 &gt; 0, the mechanism ̅ 𝚺 L from Definition 21 with mask distribution 𝑝 𝐡 and noise level 𝑏 ≥ max 𝐡∊supp(𝑝 𝐡 ) 𝑄 1 (𝐡)/𝜀 is 𝜀-DP.• For any 𝜀, 𝛿 &gt; 0, the mechanism ̅ 𝚺 G from Definition 22 with mask distribution 𝑝 𝐡 and noise level 𝜎 ≥ 𝜂(𝜀, 𝛿) max 𝐡∊supp(𝑝 𝐡 ) 𝑄 2 (𝐡)/(2𝜀) 1/2 (where 𝜂(𝜀, 𝛿) refers to Theorem 2) is (𝜀, 𝛿)-DP. These hold for both BDP and UDP, with 𝑄 𝑝 (𝐡) defined accordingly as 𝑄 B 𝑝 (𝐡) or 𝑄 U 𝑝 (𝐡). } be one of the two random mechanisms, and 𝑅 𝐻 for any 𝐻 be the associated mechanism that uses the fixed masks 𝐻 but is randomized on 𝛏. Let ∼ ∊ { Fix 𝑛 &gt; 0 and an arbitrary set of masks 𝐻 = (𝐡 1 , …, 𝐡 𝑛 ) ∊ H 𝑛 , and consider the mechanism 𝚺 𝐻 on D ′ ≜ D 𝑛 (BDP case) or D ′ ≜ D 𝑛 ∪ D 𝑛-1 (UDP case; note that the expression of 𝚺 𝐻 (X ) does not involve the last mask 𝐡 𝑛 when |X | = 𝑛 -1 in this case) given in Definition 20. For a neighboring relation ≈, let Δ 𝑝,≈ denote the 𝐿 𝑝 sensitivity computed according to ≈. For any ordered neighboring relation ≈ ∊ { ≈}, according to Theorem 1 for pure DP and Theorem 2 for ADP applied on D ′ and w.r.t. ≈, if the noise level of 𝛏 in 𝑅 𝐻 is chosen as 𝑏 ≥ 𝑏 * 𝐻 ≜ Δ 1,≈ (𝚺 𝐻 )/𝜀 or 𝜎 ≥ 𝜎 * 𝐻 ≜ 𝜂(𝜀, 𝛿)Δ 2,≈ (𝚺 𝐻 )/(2𝜀) 1/2 , then we have for any X</figDesc><table><row><cell>𝑄 U 𝑝 (𝐡) ≜ sup 𝐱∊𝐸</cell><cell cols="2">𝑄 U 𝑝 (𝐱, 𝐡)</cell></row><row><cell cols="2">𝑄 B 𝑝 (𝐡) ≜ sup 𝐱,𝐲∊𝐸</cell><cell>𝑄 U 𝑝 (𝐱, 𝐲, 𝐡).</cell></row><row><cell cols="3">Lemma 23. Proof. Let 𝜀 &gt; 0, 𝑅 ∊ { ̅ 𝚺 L , ̅ 𝚺 G U ∼,</cell><cell>B ∼} denote the</cell></row><row><cell cols="3">considered neighborhood relation, and 𝛿 be such that 𝛿 = 0 for pure DP, 𝛿 &gt; 0 for approximate DP. We</cell></row><row><cell>need to show that</cell><cell /></row></table><note><p><p><p>2 </p>) if 𝚽 is real-valued , and</p>𝐻 = (𝐡 1 , …, 𝐡 𝑛 ) with 𝐡 𝑖 iid ∼ 𝑝 𝐡 . ∀X ∼ Y ∊ D, 𝐬 ∊ Z ∶ 𝑝 𝑅(X ) (𝐬) ≤ exp(𝜀)𝑝 𝑅(Y) (𝐬) + 𝛿 U ≈, B</p></note></figure>
<figure type="table" xml:id="tab_11"><head /><label /><figDesc>We hence obtain the desired result by deriving an equivalent of Equation<ref type="bibr" target="#b19">(19)</ref> for the relation As for any 𝐻, we haveΔ 𝑝, U ≈ (𝚺 𝐻 ) = Δ 𝑝, U ≈ 𝑠 (𝚺 𝐻 ) on D ′ ,we get the same result. Whether or nor the bounds from Lemma 23 are sharp for certain scenarios is a question left open for future work. Let 𝐡 ∊ H 𝑟 . Then for RQF we have sup 𝐱,𝐲∊𝐸 𝑄 B 2 (𝐱, 𝐲, 𝐡) = sup 𝐱∊𝐸 𝑄 U 2 (𝐱, 𝐡) = 𝑚 𝑟 𝑆 4 (Ω 𝐡 ).</figDesc><table><row><cell /><cell /><cell /><cell /><cell /><cell /><cell /><cell /><cell /><cell>𝛿,</cell></row><row><cell cols="3">which is the desired result.</cell><cell /><cell /><cell /><cell /><cell /><cell /></row><row><cell>Note that</cell><cell /><cell /><cell /><cell /><cell /><cell /><cell /><cell /></row><row><cell /><cell /><cell /><cell /><cell /><cell /><cell /><cell /><cell /><cell>√ 𝑟 .</cell></row><row><cell>Proof.</cell><cell /><cell>sup 𝐱</cell><cell cols="3">𝑄 U 2 (𝐱, 𝐡) = sup 𝐱∊𝐸</cell><cell cols="3">𝑚 𝑟 ‖𝚽 RFF (𝐱)‖ 2 =</cell><cell>𝑚 𝑟</cell><cell>√</cell><cell>𝑟 =</cell><cell>𝑚 √ 𝑟</cell><cell>.</cell></row><row><cell>Lemma 25. Proof.</cell><cell>sup 𝐱</cell><cell cols="2">𝑄 U 2 (𝐱, 𝐡) = sup 𝐱∊𝐸</cell><cell>𝑚 𝑟</cell><cell cols="2">‖𝚽 RQF (𝐱)‖ 2 = sup 𝐱∊𝐸</cell><cell>𝑚 𝑟</cell><cell cols="2">( ∑ 𝑖∊supp(𝐡)</cell></row></table><note><p><p><p><p>U</p>≈ is not a symmetric relation, but in the UDP case with |Y| = |X |+1, we can still find</p>𝜎 1 , 𝜎 2 such that 𝜎 1 (Y) U ≈ 𝜎 2 (X ). U ≈ 𝑠 , defined as X U ≈ 𝑠 Y ⇔ Y U ≈ X . From</p>Lemma 23, one can get guarantees for (𝜀, 𝛿)-DP with the two simple following results. Lemma 24. Let 𝐡 ∊ H 𝑟 . Then for RFF we have sup 𝐱 𝑄 U 2 (𝐱, 𝐡) = 𝑚</p></note></figure>
<figure type="table" xml:id="tab_13"><head /><label /><figDesc>2 𝜁 and 𝜎 2 𝜉 the values obtained previously for the UDP Laplacian setting, see Table 1, we get an expression of NSR RFF * as a function of 𝛾, which can be minimized w.r.t. the parameter 𝛾. For random Fourier features, an expression of the parameter 𝛾 * minimizing NSR RFF * is given in Appendix E as a function of 𝜀 and 𝑛. The following approximations can be derived when 𝑛 ≪ 1/𝜀, 𝛾 * (𝑛, 𝜀) ≈ 1/2</figDesc><table><row><cell>Lemma 28.</cell></row></table></figure>
<figure type="table" xml:id="tab_14"><head /><label /><figDesc>(1 -(cos(𝛚 𝑇 𝑗 𝐱 + 𝑢 𝑗 ) cos(𝛚 𝑇 𝑗 𝐲 + 𝑢 𝑗 ) + sin(𝛚 𝑇 𝑗 𝐱 + 𝑢 𝑗 ) sin(𝛚 𝑇 𝑗 𝐲 + 𝑢 𝑗 )) we reuse the quantities defined in the proof of Lemma 7, i.e. we denote 𝑓(•) ≜ 𝜌(•) + 𝜌(• -𝜋 2 ) and, for any 𝛗 = [𝜑 1 , …, 𝜑 𝑚 ], define 𝑓 𝛗 (𝐱) = ∑ 𝑚 𝑗=1 𝑓(𝛚 𝑇 𝑗 𝐱 -𝜑 𝑗 ). Starting from the generic expression (31) we getΔ B 2 (𝚺 RFF ) 2 = 2(𝑚 -inf 𝐱∈R 𝑑 infFor any fixed 𝐱 ∊ R 𝑑 , we have 𝜌(𝛚 𝑇 𝑗 𝐱 + 𝑢 𝑗 ) = ±2 -1/2 and 𝜌(𝛚 𝑇 𝑗 𝐱 + 𝑢 𝑗 -𝜋 2 ) = ±2 -1/2 , thus using the same arguments developed in the proof of Lemma 7, these are some 𝜑 𝑗 ∊ {0, 𝜋/2, 𝜋, 3𝜋/2} such that inf</figDesc><table><row><cell /><cell /><cell>𝑚</cell></row><row><cell cols="2">= sup 𝐱,𝐲∈R 𝑑</cell><cell>𝑗=1 ∑</cell><cell>2(1 + cos(𝛚 𝑇 𝑗 (𝐱 -𝐲) -𝜋))</cell></row><row><cell /><cell /><cell /><cell>𝑚</cell></row><row><cell cols="4">= 2(𝑚 + sup 𝐳∈R 𝑑</cell><cell>𝑗=1 ∑</cell><cell>cos(𝛚 𝑇 𝑗 𝐳 -𝜋))</cell></row><row><cell cols="2">= 4𝑚</cell><cell /></row><row><cell cols="4">by Lemma 6 using the nonresonant property of the frequencies.</cell></row><row><cell cols="4">• For quantized features, 𝐲∈R 𝑑</cell><cell>𝑚 ∑ 𝑗=1 (𝜌(𝛚 𝑇 𝑗 𝐱 + 𝑢 𝑗 )𝜌(𝛚 𝑇 𝑗 𝐲 + 𝑢 𝑗 ) + 𝜌(𝛚 𝑇 𝑗 𝐱 + 𝑢 𝑗 -𝜋 2 )𝜌(𝛚 𝑇 𝑗 𝐲 + 𝑢 𝑗 -𝜋 2 ))</cell></row><row><cell /><cell>𝑚</cell><cell /></row><row><cell>𝐲∈R 𝑑</cell><cell cols="3">𝑗=1 ∑ (𝜌(𝛚 𝑇</cell></row></table><note><p>𝑗 𝐱 + 𝑢 𝑗 )𝜌(𝛚 𝑇 𝑗 𝐲 + 𝑢 𝑗 ) + 𝜌(𝛚 𝑇 𝑗 𝐱 + 𝑢 𝑗 -𝜋 2 )𝜌(𝛚 𝑇 𝑗</p></note></figure>
<figure type="table" xml:id="tab_15"><head /><label /><figDesc>X ,Y∊D∶X U ∼Y sup 𝐬∊Z 𝑝 X (𝐬)/𝑝 Y (𝐬) = exp(𝜀 * ), which is equivalent to the lemma statement. If 𝐻 𝑛-1 = (𝐡 1 , …, 𝐡 𝑛-1 ) is a set of masks and 𝐡 𝑛 a single mask, defining 𝐻 = (𝐡 1 , …, 𝐡 𝑛 ) we use the notations ̅ 𝚺 𝐻 𝑛-1 ,𝐡 𝑛 (•) ≜ ̅ 𝚺 𝐻 (•) and 𝑝(𝐬|𝐻 𝑛-1 , 𝐡 𝑛 ) ≜ 𝑝(𝐬|𝐻). In the following 𝐡 𝑛 , 𝐻 𝑛-1 and 𝐻 are implicitly drawn (independently) from respectively 𝑝 𝐡 , 𝑝 𝑛-1 𝐡 and 𝑝 𝑛 𝐡 , where 𝑝 𝐡 is the probability distribution of the masks from Definition 21. Considering X , Y ∈ D such that X Y we distinguish two cases, depending whether |X | = |Y| + 1 or |X | = |Y| -1. Y, denoting 𝑛 = |X | and assuming for now that |X | = |Y|+1, there is by Definition 9 a permutation 𝜎 ∊ S 𝑛 such that 𝜎(X ) satisfies 𝜎(X ) We have ̅ 𝚺 𝐻 (𝜎(X )) = ̅ 𝚺 𝜎 -1 (𝐻) (X ), and as the masks are drawn i.i.d. according to 𝑝 𝐡 , we obtain 𝑝 X</figDesc><table><row><cell>Case |X | = |Y|+1 For any X</cell></row></table><note><p>U ∼ U ∼ U ≈ Y.</p></note></figure>
<figure type="table" xml:id="tab_16"><head /><label /><figDesc>𝑛 ) ⊙ 𝐡 𝑛 ‖ 1 ). Conclusion Previous results hold for any dataset size |X | ∊ N. We now take the supremum over X , Y, which includes both cases |X | = |Y| + 1 and |Y| = |X | + 1; the supremum is the same in both cases, and we have the equality from the first case. Thus</figDesc><table><row><cell>𝑏 ‖𝚽(𝐲 sup 1 𝛼 X ,Y∊D∶X U ∼Y 𝑝 X (𝐬) sup 𝐬∊Z 𝑝 Y</cell></row></table></figure>
<figure type="table" xml:id="tab_17"><head /><label /><figDesc>𝑣 𝑗 = 𝑢 𝑗 + 𝜋 for 1 ≤ 𝑗 ≤ 𝑚. The frequencies being nonresonant, a direct consequence of Lemma 6 is that for each 𝛗 ∈ R 𝑚 , sup 𝐱∊R 𝑑 inf 𝐡∊H 𝑟 𝑓 𝛗,𝐡 (𝐱) = sup 𝐱∊R 𝑑 inf 𝐡∊H 𝑟 ∑ 𝑗∊supp(𝐡) 𝑓(𝛚 𝑇 𝑗 𝐱 -𝜑 𝑗 ) = 𝑟 sup 𝑥∊R 𝑓(𝑥) = 𝑟 √ 2. The supremum being independent of 𝛗 this yields sup In the BDP setting, the supremum is taken independently on 𝐱 and 𝐲, thus for any 𝐡 we have sup 𝐱,𝐲∊R 𝑑 𝑄 B 1 (𝐱, 𝐲, 𝐡) = 2 sup 𝐱∊R 𝑑 𝑄 U 1 (𝐱, 𝐡) and Let 𝑋 denote the mean of 𝑛 ′ samples taken without replacement from a collection 𝑥 1 , …, 𝑥 𝑛 . Let 𝜎 2 = 1 𝑛 ∑ 𝑛 𝑖=1 |𝑥 𝑖 -𝜇| 2 , then we have Proof. Denote 𝑋 = 1 𝑛 ∑ 𝑛 𝑖=1 𝑔 𝑖 𝑥 𝑖 , with 𝑔 𝑖 = 1 if 𝑥 𝑖 is selected, and 0 otherwise (and as a consequence, ∑ 𝑛 𝑖=1 𝑔 𝑖 = 𝑛 ′ ). For any 1 ≤ 𝑖 &lt; 𝑗 ≤ 𝑛, the marginal of 𝑔 𝑖 is uniform and E(𝑔 𝑖 𝑔 𝑗) = 𝑃 [𝑔 𝑖 𝑔 𝑗 = 1] = 𝑃 [𝑔 𝑖 = 1 and 𝑔 𝑗 = 1] = 𝑃 [𝑧 = 2]for 𝑧 a random variable having an hypergeometric law of parameters (𝑛, 2/𝑛, 𝑛 ′ ).Var(𝑔𝑖 ) = E|𝑔 𝑖 | 2 -|E𝑔 𝑖 | 2 = Cov(𝑔 𝑖 , 𝑔 𝑗 ) = E(𝑔 𝑖 𝑔 𝑗 ) -E(𝑔 𝑖 )E(𝑔 𝑗 ) 𝑖=1 Var 𝐠 (𝑥 𝑖 𝑔 𝑖 ) + 2 ∑ 1≤𝑖&lt;𝑗≤𝑛 Cov(𝑥 𝑖 𝑔 𝑖 , 𝑥 𝑗 𝑔 𝑗 ))Let 𝜇 = 1 𝑛 ∑ 𝑛 𝑖=1 𝑥 𝑖 , and 𝜎 2 = 1 𝑛 ∑ 𝑛 𝑖=1 (𝑥 𝑖 -𝜇) 2 . Note that𝑛𝜎 2 =</figDesc><table><row><cell /><cell /><cell /><cell /><cell /><cell /><cell /><cell /><cell /><cell>𝑛</cell></row><row><cell /><cell /><cell /><cell /><cell /><cell /><cell /><cell /><cell /><cell>∑ (𝑥 𝑖 -𝜇) 2</cell></row><row><cell cols="2">𝐱∊R 𝑑</cell><cell cols="2">inf 𝐡∊H 𝑟</cell><cell cols="6">sup 𝛗∊{0,𝜋/2,𝜋,3𝜋/2} 𝑚 = 𝑓 𝛗-𝐮,𝐡 (𝐱) ≥ 𝑖=1 𝑛 ∑ 𝑥 2 𝑖 -𝑛𝜇 2 𝛗∊{0,𝜋/2,𝜋,3𝜋/2} 𝑚 sup</cell><cell>sup 𝐱∊R 𝑑</cell><cell>inf 𝐡∊H 𝑟</cell><cell>𝑓 𝛗-𝐮,𝐡 (𝐱) = 𝑟</cell><cell>√</cell><cell>2.</cell></row><row><cell /><cell /><cell /><cell /><cell /><cell /><cell /><cell /><cell /><cell>𝑖=1</cell></row><row><cell cols="10">As we also have (even for resonant frequencies) the upper bound sup 𝐱∊R 𝑑 inf 𝐡∊H 𝑟 sup 𝛗∊R 𝑚 𝑓 𝛗,𝐡 (𝐱) ≤ sup 𝐱∊R 𝑑 sup 𝐡∊H 𝑟 sup = 𝑛 ∑ 𝑖=1 𝑥 2 𝑖 -1 (∑ 𝑥 2 𝑖 + 2 ∑ 𝑥 𝑖 𝑥 𝑗 ) 𝑛 𝑖&lt;𝑗 𝑓 𝛗,𝐡 (𝐱) ≤ 𝑟 𝛗∊R 𝑚 we get for each 𝐡 ∊ H 𝑟 = 𝑛 -1 𝑛 (∑ 𝑥 2 𝑖 -2 1 𝑖&lt;𝑗 𝑛 -1 ∑ 𝑥 𝑖 𝑥 𝑗 )</cell><cell>√</cell><cell>2</cell></row><row><cell cols="3">𝑚 √ As a consequence</cell><cell cols="3">2 ≤ sup 𝐱∊R 𝑑</cell><cell cols="2">inf 𝐡 ′ ∊H 𝑟</cell><cell cols="2">𝑄 U 1 (𝐱, 𝐡 ′ ) ≤ sup 𝐱∊R 𝑑 Var( 1 𝑛 𝑛 ∑ 𝑖=1 𝑔 𝑖 𝑥 𝑖 ) = 𝑄 U 1 (𝐱, 𝐡) ≤ sup 𝐱∊R 𝑑 1 𝑛 ′ 𝑛 -𝑛 ′ 𝑛 2 𝑛 2 𝐡 ′ ∊H 𝑟 sup 𝑛 -1 𝜎 2</cell><cell>𝑄 U 1 (𝐱, 𝐡 ′ ) = 𝑚</cell><cell>√</cell><cell>2.</cell></row><row><cell>2𝑚 √</cell><cell cols="4">2 = sup 𝐱,𝐲∊R 𝑑</cell><cell cols="2">inf 𝐡 ′ ∊H 𝑟</cell><cell cols="3">𝑄 B 1 (𝐱, 𝐲, 𝐡 ′ ) ≤ sup 𝐱,𝐲∊R 𝑑</cell><cell>𝑄 B 1 (𝐱, 𝐲, 𝐡) ≤ sup 𝐱,𝐲∊R 𝑑 𝜎 2 = 𝑛 ′</cell><cell>sup 𝐡 ′ ∊H 𝑟</cell><cell>𝑄 B 1 (𝐱, 𝐲, 𝐡 ′ ) = 2𝑚</cell><cell>√</cell><cell>2.</cell></row><row><cell /><cell /><cell /><cell /><cell /><cell /><cell /><cell /><cell /><cell>Var(𝑋) =</cell><cell>𝜎 2 𝑛 ′</cell><cell>𝑛 -𝑛 ′ 𝑛 -1</cell><cell>.</cell></row><row><cell /><cell /><cell /><cell /><cell /><cell /><cell /><cell /><cell /><cell>𝑛 ′ 𝑛</cell><cell>(1 -</cell><cell>𝑛 ′ 𝑛</cell><cell>) =</cell><cell>𝑛 ′ (𝑛 -𝑛 ′ ) 𝑛 2</cell></row><row><cell /><cell /><cell /><cell /><cell /><cell /><cell /><cell /><cell>=</cell><cell>𝑛 ′ (𝑛 ′ -1) 𝑛(𝑛 -1)</cell><cell>-</cell><cell>(𝑛 ′ ) 2 𝑛 2 (hypergeometric law)</cell></row><row><cell /><cell /><cell /><cell /><cell /><cell /><cell /><cell /><cell>=</cell><cell>𝑛 ′ 𝑛</cell><cell>(</cell><cell>𝑛 ′ -1 𝑛 -1</cell><cell>-</cell><cell>𝑛 ′ 𝑛</cell><cell>) =</cell><cell>𝑛 ′ (𝑛 ′ -𝑛) 𝑛 2 (𝑛 -1)</cell></row><row><cell cols="10">𝜋,3𝜋/2} 𝑚 𝑔 𝑖 𝑥 𝑖 ) = (𝑛 ′ ) 2 ( 1 𝑓 𝛗-𝐮,𝐡 (𝐱). ∑ 𝑛 ∑ 𝑖=1 𝑗∊supp(𝐡) 1 𝑛 ′ 1 Var( 1 (𝐱, 𝐲, 𝐡) = 𝑄 B 𝛼 |𝜌(𝛚 𝑇 𝑗 𝐱 + 𝑢 𝑗 ) -𝜌(𝛚 𝑇 𝑗 𝐲 + 𝑢 𝑗 )| + |𝜌(𝛚 𝑇 𝑗 𝐱 + 𝑢 𝑗 -= 1 (𝑛 ′ ) 2 ( 𝑛 ′ (𝑛 -𝑛 ′ ) 𝑛 2 𝑛 ∑ 𝑖=1 𝑥 2 𝑖 + 2 𝑛 ′ (𝑛 ′ -𝑛) 𝑛 2 (𝑛 -1) 1≤𝑖&lt;𝑗≤𝑛 𝜋 2 ) -𝜌(𝛚 𝑇 𝑗 𝐲 + 𝑢 𝑗 -∑ 𝑥 𝑖 𝑥 𝑗 ) = 1 𝛼 sup 𝛗∊{0,𝜋/2,𝜋,3𝜋/2} 𝑚 𝑓 𝛗-𝐮,𝐡 (𝐱) -𝑓 𝛗-𝐮,𝐡 (𝐲) = 1 𝑛 ′ 𝑛 -𝑛 ′ 𝑛 2 ( 𝑛 ∑ 𝑖=1 𝑥 2 𝑖 -2 1 𝑛 -1 ∑</cell><cell>𝜋 2</cell><cell>)|</cell></row><row><cell /><cell /><cell>=</cell><cell>1 𝛼</cell><cell cols="6">sup 𝛗∊{0,𝜋/2,𝜋,3𝜋/2} 𝑚</cell></row></table><note><p>𝑓 𝛗-𝐮,𝐡 (𝐱) + 𝑓 𝛗-𝐯,𝐡 (𝐲). where D Derivation of the noise-signal ratio Lemma 30. 𝑛 ∑ 1≤𝑖&lt;𝑗≤𝑛 𝑥 𝑖 𝑥 𝑗 )</p></note></figure>
<figure type="table" xml:id="tab_18"><head /><label /><figDesc>E X E 𝐠∼WOR(𝑛,𝑛 ′ ) ‖𝐞 𝑛 ′ ‖ 2 = 1 𝑛 -1 ( 𝑛 𝑛 ′ -1)(E 𝐱 ‖𝚽(𝐱)‖ 2 2 -E X ‖𝐳 X ‖ 2 2 ) 𝐠∼WOR(𝑛,𝑛 ′ ) ‖𝐞 𝑛 ′ ‖ 2 = E 𝐠∼Bern(𝛽) 𝑛 ‖𝐞 𝑛 ′ ‖ 2 = 𝐱 𝑖 ) 𝑗 | 2 Var 𝐠 (𝑔 𝑖 ) E 𝐠∼Bern(𝛽) 𝑛 ‖𝐞 𝑛 ′ ‖ 2 =</figDesc><table><row><cell>=</cell><cell cols="3">1 𝑛 -1</cell><cell>(</cell><cell cols="2">𝑛 𝑛 ′ -1)(E 𝐱 ‖𝚽(𝐱)‖ 2 2 -(‖𝐳‖ 2 2 +</cell><cell>𝑚 𝑗=1 ∑</cell><cell>Var((𝐳 X ) 𝑗 )))</cell></row><row><cell>=</cell><cell cols="3">1 𝑛 -1</cell><cell>(</cell><cell cols="2">𝑛 𝑛 ′ -1)(E 𝐱 ‖𝚽(𝐱)‖ 2 2 -(‖𝐳‖ 2 2 +</cell><cell>1 𝑛</cell><cell>(E 𝐱 ‖𝚽(𝐱)‖ 2 -‖𝐳‖ 2 )))</cell></row><row><cell>=</cell><cell cols="3">1 𝑛 -1</cell><cell>(</cell><cell>𝑛 𝑛 ′ -1)(1 -</cell><cell>1 𝑛</cell><cell>)(E 𝐱 ‖𝚽(𝐱)‖ 2 2 -‖𝐳‖ 2 2 )</cell></row><row><cell cols="2">E X E 1 𝑛</cell><cell>(</cell><cell cols="4">𝑛 𝑛 ′ -1)(E 𝐱 ‖𝚽(𝐱)‖ 2 2 -‖𝐳‖ 2 2 )</cell></row><row><cell cols="6">• i.i.d. Bernoulli sampling with parameter 𝛽:</cell></row><row><cell cols="7">𝑚 ∑ 𝑗=1 |𝚽(1 Var 𝐠 ( 1 𝛽𝑛 𝑛 ∑ 𝑖=1 𝑔 𝑖 𝚽(𝐱 𝑖 ) 𝑗 ) = 𝑚 𝑛 1 𝛽 2 𝑛 2 ∑ 𝑗=1 ∑ 𝑖=1 𝑛 ( 1 𝛽 1 -1)( 𝑛</cell></row></table><note><p>𝑛 ∑ 𝑖=1 ‖𝚽(𝐱 𝑖 )‖ 2 )</p></note></figure>
			<note place="foot" n="1" xml:id="foot_0"><p>A first and reduced version of this work with privacy upper bounds and without the subsampling mechanism has been previously published<ref type="bibr" target="#b45">[45]</ref>.</p></note>
			<note place="foot" n="2" xml:id="foot_1"><p>An implementation can be found at https://github.com/BorjaBalle/analytic-gaussian-mechanism.</p></note>
			<note place="foot" xml:id="foot_2"><p>SummaryWe summarize the results obtained in this paper in the following tables, where 𝜂 = 𝜂(𝜀, 𝛿) refers to Theorem 2.</p></note>
		</body>
		<back>

			<div type="funding">
<div><p>* <rs type="person">V. Schellekens</rs> and <rs type="person">L. Jacques</rs> are funded by the <rs type="funder">"Fonds de la Recherche Scientifique" (F.R.S. -FNRS</rs>). Part of this work was supported by the <rs type="funder">FNRS</rs> Grant <rs type="grantNumber">T.0136.20</rs> (PDR).</p></div>
			</div>
			<listOrg type="funding">
				<org type="funding" xml:id="_gXNWUW5">
					<idno type="grant-number">T.0136.20</idno>
				</org>
			</listOrg>
			<div type="annex">
<div><p>Δ 2 (𝚺)</p><p>+ Ω union of orthogonal bases.</p><p>Lemma 9:</p><p>As a result</p><p>Taking the expectation w.r.t. the dataset, we get</p><p>Total noise level For conciseness, we use the notation 𝛽 = 𝑛 ′ /𝑛 when sampling 𝑛 ′ samples without replacement, and 𝛼 = 𝑟/𝑚. The total noise level for Poisson sampling is ref.</p><p>For WOR sampling, we get ref.</p><p>Proof of Lemma 27. We rewrite 𝐬(X ) = 𝑓(|X | + 𝜁) Σ(X ), where 𝑓(|X | + 𝜁) is an estimator of 1/|X |. We define the reference signal as 𝐬 = 𝐳 or 𝐳 X , and the noise as 𝐞 = 𝑓(|X | + 𝜁) Σ(X ) -𝐬. In the following, the expectations are taken w.r.t. the randomness of the sketching mechanism when 𝐳 X is chosen as the reference signal, and w.r.t. both the randomness of the mechanism and the draw of X when 𝐳 is the</p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Differentially Private Covariance Estimation</title>
		<author>
			<persName><forename type="first">K</forename><surname>Amin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Dick</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Kulesza</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Munoz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Vassilvitskii</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in Neural Information Processing Systems</title>
		<imprint>
			<date type="published" when="2019">2019</date>
			<biblScope unit="page" from="14190" to="14199" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Differentially Private Robust Low-Rank Approximation</title>
		<author>
			<persName><forename type="first">R</forename><surname>Arora</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Braverman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Upadhyay</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in Neural Information Processing Systems 31</title>
		<editor>
			<persName><forename type="first">S</forename><surname>Bengio</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">H</forename><surname>Wallach</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">H</forename><surname>Larochelle</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">K</forename><surname>Grauman</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">N</forename><surname>Cesa-Bianchi</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">&amp;</forename><forename type="middle">R</forename><surname>Garnett</surname></persName>
		</editor>
		<imprint>
			<date type="published" when="2018">2018</date>
			<biblScope unit="page" from="4137" to="4145" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title />
		<author>
			<persName><forename type="first">Curran</forename><surname>Associates</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Inc</forename></persName>
		</author>
		<imprint />
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Differentially private clustering in high-dimensional Euclidean spaces</title>
		<author>
			<persName><forename type="first">M.-F</forename><surname>Balcan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Dick</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Liang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Mou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Machine Learning</title>
		<imprint>
			<date type="published" when="2017">2017</date>
			<biblScope unit="page" from="322" to="331" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">Privacy Amplification by Subsampling: Tight Analyses via Couplings and Divergences</title>
		<author>
			<persName><forename type="first">B</forename><surname>Balle</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Barthe</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Gaboardi</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Improving the Gaussian Mechanism for Differential Privacy: Analytical Calibration and Optimal Denoising</title>
		<author>
			<persName><forename type="first">B</forename><surname>Balle</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y.-X</forename><surname>Wang</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">Differentially Private Database Release via Kernel Mean Embeddings</title>
		<author>
			<persName><forename type="first">M</forename><surname>Balog</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Tolstikhin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Schölkopf</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1710.01641</idno>
		<imprint>
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
	<note>stat</note>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Private empirical risk minimization: Efficient algorithms and tight error bounds</title>
		<author>
			<persName><forename type="first">R</forename><surname>Bassily</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Smith</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Thakurta</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE 55th Annual Symposium on Foundations of Computer Science</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2014">2014. 2014</date>
			<biblScope unit="page" from="464" to="473" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Practical privacy: the SuLQ framework</title>
		<author>
			<persName><forename type="first">A</forename><surname>Blum</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Dwork</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Mcsherry</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Nissim</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the twenty-fourth ACM SIGMOD-SIGACT-SIGART symposium on Principles of database systems</title>
		<meeting>the twenty-fourth ACM SIGMOD-SIGACT-SIGART symposium on Principles of database systems</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2005">2005</date>
			<biblScope unit="page" from="128" to="138" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">A learning theory approach to noninteractive database privacy</title>
		<author>
			<persName><forename type="first">A</forename><surname>Blum</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Ligett</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Roth</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of the ACM (JACM)</title>
		<imprint>
			<biblScope unit="volume">60</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="1" to="25" />
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">Fundamental Performance Limits for Ideal Decoders in High-Dimensional Linear Inverse Problems</title>
		<author>
			<persName><forename type="first">A</forename><surname>Bourrier</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">E</forename><surname>Davies</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Peleg</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Pérez</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Gribonval</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2014">2014</date>
			<biblScope unit="volume">60</biblScope>
			<biblScope unit="page" from="7928" to="7946" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">A nonlinear programming algorithm for solving semidefinite programs via low-rank factorization</title>
		<author>
			<persName><forename type="first">S</forename><surname>Burer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">D</forename><surname>Monteiro</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2003">2003</date>
			<biblScope unit="volume">95</biblScope>
			<biblScope unit="page" from="329" to="357" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Large-Scale High-Dimensional Clustering with Fast Sketching</title>
		<author>
			<persName><forename type="first">A</forename><surname>Chatalic</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Gribonval</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Keriven</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE International Conference on Acoustics, Speech and Signal Processing (ICASSP)</title>
		<imprint>
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m" type="main">Differentially private empirical risk minimization</title>
		<author>
			<persName><forename type="first">K</forename><surname>Chaudhuri</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Monteleoni</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">D</forename><surname>Sarwate</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2011">2011</date>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="page" from="1069" to="1109" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Near-optimal differentially private principal components</title>
		<author>
			<persName><forename type="first">K</forename><surname>Chaudhuri</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Sarwate</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Sinha</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in Neural Information Processing Systems</title>
		<imprint>
			<date type="published" when="2012">2012</date>
			<biblScope unit="page" from="989" to="997" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Synopses for massive data: Samples, histograms, wavelets, sketches</title>
		<author>
			<persName><forename type="first">G</forename><surname>Cormode</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Garofalakis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><forename type="middle">J</forename><surname>Haas</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Jermaine</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Foundations and Trends in Databases</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="issue">1-3</biblScope>
			<biblScope unit="page" from="1" to="294" />
			<date type="published" when="2011">2011</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Unique in the crowd: The privacy bounds of human mobility</title>
		<author>
			<persName><forename type="first">Y.-A</forename><surname>De Montjoye</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">A</forename><surname>Hidalgo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Verleysen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><forename type="middle">D</forename><surname>Blondel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Scientific reports</title>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="page">1376</biblScope>
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Revealing information while preserving privacy</title>
		<author>
			<persName><forename type="first">I</forename><surname>Dinur</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Nissim</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the twenty-second ACM SIGMOD-SIGACT-SIGART symposium on Principles of database systems</title>
		<meeting>the twenty-second ACM SIGMOD-SIGACT-SIGART symposium on Principles of database systems</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2003">2003</date>
			<biblScope unit="page" from="202" to="210" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Privacy aware learning</title>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">C</forename><surname>Duchi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">I</forename><surname>Jordan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><forename type="middle">J</forename><surname>Wainwright</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of the ACM (JACM)</title>
		<imprint>
			<biblScope unit="volume">61</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page">38</biblScope>
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Differential privacy: A survey of results</title>
		<author>
			<persName><forename type="first">C</forename><surname>Dwork</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Theory and Applications of Models of Computation</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2008">2008</date>
			<biblScope unit="page" from="1" to="19" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Calibrating Noise to Sensitivity in Private Data Analysis</title>
		<author>
			<persName><forename type="first">C</forename><surname>Dwork</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Mcsherry</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Nissim</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Smith</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Theory of cryptography conference</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2006">2006</date>
			<biblScope unit="page">20</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title level="m" type="main">The Algorithmic Foundations of Differential Privacy</title>
		<author>
			<persName><forename type="first">C</forename><surname>Dwork</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Roth</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2014">2014</date>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="page" from="211" to="407" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Analyze gauss: optimal bounds for privacy-preserving principal component analysis</title>
		<author>
			<persName><forename type="first">C</forename><surname>Dwork</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Talwar</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Thakurta</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 46th Annual ACM Symposium on Theory of Computing -STOC '14</title>
		<meeting>the 46th Annual ACM Symposium on Theory of Computing -STOC '14</meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="2014">2014</date>
			<biblScope unit="page" from="11" to="20" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Rappor: Randomized aggregatable privacypreserving ordinal response</title>
		<author>
			<persName><forename type="first">Ú</forename><surname>Erlingsson</surname></persName>
		</author>
		<author>
			<persName><forename type="first">V</forename><surname>Pihur</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Korolova</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2014 ACM SIGSAC conference on computer and communications security</title>
		<meeting>the 2014 ACM SIGSAC conference on computer and communications security</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2014">2014</date>
			<biblScope unit="page" from="1054" to="1067" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Private Coresets</title>
		<author>
			<persName><forename type="first">D</forename><surname>Feldman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Fiat</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Kaplan</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Nissim</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Forty-first Annual ACM Symposium on Theory of Computing, STOC '09</title>
		<meeting>the Forty-first Annual ACM Symposium on Theory of Computing, STOC '09</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2009">2009</date>
			<biblScope unit="page" from="361" to="370" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Coresets for differentially private k-means clustering and applications to privacy in mobile sensor networks</title>
		<author>
			<persName><forename type="first">D</forename><surname>Feldman</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Xiang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Zhu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Rus</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Information Processing in Sensor Networks (IPSN)</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2017">2017. 2017</date>
			<biblScope unit="page" from="3" to="16" />
		</imprint>
	</monogr>
	<note>16th ACM/IEEE International Conference on</note>
</biblStruct>

<biblStruct xml:id="b26">
	<monogr>
		<author>
			<persName><forename type="first">S</forename><surname>Foucart</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Rauhut</surname></persName>
		</author>
		<title level="m">A mathematical introduction to compressive sensing</title>
		<meeting><address><addrLine>Basel</addrLine></address></meeting>
		<imprint>
			<publisher>Birkhäuser</publisher>
			<date type="published" when="2013">2013</date>
			<biblScope unit="volume">1</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<monogr>
		<author>
			<persName><forename type="first">R</forename><surname>Gribonval</surname></persName>
		</author>
		<author>
			<persName><forename type="first">G</forename><surname>Blanchard</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Keriven</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Traonmilin</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1706.07180</idno>
		<title level="m">Compressive statistical learning with random feature moments</title>
		<imprint>
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
	<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b28">
	<monogr>
		<title level="m" type="main">Beating Randomized Response on Incoherent Matrices</title>
		<author>
			<persName><forename type="first">M</forename><surname>Hardt</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Roth</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2012">2012</date>
			<biblScope unit="page">1255</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Symmetric matrix perturbation for differentially-private principal component analysis</title>
		<author>
			<persName><forename type="first">H</forename><surname>Imtiaz</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">D</forename><surname>Sarwate</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2016 IEEE International Conference on Acoustics, Speech and Signal Processing (ICASSP)</title>
		<imprint>
			<date type="published" when="2016">2016</date>
			<biblScope unit="page" from="2339" to="2343" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Wishart mechanism for differentially private principal components analysis</title>
		<author>
			<persName><forename type="first">W</forename><surname>Jiang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Xie</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Thirtieth AAAI Conference on Artificial Intelligence</title>
		<imprint>
			<date type="published" when="2016">2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">On differentially private low rank approximation</title>
		<author>
			<persName><forename type="first">M</forename><surname>Kapralov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Talwar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the twenty-fourth annual ACM-SIAM symposium on Discrete algorithms</title>
		<meeting>the twenty-fourth annual ACM-SIAM symposium on Discrete algorithms</meeting>
		<imprint>
			<publisher>SIAM</publisher>
			<date type="published" when="2013">2013</date>
			<biblScope unit="page" from="1395" to="1414" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Privacy via the Johnson-Lindenstrauss Transform</title>
		<author>
			<persName><forename type="first">K</forename><surname>Kenthapadi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Korolova</surname></persName>
		</author>
		<author>
			<persName><forename type="first">I</forename><surname>Mironov</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Mishra</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Privacy and Confidentiality</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="issue">1</biblScope>
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">Sketching for large-scale learning of mixture models</title>
		<author>
			<persName><forename type="first">N</forename><surname>Keriven</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Bourrier</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Gribonval</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Pérez</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Information and Inference: A Journal of the IMA</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="447" to="508" />
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<monogr>
		<title level="m" type="main">Sketching for large-scale learning of mixture models</title>
		<author>
			<persName><forename type="first">N</forename><surname>Keriven</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Bourrier</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Gribonval</surname></persName>
		</author>
		<author>
			<persName><forename type="first">P</forename><surname>Pérez</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2017">2017</date>
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="page" from="447" to="508" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">Blind Source Separation Using Mixtures of Alpha-Stable Distributions</title>
		<author>
			<persName><forename type="first">N</forename><surname>Keriven</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Deleforge</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Liutkus</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2018 IEEE International Conference on Acoustics, Speech and Signal Processing (ICASSP)</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2018">2018</date>
			<biblScope unit="page" from="771" to="775" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">Compressive K-means</title>
		<author>
			<persName><forename type="first">N</forename><surname>Keriven</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Tremblay</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Traonmilin</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Gribonval</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Acoustics, Speech and Signal Processing (ICASSP)</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2017">2017</date>
			<biblScope unit="page" from="6369" to="6373" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<monogr>
		<title level="m" type="main">Näherungsweise ganzzahlige auflösung linearer gleichungen</title>
		<author>
			<persName><forename type="first">L</forename><surname>Kronecker</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1884">1884</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<analytic>
		<title level="a" type="main">A Convergent Differentially Private k-Means Clustering Algorithm</title>
		<author>
			<persName><forename type="first">Z</forename><surname>Lu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Shen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in Knowledge Discovery and Data Mining</title>
		<editor>
			<persName><forename type="first">Q</forename><surname>Yang</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">Z.-H</forename><surname>Zhou</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">Z</forename><surname>Gong</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">M.-L</forename><surname>Zhang</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">&amp; S.-J</forename><surname>Huang</surname></persName>
		</editor>
		<imprint>
			<publisher>Springer International Publishing</publisher>
			<date type="published" when="2019">2019</date>
			<biblScope unit="volume">11439</biblScope>
			<biblScope unit="page" from="612" to="624" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<analytic>
		<title level="a" type="main">Privacy integrated queries: an extensible platform for privacy-preserving data analysis</title>
		<author>
			<persName><forename type="first">F</forename><forename type="middle">D</forename><surname>Mcsherry</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2009 ACM SIGMOD International Conference on Management of data</title>
		<meeting>the 2009 ACM SIGMOD International Conference on Management of data</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2009">2009</date>
			<biblScope unit="page" from="19" to="30" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b40">
	<analytic>
		<title level="a" type="main">Clustering algorithms for the centralized and local models</title>
		<author>
			<persName><forename type="first">K</forename><surname>Nissim</surname></persName>
		</author>
		<author>
			<persName><forename type="first">U</forename><surname>Stemmer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Algorithmic Learning Theory</title>
		<imprint>
			<publisher>PMLR</publisher>
			<date type="published" when="2018">2018</date>
			<biblScope unit="page" from="619" to="653" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b41">
	<analytic>
		<title level="a" type="main">k-variates++: more pluses in the k-means++</title>
		<author>
			<persName><forename type="first">R</forename><surname>Nock</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Canyasse</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Boreli</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Nielsen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Machine Learning</title>
		<imprint>
			<date type="published" when="2016">2016</date>
			<biblScope unit="page" from="145" to="154" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b42">
	<monogr>
		<title level="m" type="main">DP-EM: Differentially Private Expectation Maximization</title>
		<author>
			<persName><forename type="first">M</forename><surname>Park</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Foulds</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Chaudhuri</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Welling</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2016">2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b43">
	<analytic>
		<title level="a" type="main">Differentially private grids for geospatial data</title>
		<author>
			<persName><forename type="first">W</forename><surname>Qardaji</surname></persName>
		</author>
		<author>
			<persName><forename type="first">W</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Li</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE 29th International Conference on</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2013">2013. 2013</date>
			<biblScope unit="page" from="757" to="768" />
		</imprint>
	</monogr>
	<note>Data Engineering (ICDE)</note>
</biblStruct>

<biblStruct xml:id="b44">
	<analytic>
		<title level="a" type="main">Random features for large-scale kernel machines</title>
		<author>
			<persName><forename type="first">A</forename><surname>Rahimi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Recht</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in neural information processing systems</title>
		<imprint>
			<date type="published" when="2008">2008</date>
			<biblScope unit="page" from="1177" to="1184" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b45">
	<analytic>
		<title level="a" type="main">Differentially Private Compressive k-Means</title>
		<author>
			<persName><forename type="first">V</forename><surname>Schellekens</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Chatalic</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><surname>Houssiau</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y.-A</forename><surname>De Montjoye</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Jacques</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Gribonval</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICASSP 2019 -44th International Conference on Acoustics, Speech, and Signal Processing</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2019">2019</date>
			<biblScope unit="page" from="1" to="5" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b46">
	<analytic>
		<title level="a" type="main">Quantized Compressive K-Means</title>
		<author>
			<persName><forename type="first">V</forename><surname>Schellekens</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Jacques</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Signal Processing Letters</title>
		<imprint>
			<biblScope unit="volume">25</biblScope>
			<biblScope unit="issue">8</biblScope>
			<biblScope unit="page" from="1211" to="1215" />
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b47">
	<analytic>
		<title level="a" type="main">Differentially private k-means with constant multiplicative error</title>
		<author>
			<persName><forename type="first">U</forename><surname>Stemmer</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Kaplan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in Neural Information Processing Systems</title>
		<imprint>
			<date type="published" when="2018">2018</date>
			<biblScope unit="page" from="5431" to="5441" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b48">
	<analytic>
		<title level="a" type="main">Differentially private k-means clustering</title>
		<author>
			<persName><forename type="first">D</forename><surname>Su</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Cao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">N</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Bertino</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Jin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Sixth ACM Conference on Data and Application Security and Privacy</title>
		<meeting>the Sixth ACM Conference on Data and Application Security and Privacy</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2016">2016</date>
			<biblScope unit="page" from="26" to="37" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b49">
	<analytic>
		<title level="a" type="main">k-anonymity: A model for protecting privacy</title>
		<author>
			<persName><forename type="first">L</forename><surname>Sweeney</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">International Journal of Uncertainty, Fuzziness and Knowledge-Based Systems</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="issue">05</biblScope>
			<biblScope unit="page" from="557" to="570" />
			<date type="published" when="2002">2002</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b50">
	<monogr>
		<title level="m" type="main">Learning with privacy at scale</title>
		<author>
			<persName><forename type="first">D</forename><surname>Team</surname></persName>
		</author>
		<ptr target="https://machinelearning.apple.com/2017/12/06/learning-with-privacy-at-scale.html" />
		<imprint>
			<date type="published" when="2017">2017</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b51">
	<monogr>
		<title level="m" type="main">Compressed Sensing for Privacy-Preserving Data Processing</title>
		<author>
			<persName><forename type="first">M</forename><surname>Testa</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Valsesia</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Bianchi</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Magli</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2019">2019</date>
			<publisher>Springer</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b52">
	<monogr>
		<title level="m" type="main">Introduction to the perturbation theory of Hamiltonian systems</title>
		<author>
			<persName><forename type="first">D</forename><surname>Treschev</surname></persName>
		</author>
		<author>
			<persName><forename type="first">O</forename><surname>Zubelevich</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2009">2009</date>
			<publisher>Springer Science &amp; Business Media</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b53">
	<monogr>
		<title level="m" type="main">The Price of Privacy for Low-rank Factorization</title>
		<author>
			<persName><forename type="first">J</forename><surname>Upadhyay</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2018">2018</date>
			<biblScope unit="page">12</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b54">
	<analytic>
		<title level="a" type="main">Technical privacy metrics: a systematic survey</title>
		<author>
			<persName><forename type="first">I</forename><surname>Wagner</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><surname>Eckhoff</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Computing Surveys (CSUR)</title>
		<imprint>
			<biblScope unit="volume">51</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page">57</biblScope>
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b55">
	<monogr>
		<title level="m" type="main">Rank optimality for the Burer-Monteiro factorization</title>
		<author>
			<persName><forename type="first">I</forename><surname>Waldspurger</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Waters</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b56">
	<analytic>
		<title level="a" type="main">Differentially private empirical risk minimization revisited: Faster and more general</title>
		<author>
			<persName><forename type="first">D</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Ye</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Xu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in Neural Information Processing Systems</title>
		<imprint>
			<date type="published" when="2017">2017</date>
			<biblScope unit="page" from="2722" to="2731" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b57">
	<analytic>
		<title level="a" type="main">On the Relation Between Identifiability, Differential Privacy, and Mutual-Information Privacy</title>
		<author>
			<persName><forename type="first">W</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Ying</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Information Theory</title>
		<imprint>
			<biblScope unit="volume">62</biblScope>
			<biblScope unit="issue">9</biblScope>
			<biblScope unit="page" from="5018" to="5029" />
			<date type="published" when="2016">2016</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b58">
	<analytic>
		<title level="a" type="main">Randomized response: A survey technique for eliminating evasive answer bias</title>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">L</forename><surname>Warner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of the American Statistical Association</title>
		<imprint>
			<biblScope unit="volume">60</biblScope>
			<biblScope unit="issue">309</biblScope>
			<biblScope unit="page" from="63" to="69" />
			<date type="published" when="1965">1965</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b59">
	<analytic>
		<title level="a" type="main">Differentially private density estimation via Gaussian mixtures model</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Peng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Zeng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Li</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE/ACM 24th International Symposium on Quality of Service (IWQoS)</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2016">2016. 2016</date>
			<biblScope unit="page" from="1" to="6" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b60">
	<analytic>
		<title level="a" type="main">PrivGene: differentially private model fitting using genetic algorithms</title>
		<author>
			<persName><forename type="first">J</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">X</forename><surname>Xiao</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Y</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">Z</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Winslett</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2013 international conference on Management of data -SIGMOD '13</title>
		<meeting>the 2013 international conference on Management of data -SIGMOD '13</meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="2013">2013</date>
			<biblScope unit="page">665</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b61">
	<analytic>
		<title level="a" type="main">Differential privacy with compression</title>
		<author>
			<persName><forename type="first">S</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName><forename type="first">K</forename><surname>Ligett</surname></persName>
		</author>
		<author>
			<persName><forename type="first">L</forename><surname>Wasserman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE International Symposium on Information Theory</title>
		<imprint>
			<date type="published" when="2009">2009. 2009</date>
			<biblScope unit="page" from="2718" to="2722" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>