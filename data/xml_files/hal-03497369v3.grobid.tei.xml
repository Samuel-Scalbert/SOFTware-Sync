<?xml version="1.0" encoding="UTF-8"?>
<TEI xml:space="preserve" xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Optimal Threshold Padlock Systems</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName><forename type="first">Jannik</forename><surname>Dreier</surname></persName>
							<email>jannik.dreier@loria.fr</email>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Univ. de Lorraine</orgName>
								<orgName type="institution" key="instit2">CNRS</orgName>
								<orgName type="institution" key="instit3">Inria</orgName>
								<orgName type="institution" key="instit4">LORIA</orgName>
								<address>
									<postCode>F-54000</postCode>
									<settlement>Nancy</settlement>
									<country key="FR">France</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Jean-Guillaume</forename><surname>Dumas</surname></persName>
							<email>jean-guillaume.dumas@univ-grenoble-alpes.fr</email>
							<affiliation key="aff1">
								<orgName type="laboratory">Laboratoire Jean Kuntzmann UMR 5224</orgName>
								<orgName type="institution" key="instit1">Univ. Grenoble Alpes</orgName>
								<orgName type="institution" key="instit2">CNRS</orgName>
								<address>
									<postCode>38058</postCode>
									<settlement>Grenoble</settlement>
									<country key="FR">France</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Pascal</forename><surname>Lafourcade</surname></persName>
							<email>pascal.lafourcade@uca.fr</email>
							<affiliation key="aff2">
								<orgName type="laboratory" key="lab1">LIMOS</orgName>
								<orgName type="laboratory" key="lab2">UMR 6158</orgName>
								<orgName type="institution" key="instit1">Univ. Clermont Auvergne</orgName>
								<orgName type="institution" key="instit2">CNRS</orgName>
								<address>
									<postCode>63178</postCode>
									<settlement>Aubière</settlement>
									<country key="FR">France</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName><forename type="first">Léo</forename><surname>Robert</surname></persName>
							<email>leo.robert@uca.fr</email>
							<affiliation key="aff2">
								<orgName type="laboratory" key="lab1">LIMOS</orgName>
								<orgName type="laboratory" key="lab2">UMR 6158</orgName>
								<orgName type="institution" key="instit1">Univ. Clermont Auvergne</orgName>
								<orgName type="institution" key="instit2">CNRS</orgName>
								<address>
									<postCode>63178</postCode>
									<settlement>Aubière</settlement>
									<country key="FR">France</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Optimal Threshold Padlock Systems</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<idno type="MD5">9C03A0ED5FB944411D282A008BC569AE</idno>
					<idno type="DOI">10.3233/JCS-210065</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.8.0" ident="GROBID" when="2024-03-07T09:38+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid"/>
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>Threshold Cryptography</term>
					<term>Physical Secret Sharing</term>
					<term>Block Designs</term>
					<term>Packings</term>
				</keywords>
			</textClass>
			<abstract>
<div xmlns="http://www.tei-c.org/ns/1.0"><p>In 1968, Liu described the problem of securing documents in a shared secret project. In an example, at least six out of eleven participating scientists need to be present to open the lock securing the secret documents. Shamir proposed a mathematical solution to this physical problem in 1979, by designing an efficient k-out-of-n secret sharing scheme based on Lagrange's interpolation. Liu and Shamir also claimed that the minimal solution using physical locks is clearly impractical and exponential in the number of participants. In this paper we relax some implicit assumptions in their claim and propose an optimal physical solution to the problem of Liu that uses physical padlocks, but the number of padlocks is not greater than the number of participants. Then, we show that no device can do better for k-out-of-n threshold padlock systems as soon as k √ 2n, which holds true in particular for Liu's example. More generally, we derive bounds required to implement any threshold system and prove a lower bound of O(log(n)) padlocks for any threshold larger than 2. For instance we propose an optimal scheme reaching that bound for 2-out-of-n threshold systems and requiring less than 2 log 2 (n) padlocks. We also discuss more complex access structures, a wrapping technique, and other sublinear realizations like an algorithm to generate 3-out-of-n systems with 2.5 √ n padlocks. Finally we give an algorithm building k-out-of-n threshold padlock systems with only O log(n) k-1 padlocks. Apart from the physical world, our results also show that it is possible to implement secret sharing over small fields.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction</head><p>In 1979, in his paper on secret sharing <ref type="bibr" target="#b0">[1]</ref>, Shamir presented the following threshold problem introduced by Liu in [2, : Eleven scientists are working on a secret project. They wish to lock up the documents in a cabinet so that the cabinet can be opened if and only if six or more of the scientists are present. What is the smallest number of locks needed? What is the smallest number of keys to the locks each scientist must carry? Liu and Shamir answered this physical problem using mathematics as follows: It is not hard to show that the minimal solution uses 462 locks and 252 keys per scientist. These numbers are clearly impractical, and they become exponentially worse when the number of scientists increases. This is why Shamir proposed to use polynomial and Lagrange's interpolation to solve Liu's question. His clever idea is to hide the secret in the constant term of a polynomial of degree k-1. Then he distributes one point of the chosen polynomial to each of the n participants. As soon as k participants share their points, they can recover the secret using Lagrange's interpolation and algorithms in O(n log 2 n) operations <ref type="bibr" target="#b2">[3,</ref><ref type="bibr" target="#b3">4]</ref>. A few years later, verifiable secret sharing was introduced by Chor et al. in <ref type="bibr" target="#b4">[5]</ref> and improved in <ref type="bibr" target="#b5">[6]</ref>. The idea is to offer the possibility to verify if the points are valid.</p><p>We show that Liu's problem is solvable using far less locks. Liu and Shamir claim stems from the restriction that there should be a lock for each combination of 6 scientists, 462 = 11  6 , and that every scientist needs the keys for every combination of scientists that includes him. This is 252 = 10  5 keys. Liu-Shamir's minimality result thus assumes that the only physical arrangements of locks that allow threshold systems are those where the opening of any lock opens the cabinet.</p><p>Contributions:</p><p>(1) As a warm up, we relax Liu and Shamir's assumption and design a physical k-out-of-n threshold padlock system. We have build a prototype of this physical device. Our system only requires one padlock and one key per participant, which is practical, when compared to the previous exponential solution.</p><p>(2) Then, we establish lower bounds on the number of padlocks necessary for any abstract threshold system. Specifically, we show that for a 2-out-of-n configuration, less than 2 log 2 (n) padlocks are sufficient, provided that keys can be duplicated. In fact, there is an optimal solution for this type of configuration, with O(log(n)) padlocks, and we also show that this optimum can be realized, using our physical system as one building block. Differently, for k-out-of-n configurations with k 3, it is more complicated to solve the problem with fewer than n padlocks. We first prove that this is impossible for k √ 2n and thus that our physical device is optimal in these cases. For instance, this answers Liu's question: the minimal number of padlocks for a 6-out-of-11 configuration is 11, as 6 &gt; √ 22. Our system with 11 padlocks and only 1 key per participant, is thus optimal in this case. We are then nonetheless able to give algorithms building systems for k = 3 with only about 2.5</p><p>√ n padlocks and each participant owns 3 keys. These realizations use more complex access structures and associated algorithmic building blocks, that we provide.</p><p>(3) We discuss more complex access structures, which include for instance ensuring that <ref type="bibr">Alice and</ref> Bob can open the lock with any other third participant, but not together. Another possibility is for instance that Alice is highly ranked and can open the padlock by herself but that any others need to be at least two. For this we develop a tentative padlock algebra for logic gates and give associated algorithms. The idea is to combine threshold cryptography and secret sharing with the theory of block designs, packings and Sperner families. (4) Finally, we propose a recursive algorithm to build larger systems, that requires only a logarithmic number of padlocks. Asymptotically, our algorithm requires only O log(n) k-1 padlocks to realize a k-out-of-n threshold padlock system. (5) Lastly, we also show that our physical results do apply to the numerical world by linking the number of padlocks to the size of the finite field used for secret sharing.</p><p>Outline: In section 2, we review existing threshold mechanisms that use physical padlocks, or visual cryptography, which not perfectly answer Liu's problem. In section 3, we describe our novel physical k-out-of-n threshold padlock system device. In section 4, we derive generic bounds on the number of padlocks required to realize a given threshold configuration. We also show the optimality of our device for 2-out-of-n systems. Then, in section 5, we discuss more complex access structures. We provide for instance solutions on logic formulae in sections 5.1 and 5.2, and in section 5.3 we introduce the use of a sealed wire. Further lower bounds, including the optimality of our solution for sufficiently large k, together with smaller realizations, with strictly less than n padlocks, are given in section 6. Our recursive construction is then given in section 7 and the link with the numerical aspects in section 8.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Related Work</head><p>Threshold cryptography in general received a lot of attention recently, since on March 1, 2019 the Computer Security Division (CSD) at the National Institute of Standards and Technology (NIST) published the final version of NISTIR 8214, "Threshold Schemes for Cryptographic Primitives" <ref type="bibr" target="#b6">[7]</ref>. This reports explicitly also mentions physical threshold solutions (page 10, line 55): "While we focus on secure implementations of cryptographic primitives, the actual threshold techniques may also include non-cryptographic techniques." We present existing physical solutions for threshold cryptography, while a survey of cryptographic threshold schemes by Y. Desmedt can be found in <ref type="bibr" target="#b7">[8]</ref>. We distinguish two classes of solutions: the first one uses physical keys and padlocks; the second one uses visual cryptography, as introduced by M. Naor and A. Shamir in 1994 <ref type="bibr" target="#b8">[9]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1.">State of the art, using Padlocks</head><p>A 1-out-of-1 padlock is just one simple physical padlock. There are many systems for 1-out-of-n padlocks, both home made and commercial products. There also exist commercial solutions for n-outof-n padlocks, which are used by for example by electricians to secure an electrical circuit as explained next.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1.1.">1-out-of-n locks</head><p>In fig. <ref type="figure" target="#fig_0">1</ref>, left, a 1-out-of-2 padlocks is done simply with two physical padlocks. This approach can be generalized to 1-out-of-n as in fig. <ref type="figure" target="#fig_0">1</ref>, right, and is called a daisy chain. We notice that the bottom left yellow padlock was badly placed, and it is useless. In this case the owner of this padlock cannot open the door. We call this the daisy chain attack. For example in fig. <ref type="figure" target="#fig_0">1</ref>, if the owner of the bottom padlock opens it and then locks it upper in the chain, then he excludes all the owners of these padlocks, as they cannot open the door any more <ref type="foot" target="#foot_0">1</ref> .  In fig. <ref type="figure" target="#fig_2">2</ref>, we can see two different mechanisms that perform 1-out-of-6 padlocks to open the gate of a field. The first one has six padlocks that block the trigger. As soon as one padlock is opened a latch is removed and then the door can be opened. It is the natural extension of the solution of fig. <ref type="figure" target="#fig_0">1</ref> that avoids the daisy chain attacks. Next, the second picture of fig. <ref type="figure" target="#fig_2">2</ref>, shows a different solution also implementing a 1-out-of-6 padlock, and which is also resistant to the daisy chain attack. In this system, as soon as one padlock is removed, it is possible to turn the circle and then to pass the stick in the corresponding hole in order to open the door.  There are also commercial products for 1-out-of-n padlocks. The first picture of fig. <ref type="figure" target="#fig_3">3</ref> shows a commercial product designed by Everlock Systems: the model SLX2 <ref type="bibr" target="#b9">[10]</ref>. The second picture of fig. <ref type="figure" target="#fig_3">3</ref> shows a commercial product sold by Tayhope Multi-Locking Systems <ref type="bibr" target="#b10">[11]</ref>. Everlock Systems has multiple patents on their designs <ref type="bibr" target="#b11">[12]</ref><ref type="bibr" target="#b12">[13]</ref><ref type="bibr" target="#b13">[14]</ref><ref type="bibr" target="#b14">[15]</ref> and their solution is close to the mechanism proposed on the left side of fig. <ref type="figure" target="#fig_2">2</ref>. Differently, Tayhope mechanism allows the owner of a padlock to remove the metallic stick which enables the opening of the door, by pushing all the padlocks on one side. Now, if one is interested in reducing the number of padlocks, one can realize a 1-out-of-n threshold system with a single lock: duplicate the key of one padlock n times and distribute the key to all the participants. The obtained system has not all the physical properties of the daisy chain or the systems of fig. <ref type="figure" target="#fig_3">3</ref> (for instance the latter does not need a trusted third party to setup the chain or to duplicate the keys), but is probably more economical. Overall, we have the following possibilities for 1-out-of-n systems:</p><p>• A single padlock with n duplicated keys: probably most economical; • A daisy chain: if keys cannot be duplicated;</p><p>• Systems like those of fig. <ref type="figure" target="#fig_3">3</ref>: they do not require a trusted third party for the setup, as each participant can bring their own lock and key(s).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1.2.">n-out-of-n locks</head><p>Finally, there are physical n-out-of-n mechanisms using padlocks that are used for example for operations on high-voltage circuits and transformers. Two examples of 6-out-of-6 padlocks are given in fig. <ref type="figure" target="#fig_5">4</ref>. The idea is that nobody should be able to turn on the electricity while someone is still working on the high-voltage transformer. To achieve this, each technician places a padlock on the main switch before entering the danger zone. This ensures that all technicians have to leave the danger zone before electricity can be restored. The example can easily be extended to a n-out-of-n system. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2.">Using Visual Cryptography</head><p>In 1994, M. Naor and A. Shamir proposed the visual cryptography <ref type="bibr" target="#b8">[9,</ref><ref type="bibr" target="#b15">16]</ref> for black and white images. This was improved in <ref type="bibr" target="#b16">[17]</ref> for gray images and in <ref type="bibr" target="#b17">[18]</ref> for color images.</p><p>The idea is to split a secret into two images printed on transparent paper in a way such that their superposition makes the secret appear. An example is given in fig. <ref type="figure" target="#fig_6">5</ref>. For color images, security cannot be perfectly achieved for more than 3 colors <ref type="bibr" target="#b18">[19]</ref>. In <ref type="bibr" target="#b19">[20]</ref>, the authors proposed a generalization of the approach to k-out-of-n images. This can be used as a first physical answer to Liu's problem. This solution is not really practical since it needs a computer to compute the different images. Moreover in <ref type="bibr" target="#b20">[21]</ref>, the authors show that it is possible to cheat in visual cryptography by introducing fake shares that change the result. This clearly shows that this solution is not verifiable, which requires the ability to check that shares are valid.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">A Novel Physical k out n Weighted Threshold Lock</head><p>As a natural extension of 1-out-of-n systems, we design a k-out-of-n physical threshold lock that uses n padlocks and works as follows. Each padlock secures one block, with a latch, attached to a sliding We also have built a wooden prototype that can be configured for different cases, see fig. <ref type="figure" target="#fig_8">6</ref> for a 2-out-of-3 configuration. In this example, on the top image, we have 3 padlocks attached to support of size l and the blocker is installed just after them on the initial configuration. The bar is installed in such a way that it over passes slightly more than the size of one padlock support on the right. In the left image, once one padlock and its support is removed then the bar can move to the left but not totally be removed. Finally, once two padlock supports are removed we can open the system.</p><p>Algorithm 1 k-out-of-n physical threshold lock Input: k n, n padlocks, n supports in wood of the same size l, a bar of wood of size at least (n + k -1) × l, a support of size l, and a blocker. Output: A k-out-of-n physical threshold padlock.</p><p>1: Distribute one individual key of one padlock to each of the n participants.</p><p>2: Lock the n padlocks on the n latches attached to wooden supports on the long wooden bar.</p><p>3: Install the blocker after the n padlocks. 4: Install the bar in the system in order that it over passes by slightly more than (k -1) × l (and not more than kl) the system general lock. fig. <ref type="figure">7</ref>, left, shows our prototype in a 2-out-of-4 configuration. The prototype can be configured for k-out-of-n systems for any k ∈ {1, 2, 3} and n ∈ {3, 4, 5, 6}. By moving the wooden block attached to the moving bar (red circle in fig. <ref type="figure">7</ref>, right) one can fix the number of blocks that can be attached, i.e., n. By moving the block on the right (blue circle in fig. <ref type="figure">7</ref>, right) one can fix the number of blocks that need to be removed before the bar can be opened, i.e., the threshold k: on the rightmost position, removing one block is sufficient to open the bar. When moving this block to the left one can increase the number of blocks that need to be removed before the bar opens. For convenience, in our prototype everything can be easily adjusted using screws, but obviously, in a real implementation, they need to be permanently fixed to ensure security. Fig. <ref type="figure">7</ref>. Left: Physical 2-out-of-4 threshold lock system; Right: configuring our prototype: the block in the red circle fixes the number n (here: 4), the block in the blue circle fixes the threshold k (here: 3). One can also see the holes that allow the block to be fixed in other positions.</p><p>Our technique can also be used to implement weights by using blocks of different sizes. fig. <ref type="figure" target="#fig_10">8</ref> shows an example where either one "master" key (opening the padlock on a larger block) can be used to open the lock, or any two of the other keys (opening the padlocks on the smaller blocks). The same idea can also be used to implement a policy where, e.g., either Alice and one other participant, or any three other participants are required to open the lock. It suffices to give Alice the keys for the larger block, and use a configuration that requires the removal of three small blocks to open.</p><p>Our system is ad-hoc since once it is set up, each participant can install their own lock, which avoids having to trust the dealer as in existing cryptographic solutions. Note that to avoid problems during the  setup phase, we assume that all participants install their locks at the same time, right after the lock has been set up.</p><p>Our solution is also reusable as it can be locked again, unlike for example a solution using cryptographic secret sharing to share a code for a combination lock, where the code would be revealed once and for all: such a lock thus cannot be effectively locked again without changing the code. Note that a system with a combination lock would also require a special procedure or a trusted third party to setup the combination initially. Moreover, our system also protects users against the daisy chain attack as only one padlock can be fitted to the latch of any block.</p><p>By construction our solution is verifiable since everyone can check if there is at least one padlock that can be opened with the secret key that he has received. Comparing to the mathematical solution proposed in <ref type="bibr" target="#b5">[6]</ref> consisting in giving extra information to each participant to convince him that he received a valid point of the polynomial, our solution does not require any extra material, nor does it require any trusted third party. There are thus at least three direct applications of our physical threshold system:</p><p>(1) Our system can be used to construct a physical verifiable secret sharing protocol. As it can also easily be extended to deal with weights, we also have a physical equivalent to the cryptographic protocol given in <ref type="bibr" target="#b21">[22,</ref><ref type="bibr" target="#b22">23]</ref>. (2) Threshold cryptography has been applied to voting, e.g., in <ref type="bibr" target="#b23">[24]</ref>. Our system can be used to secure physical pen and paper voting, by ensuring that the ballot box can only be opened if k-out-of-n trustees agree. (3) As a user never has to reveal his physical key, our mechanism can also be used to design a k-outof-n authentication mechanism.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">Formalization and Generic Bounds on the Number of Padlocks</head><p>We now establish bounds on the number of padlocks required to realize a certain threshold. We assume that padlocks are more expensive than keys, i.e., we will try to implement threshold systems with fewer padlocks, even if this means duplicating some of the keys. We define a padlock system to be any arrangement of padlocks protecting something. For the sake of simplicity, in the following, we consider this to be the possibility to "open a door". Definitions 1. A padlock is a device requiring a single key to be opened (keys can be duplicated). A padlock-system is a device comprising an arrangement of latches that prevents a door to be opened when some padlocks are attached to some of the latches. Definition 1. A k-threshold padlock system is a padlock system with an arrangement of padlocks and a distribution of keys that allows any group of k or more participants to open the door and prevents any group of strictly less than k participants to open it. Remark 1. While directly applicable to physical padlock systems, this definition also applies to some cryptosystems. For instance consider any symmetric or asymmetric cryptosystem with a shared (duplicated) decryption key. Closing a padlock could just be ciphering with an encryption key; setting a padlock-system could just be multiple encryption (even if electronic threshold cryptosystems are more complicated) and opening the door is deciphering. For this example, the only difference with physical system is that the order of encryption must be taken into account for decryption. Now, most of the lower bounds described in this section only suppose the existence of a threshold system satisfying the above definitions. Therefore those lower bounds also apply to electronic threshold cryptosystem satisfying definitions 1 and definition 1.</p><p>Definition 2. Let n be the number of players and k n be a threshold of players required to open the "door". Then k,n is the minimal number of padlocks, in any arrangement, allowing a k-out-of-n threshold opening of the door. Also, we define the rank of an arrangement of padlocks and keys as the maximal number of keys owned by any player.</p><p>For instance, we have that:</p><p>• 1,n = 1: one padlock with everybody having a copy of the same key is sufficient.</p><p>• k,n n: by our system described in section 3, see fig. <ref type="figure" target="#fig_8">6</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.">Sperner Families</head><p>Using the fact that all subsets of size k of the n participants can open the door, and no subset of k -1 or less can do it, we have the following results. First, it is easy to see that with only k -1 or fewer different locks, one cannot ensure a threshold of at least k.</p><formula xml:id="formula_0">Lemma 1. ∀k 2, k,n k.</formula><p>Proof. Suppose for k,n we have an existing threshold system where a minimum of k people is required to open the door, and moreover any subset of k people can open it. Suppose t = k,n k -1 and consider one group of k people able to open the door. For this, whatever the arrangement, they had to open some of the t padlocks, thus with at most t keys. This is less keys than the number of people, so there must exist a subgroup of at most t people owning these t keys and:</p><p>• Any of the k people must own at least one of the t keys, otherwise they are not required to open the cabinet and k -1 people are enough. • By induction on a subgroup of size 1 u &lt; t, an (u + 1)-th person, among the remaining ku, must own the key of one padlock not owned by the previous u, otherwise this person is not required and k -1 people are enough. Now, this subgroup of size at most t is thus able to open the door by themselves. But t k -1 &lt; k, is below the threshold, a contradiction.</p><p>Second, we see that if the set of keys of a participant is included in another participant's set of keys, intuitively the first participant is "useless" to achieve the threshold. Lemma 2. Let k 2, and set up an arrangement of padlocks and a distribution of keys with a k-out-of-n threshold opening. No participant can own a set of keys that is a subset of another participant's set of keys.</p><p>Proof. Let A have a set of keys included in that of B. As k 2, A and B can be in a size k subset of participants that can open the door. But then the keys of A are useless since B has all of them. Therefore there would be a size k -1 subset of participants able to open the door, a contradiction. This shows for instance that each participant must have at least one key. Further, this means that the sets of keys must form a family of inclusion-free subsets. This is called a Sperner family or a clutter <ref type="bibr" target="#b24">[25]</ref>. The padlocks can then be seen as the vertices of a hypergraph, where each participant is represented by a hyperedge, the set of its owned keys. The rank is then the maximal cardinality of a hyperedge. Then Sperner's Theorem combined with lemma 2, also gives the following lower bounds: ∀n, t and k 2, if</p><formula xml:id="formula_1">k,n = t then t t/2 n.</formula><p>Proof. By Sperner's Theorem <ref type="bibr" target="#b24">[25]</ref>, the size of any Sperner family with t elements is upper bounded by t t/2 . Distributing keys for t padlocks to n participants while satisfying lemma 2 thus requires</p><formula xml:id="formula_2">t t/2 n.</formula><p>∀n 1 and ∀t 2 even, if k 3 and k,n = t then t t/2 &gt; n.</p><p>Proof. By section 4.1, the only other possibility is n =</p><formula xml:id="formula_3">t t/2 = t t/2</formula><p>. But then the unique available Sperner family is that of all subsets of equal size t/2. In this family there exist pairs of subsets with an empty intersection. The union of these two subsets is thus of exactly t keys and must be able to open the door. Therefore the threshold cannot be larger than 2. We have thus now for instance the following results:</p><p>• n,n = n : use lemma 1 for the lower bound and our design for the upper bound.</p><p>• 2,3 = 3 and 2,4 = 4 : use lemma 3 for the lower bound and our design for the upper bound.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2.">Using O(log(n)) Padlocks for a Threshold of 2 with n Participants</head><p>Now we propose, in algorithm 2, an arrangement for a 2-out-of-n participants threshold system, using no more than n padlocks, and strictly less as soon as n 5. Indeed if the threshold is only 2, then it is possible to reduce the number of padlocks using our design. The idea is that whenever two participants have a distinct set of keys then both of them have a strictly larger set of keys than any of them taken separately.</p><p>fig. <ref type="figure" target="#fig_17">9</ref> shows our prototype in a 3-out-of-4 configuration. Now, using algorithm 2, this configuration can also be used to implement a 2-out-of-5 threshold system with only four padlocks by copying keys and distributing them in such a way that each participant has a distinct subset of keys (as stated in theorem 1). In this example, any two participants together will have at least three different keys, which suffices to open the 3-out-of-4 device. This shows that 2,5 = 4. Algorithm 2 Two-out-of-n threshold system with shared keys Input: n 2, and 1 i t n such that t i n.</p><p>Output: A 2-out-of-n threshold padlock system with t padlocks.</p><p>1: if t &lt; n then 2:</p><p>Set up an (i + 1)-out-of-t design of section 3;</p><p>3:</p><p>Create a total of i•n keys by copying the original t keys, such that there are n distinct subsets of i keys;</p><p>Since</p><formula xml:id="formula_4">t i n 4:</formula><p>Give each participant a distinct i-tuple of keys. Set up a 2-out-of-n design of section 3;</p><p>7:</p><p>Give each participant one of the n keys. 8: end if The correctness and the optimality of this schemme are proven by the series of results in this section. First, this scheme settles the small cases: Proof. For any n 3 and 2 k n the results where already proven in lemmas 1 and 3. There remains n = 4 and n = 5, our design providing the upper bound. The proof is done by contradiction.</p><p>Let t = k,n and suppose t n -1. Let s be the number of participants having a single key. These participants must have different single keys by lemma 2. The remaining ns participants must own at least 2 keys, but cannot own any of the first s keys, by lemma 2. Each set of keys of these remaining ns participants cannot be the full set of the remaining ts keys, again by lemma 2. Therefore, at least, the number δ s,t of distinct subsets of size at least 2 and at most ts -1 must be larger than ns (the requirement is that the size of the clutter, must be larger than ns, but in this clutter all the subsets must at least be distinct). This is:</p><formula xml:id="formula_5">δ s,t = t-s-1 i=2 t -s i n -s<label>(1)</label></formula><p>But, if t n -1 and n 4, then:</p><formula xml:id="formula_6">δ s,t n-s-2 i=2 n -s -1 i = 2 n-s-1 -1 -(n -s -1) -(n -s -1)<label>(2)</label></formula><p>Therefore, Equation ( <ref type="formula" target="#formula_5">1</ref>) cannot be satisfied whenever Equation ( <ref type="formula" target="#formula_6">2</ref>) is &lt; ns, that is:</p><formula xml:id="formula_7">2 (n-s)-1 &lt; 3(n -s) -1<label>(3)</label></formula><p>But Equation ( <ref type="formula" target="#formula_7">3</ref>) is true for ns ∈ {1, 2, 3, 4}. Yet ns &gt; 1, otherwise n -1 t s implies at most t = s = n -1, but then there remains no available key for the n-th participant. Hence, we have ns ∈ {2, 3, 4}.</p><p>For n = 4, if s ∈ {2, 1, 0} then Equation ( <ref type="formula" target="#formula_7">3</ref>) is satisfied thus we can dismiss those cases. Finally, there remains no value for s meaning that our hypothesis t n -1 is false.</p><p>For n = 5, if s ∈ {3, 2, 1} then Equation ( <ref type="formula" target="#formula_7">3</ref>) is also satisfied so we can dismiss those cases. There remains the case s = 0 for t = 4 (the case t = 3 is excluded by the fact that 3 2 = 3 &lt; 5). The 5 participants can thus only have 2 or 3 keys each (if one of them has the 4 keys he can open the door alone). If one of the 5 participants owns 3 keys K 1 , K 2 , K 3 then the other four must all own the fourth key K 4 (otherwise one of them will own only a subset of the first 3 keys, contradicting lemma 2). But then, excluding K 4 , these four remaining participants must have distinct non-included subsets of size 1 or 2 of the 3 keys K 1 , K 2 , K 3 , which is impossible. Therefore the rank of the arrangement is 2, that is, all 5 participants can only have 2 keys each. There are 4  2 = 6 possible pairs. W.l.o.g. suppose that only the pair K 3 , K 4 is not among the participants pairs.</p><p>Then two participants owns (K 1 , K 3 ) for one and (K 2 , K 4 ) for the other, so the two of them can open all the padlocks. This means that k 2. For k &gt; 2, we have a contradiction since no value s can be taken, leading to refute the hypothesis t n -1. Thus for n = 5 and k 3 we have k,n = n.</p><p>The remaining case, k = 2 is thus actually 2-out-of-5 threshold with at least 4 padlocks where every player owns exactly 2 keys. This is satisfiable as follows: use a 3-out-of-4 device with our design with 4 padlocks. Then provide the 5 users with distinct pairs of keys. Not a single user can open 3 padlocks. But with distinct pairs of keys all pairs of participants own at least 3 different keys.</p><p>Finally, algorithm 2 gives a solution as soon as t is such that t 2 n, while section 4.1 prevents any solution with t t/2 &lt; n. But with t = 4 and t = 5, t 2 = t t/2 . So the upper bound of algorithm 2 is also a lower bound. Now 4 2 = 6 and 5 2 = 10 give the maximal respective number of participants.</p><p>Second, we give an asymptotic estimate for larger cases: algorithm 2 makes it possible to implement a 2-out-of-n threshold padlock system with only 2 log 2 (n) padlocks and n log 2 (n) keys: Proposition 1. algorithm 2 correctly provides a 2-out-of-n threshold padlock system and for n 2, Proof. Consider an (i + 1)-out-of-t threshold system with t padlocks for t i n. Distribute i keys for each participant, such that all the hyperedges are distinct. This is possible as t i n. No single participant can open the device, but any two participants have different hyperedges of size i and thus have at least i + 1 distinct keys. This is enough to open the door and algorithm 2 is correct. Finally, t i (t/i) i , so we can for instance set i = log 2 (n) , so that each participant gets that many keys, and setup t = 2 log 2 (n) padlocks, as 2 log 2 (n) n.</p><p>For instance, the first case where triples are better than couples in algorithm 2 is for n = 16. As 6 2 = 15 and 7 2 = 21, with pairs the Algorithm would use 7 padlocks, where 6 are enough: setup a 4-out-of-6 device and give distinct triples of copies of the 6 keys to each of the 16 participants. This is possible as 6  3 = 20 <ref type="bibr" target="#b15">16</ref>. Then any pair of participants have at least 3 + 1 = 4 different keys and they can open our device. Overall, we have that the minimal number of padlocks for a 2-out-of-n threshold system is O(log(n)) with O(n log(n)) keys. Indeed, the lower bound is given in section 4.1, and it is realizable by algorithm 2. We thus have proven section 4.2.</p><p>For n 2, 2,n = min t, s.t.</p><formula xml:id="formula_8">t t/2 n .</formula><p>Proof. The lower bound is given by section 4.1. For the upper bound consider as in proposition 1 an ( t/2 + 1)-out-of-t threshold system with t padlocks and distribute t/2 keys to each participant, such that all the hyperedges are distinct. It is possible to directly obtain a 2-out-of-n padlock system with exactly 2 log 2 (n) padlocks and no external device. To see this, one can mix 2-out-of-2 devices and a 1-out-of-log 2 n. Then, remark first that daisy chains are 1-out-of-t devices and second that setting t padlocks on the same latch provides a t-out-of-t device. For the illustration purpose, we describe the alternative construction in two steps: first with devices, then without any device.</p><p>The first construction is as follows:</p><p>(1) Consider 2-out-of-2 devices, similar to those of fig. <ref type="figure" target="#fig_5">4</ref>, and take log 2 n of them; On each one of these 2-out-of-2 devices set two padlocks, one black and one white. This is 2 log 2 n distinct padlocks; (2) Attach these log 2 n devices to each latch of a 1-out-of-log 2 n device;</p><p>(3) Order the participants and give them a distinct number between 0 and 2 log 2 n . Then give each one of the participants log 2 n keys, following the binary digits of her number. On the one hand, if the i-th bit of her number is zero, then give her the key of the white padlock of the i-th 2-out-of-2 device; on the other hand, if the i-th bit of her number is one, then give her the key of the black padlock of the i-th 2-out-of-2 device. This is a total of 2n log  This is simple and does not require any additional device, apart from 2 log 2 n padlocks. Note that this usually uses more padlocks than algorithm 2. For instance, for a 2-out-of-8 system, the above method requires 2 * 3 = 6 padlocks and for a 2-out-of-10 system, it requires 2 * 4 = 8 padlocks, while section 4.2 uses only 5 padlocks for both cases as 5 2 = 10.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">Access Structures</head><p>In a secret sharing scheme, a datum d is broken into shadows which are shared by a set of trustees. The family {G ⊆ P : G can reconstruct d} is called the access structure of the scheme. A k-out-of-n scheme is a secret sharing scheme having the access structure {G ⊆ P : |G| = k} <ref type="bibr" target="#b25">[26]</ref>. In this section we show how to physically implement access structures defined by logic gates. Numeric solutions with interpolation usually use one evaluation point for each literal and one polynomial per clause. Our physical solution uses instead only one padlock for each distinct variable and one device per whole normal form.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1.">Towards a Padlock Algebra with One Device per Normal Form</head><p>A generalization of threshold schemes is to be able to implement any access scheme described by a logic formula. This is possible by implementing AND and OR gates, as shown in proposition 2 and algorithms 4 and 5, following <ref type="bibr" target="#b25">[26,</ref><ref type="bibr" target="#b26">27]</ref>. A first idea is to use chains so that opening a padlock actually frees a chain that can free several latches. Then a second idea is that 1-out-of-n systems are just like a disjunction while n-out-of-n systems are just like a conjunction. algorithm 4 shows how to generate a padlock system openable by any satisfiable realization of a disjunction with t clauses and n distinct variables. For this, a single 1-out-of-t device is set. It will open if any of the t conjunctive clauses is true. Associate each latch of the device to one conjunctive clause. Then associate one padlock for each variable. To simulate the subjection of a clause to a variable, each padlock closes a chain passing through each latch corresponding to a clause containing that variable (and thus preventing the opening of those latches if that padlock is not open).</p><p>fig. <ref type="figure" target="#fig_49">10</ref> gives an example of algorithm 4 on the logic formula</p><formula xml:id="formula_9">(A ∧ B) ∨ (A ∧ C) ∨ (B ∧ D) ∨ (E).</formula><p>Now for conjunctions, we instead use a t-out-of-t master structure and several other 1-out-of-k systems, one for each conjunction in the CNF, as shown in algorithm 5.</p><p>fig. <ref type="figure" target="#fig_25">11</ref> gives an example of algorithm 5 on the logic formula</p><formula xml:id="formula_10">(A ∨ B ∨ C) ∧ (D) ∧ (C ∨ E).</formula><p>Both algorithms 4 and 5 thus provide a way to build systems with a number of padlocks equal to the number of distinct variables in the normal form. This is proposition 2. Algorithm 4 Physical DNF with one padlock for each variable Input: A disjunctive normal form with t clauses and n variables. Output: A system with n padlocks, openable by any satisfiable realization of the normal form.</p><p>1: Set up a 1-out-of-t threshold system, with one latch for each clause; 2: For each variable present in the formula: pass a chain through the hole of each latch corresponding to a conjunction containing that variable; close that chain with one padlock.</p><formula xml:id="formula_11">E D C B A</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>1-out-of-4 (A &amp; B) | (A &amp; C) | (B &amp; D) | E</head><p>Fig. <ref type="figure" target="#fig_49">10</ref>. Algorithm 4 on a disjunctive normal form: one padlock closing one chain per term and a 1-out-of-4 device using a single latch for each clause, to realize</p><formula xml:id="formula_12">(A ∧ B) ∨ (A ∧ C) ∨ (B ∧ D) ∨ (E).</formula><p>Algorithm 5 Physical CNF with one padlock for each variable Input: A conjunctive normal form with t clauses and n variables. Output: A system with n padlocks, openable by any satisfiable realization of the normal form.</p><p>1: Set up a t-out-of-t threshold system; 2: Set up one 1-out-of-k i threshold system for each conjunctive clause with k i variables. Attach each 1-out-of-k i system to one of the t latches of the t-out-of-t system. 3: For each variable present in the formula: pass a chain through a free latch of each 1-out-of-k i system corresponding to a clause containing that variable; close that chain with one padlock.</p><p>Proposition 2. Any disjunctive or conjunctive normal form with t clauses, m distinct variables and no negation is realizable with m padlocks Proof. First for disjunctive clauses: they require one 1-out-of-t threshold system and m chains, as shown in algorithm 4. The "door" can be opened only by a satisfiable interpretation where TRUE means opening the padlock and FALSE means letting it closed.</p><p>Similarly one can create arrangements for conjunctive normal forms, also with as many padlocks as there are distinct variables as shown in algorithm 5.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2.">Further examples of logic formulae</head><p>In section 5, we show that any access scheme described by a logic formula without negation can be implemented using simple physical devices. In this section, we show some other constructions that can </p><formula xml:id="formula_13">k i &gt; 1), to realize (A ∨ B ∨ C) ∧ (D) ∧ (C ∨ E).</formula><p>simplify the use of algorithms 4 and 5 for normal forms. We also show how our physical methods can implement some formulae that are proven impossible with a single secret sharing scheme.</p><p>First, to implement algorithm 5 we need a 1-out-of-k i system for each clause. If this is simpler, one can always build such a system by composing small 1-out-of-2 systems. For instance fig. <ref type="figure" target="#fig_26">12</ref>, left, shows how to create one tree for each disjunctive clause as used in algorithm 5: assemble U-shaped metal rods. It is also possible to create a daisy chain of 1-out-of-2 devices like the one in fig. <ref type="figure" target="#fig_26">12</ref>, right. Now, second, we give examples of usage of all our devices and construction. For this we offer physical solutions for two examples, proven unrealisable using a single scheme. Indeed, <ref type="bibr" target="#b26">[27]</ref> shows that the two following cases cannot be solved if users must use the same system of shares:</p><formula xml:id="formula_14">(1) (A ∧ B) ∨ (C ∧ D) (2) (A ∧ B) ∨ (C ∧ D) ∨ (B ∧ C)</formula><p>However, with a physical system, we can implement such access schemes with somewhat less devices as we have physical tools to combine conjunctions and disjunctions:</p><p>• Conjunctions can be implemented with n-out-of-n systems as in fig. <ref type="figure" target="#fig_38">4;</ref> • Disjunctions can be implemented with 1-out-of-n systems as in figs. 2 and 3 or in section 3.</p><p>For the first formula: (A ∧ B) ∨ (C ∧ D), we report no improvements. One can implement algorithm 4 on this formula, and provide a physical solution: use a daisy chain of two 2-out-of-2 classical equivalent Remark 2. Finally, note that, with our novel design, proposition 2 is not optimal. Consider for instance the DNF with a single participant able to open the door or any two among five others:</p><formula xml:id="formula_15">A ∨ (B ∧ C) ∨ (B ∧ D) ∨ (B ∧ E) ∨ (B ∧ F) ∨ (C ∧ D) ∨ (C ∧ E) ∨ (C ∧ F) ∨ (D ∧ E) ∨ (D ∧ F) ∨ (E ∧ F).</formula><p>proposition 2 would require 6 padlocks and a 1-out-of-11 design. However, we can use theorem 1 and our design for a 3-out-of-4 lock with only 4 padlocks as described thereafter: set up a 3-out-of-4 design with 4 padlocks; give pairs of distinct keys to each participant B, C, D, E, F; give any three distinct keys to A.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3.">Knotted padlocks</head><p>A post on crypto.stackexchange.com by Ahle <ref type="bibr" target="#b27">[28]</ref> hints that one could create k-out-of-n threshold padlock systems using n padlocks and some wire.</p><p>His idea is to have the wire securing the door and going around the rings of the padlocks in a certain configuration. If a padlock is opened then it frees his part of the wire and potentially more from other padlocks. The example given is for a 1-out-of-2 system: "Say you have one wire to which the [door] is fastened and two padlocks. You want that if either of the locks are opened, the wire is completely freed. You do this This is a neat idea, which however turns out to not generalize easily to any k out of n system, though. First, associate a variable from a non-commutative group to each one of n padlocks. To simulate the opening of a padlock set this variable to 1, the neutral element of the group, seen multiplicatively. Suppose that this variable represents one clockwise wrapping of the wire and that the inverse of that variable represents the anticlockwise wrapping. Then, the sequential arrangement of the wrappings of the wire around the rings of the padlocks is a sequential multiplication of these variables and their inverses, just like a Knot group presentation.</p><p>For instance, if a clockwise wrapping is directly followed by an anticlockwise wrapping then this is useless and represented by xx -1 = 1 = x -1 x. Finally, if the door is opened when some padlocks are opened then it means that the multiplication of the variables is equal to 1 when the variables associated to the opened padlocks are set to 1. We will say that padlocks are knotted if there is a sequential wrapping of a wire around the rings of its padlocks.</p><p>On the one hand, we see that the equation aba -1 b -1 represents a generic OR gate: for the two padlock case, if one variable is set to 1, then either aba -1 b -1 = bb -1 = 1 or aba -1 b -1 = aa -1 = 1. This also generalizes to creating the OR of any independent subsystems: if X and Y are two equations for two knotted systems with distinct padlock sets, then XY X -1 Y -1 is the equation of the OR of these two systems.</p><p>If the equations are not independent, then some cancellations can occur. Consider for instance the formula a ∨ a; then aaa -1 a -1 is always 1 even if a is not open. Now, in order to prevent such cancellations, it is possible to surround a set of equations by an independent padlock and its inverse. Then no cancellation can happen. Even better, one can use a simple ring (this is a padlock that nobody can open) and wrap around it one way before the equation and the other way after the equation. For that simple ring, denote by one clockwise wrapping of the wire around it (and by -1 an anticlockwise wrapping). Note that the latch of the door, if any, could be used as this ring too. In any case, for instance, X Y -1 X -1 Y -1 -1 then represents a generic OR gate where the subsystems need not be independent. Indeed, if, and only if, any of X or Y is 1 then everything collapses.</p><p>On the other hand, to represent an AND gate between two independent padlock systems, then simply multiplying both equations suffices, in any order and with any inverse (i.e., independence ensures that XY, Y X, X -1 Y -1 , Y -1 X -1 , XY -1 , etc. all represent the conjunction). Similarly, one can enclose dependent subsets of padlocks with the simple ring .</p><p>For instance some access structures of the previous subsections can also be realized this way with one padlock per literal:</p><formula xml:id="formula_16">• (A ∧ B) ∨ (C ∧ D) can be represented by X = abcdb -1 a -1 d -1 c -1 ; • (A ∧ B) ∨ (C ∧ D) ∨ (B ∧ C) by X bc -1 X -1 c -1 d -1 -1 .</formula><p>There is a nice linear setup, for (n-1)-out-of-n threshold systems, as shown in lemma 4.</p><p>Lemma 4. The knotted padlock system, setup with with n padlocks and a wire, and wrapped 2n times, following the presentation x 1 x 2 . . .</p><formula xml:id="formula_17">x n x -1 1 x -1 2 . . . x -1</formula><p>n , is a (n-1)-out-of-n threshold padlock system.</p><p>Proof. Set any subset of size n-1 of the variables to 1, there remains x j x -1 j . For any subset of size n-2 or less, there would remain at least x i x j x -1 i x -1 j with i = j and the door is not freed. This setup actually is optimal as shown in lemma 5</p><p>Lemma 5. Let k 1 and n k + 1, A knotted padlock k-out-of-n threshold system, setup with with 1 padlock per participant and a wire, requires an even number of wrappings, and at least 2n of them.</p><p>Proof. Let a i be the number of wrappings around padlock i. Suppose that k participants not including i open their padlock. This is possible since n &gt; k. Then the system must be freed. Therefore, any clockwise wrapping around i must be accompanied by an anticlockwise one. This shows that a i = 2α i and that the total number of wrappings is even. Now suppose that there are no wrappings around padlock i. Then the participant i is useless in opening the system. This contradicts the notion of a threshold system. Finally, we have that a i = 0 and thus that a i 2. The total number of wrappings is thus larger than 2n.</p><p>By lemmas 4 and 5 we have an optimal linear knotted system for (n-1)-out-of-n threshold padlock systems. But, unfortunately, we have no simple candidate for other thresholds. Generic threshold system can be implemented with simple gates, but then they must use an exponential number of them <ref type="bibr" target="#b28">[29]</ref>. So this method of knotting the padlocks might not be directly practical. For instance, an exhaustive search of the 4 j=3 6 2 j = 1 726 272 formulas with 3 variables and their 3 inverses (since the number of terms must be even and larger than 2 * 3 by lemma 5), showed that no formula exists for a 1-out-of-3 threshold system with strictly less than 10 terms. The smallest one is thus a permutation of abcb -1 c -1 a -1 cbc -1 b -1 , with 10 wrappings.</p><p>For more generic thresholds we were only able to devise a solution with an exponential number of wrappings, as shown in algorithm 7, again loosing practicality for most of these knotted systems.</p><p>Algorithm 7 Knotted padlock threshold system Input: k 1, a wire and n k padlocks. Output: A k-out-of-n threshold padlock system with n knotted padlocks.</p><p>1: if k == n then 2:</p><p>return the wiring of all the padlocks together, with presentation x 1 x 2 . . . x n-1 . . .</p><formula xml:id="formula_18">x n . 3: end if 4: if k == n -1 then 5:</formula><p>return the wiring of all the padlocks together, with presentation x 1 x 2 . . .</p><formula xml:id="formula_19">x n x -1 1 x -1 2 . . . x -1 n . 6: end if 7: if k == 1 then 8:</formula><p>Recursively compute a presentation X for a 1-out-of-(n-1) system with the last n -1 padlocks; 9:</p><p>return the wiring of all the padlocks together, with presentation x 1 Xx -1 1 X -1 . 10: end if 11: Recursively compute a presentation X for a (k-1)-out-of-(n-1) system with the last n-1 padlocks; 12: Recursively compute a presentation Y for a k-out-of-(n-1) system with the last n -1 padlocks; 13: return the wiring of all the padlocks together, with presentation</p><formula xml:id="formula_20">x 1 X Y -1 X -1 x -1 1 Y -1 -1 .</formula><p>Theorem 2. Let k 1 and n 2, algorithm 7 is correct and requires a number of wrappings W(k, n) that satisfies: </p><formula xml:id="formula_21">• W(1, n) = 3 2 2 n -2; • W(n -1, n) = 2n;</formula><formula xml:id="formula_22">• W(n, n) = n; • For k ∈ [2..(n -2)], W(k, n) 3 2 2 n + 6.</formula><p>Proof. For the correctness, we look at the cases. If k = n then this is a n-out-of-n system. All padlocks are wired, one after the other a single time. Therefore no simplification can occur by opening padlocks. This means that all padlocks must be opened to free the system and that no strict subset of owners can open the system. The k = n -1 case is settled by lemma 4.</p><p>If k = 1. Then we proceed by induction. We have seen that a 1-out-of-2 system is indeed represented by a formula aba -1 b -1 . Now suppose that we have a presentation X valid for a 1-out-of-(n -1) system with n -1 padlocks. Then an additional participant, numbered 1, uses a new padlock and the overall presentation is</p><formula xml:id="formula_23">E = x 1 Xx -1 1 X -1 . If x 1 is opened then E = XX -1 cancels out. If any of x 2 , . . . , x n is opened then X cancels and E = x 1 x -1</formula><p>1 also cancels out. Therefore any participant alone can open the system. Conversely, the system does not collapse: by induction, first, neither X nor X -1 is 1 if no padlock is opened. Second x 1 and X are using independent sets of padlocks so no cancellation can occur between</p><formula xml:id="formula_24">x 1 X, Xx -1 1 , nor x -1 1 X -1 . Finally the generic case, with now E = x 1 X Y -1 X -1 x -1 1 Y -1 -1</formula><p>, is also handled by induction. k participants are either x 1 and k -1 others or k other than x 1 . In the first case, if x 1 and, by induction, X cancel out, then E = Y -1 Y -1 -1 = 1. In the second case, also by induction, Y cancels out and</p><formula xml:id="formula_25">E = x 1 X -1 X -1 x -1 1 -1 = 1.</formula><p>Therefore any k or more participants can open the system. Conversely, suppose only at most k -1 padlocks are opened. Then by induction, X can vanish, but not Y. Further, X can vanish only with the opening of at least k -1 padlocks. Therefore x 1 and X cannot vanish simultaneously. Thus either nothing vanishes or E has one of two forms,</p><formula xml:id="formula_26">E = X Y -1 X -1 Y -1 -1 , with non-vanishing X and Y, or E = x 1 Y -1 x -1 1 Y -1 -1</formula><p>, with non-vanishing x 1 and Y. In both cases, the system is not opened. We have proven that the system created by algorithm 7 is a k-out-of-n threshold system. Now for the complexity bound with n 2. Let W(k, n) be the number of wrappings for a k-out-of-n system created by algorithm 7. We have that W(2, 2) = 2, the AND gate, and W(1, 2) = 4, the OR gate. Next, for k = n, by the construction of Line 2, we have that W(n, n) = n. For k = n -1, by the construction of Line 5, we have that W(n -1, n) = 2n. For k = 1, by the construction of Line 9, we have that</p><formula xml:id="formula_27">W(1, n) = 2(1 + W(1, n -1)). This is W(1, n) = ( n-2 i=1 2 i ) + (2 n-2 W(1, 2)) = 3 2 2 n -2. Otherwise, we have that n 4 and k ∈ [2..(n -2)].</formula><p>There, we first show by induction that W(k, n) satisfies:</p><formula xml:id="formula_28">W(k, n) 2 n-k . (<label>4</label></formula><formula xml:id="formula_29">)</formula><p>Indeed, this is true for both</p><formula xml:id="formula_30">W(2, 2) = 2 2 2-2 and W(1, 2) = 4 2 2-1 . Next, for k = n, W(n, n) = n 1 = 2 n-n ; for k = n-1, W(n-1, n) = 2n 2 = 2 n-(n-1) and for k = 1, W(1, n) = 3 2 2 n -2 2 n-1 . Otherwise, W(k, n) satisfies: W(k, n) = 2(3 + W(k -1, n -1) + W(k, n -1)).</formula><p>(</p><formula xml:id="formula_31">)<label>5</label></formula><p>Thus by induction and eq. ( <ref type="formula" target="#formula_31">5</ref>), we can lower out the two recursive calls, and have that W(k, n)</p><formula xml:id="formula_32">2(3 + 2 n-1-(k-1) + 2 n-1-k ) 2 n</formula><p>-k and eq. ( <ref type="formula" target="#formula_28">4</ref>) is proven.</p><p>Then, second, we refine this analysis by lowering W(k, n -1) in eq. ( <ref type="formula" target="#formula_31">5</ref>) with eq. ( <ref type="formula" target="#formula_28">4</ref>). This gives</p><formula xml:id="formula_33">W(k, n) 2(3 + W(k -1, n -1)) + 2 • 2 n-1-k .</formula><p>Then we recurse for W(k -1, n -1), to obtain that: </p><formula xml:id="formula_34">W(k, n) 2(3 + 2(3 + W(k -2, n -2) + 2 n-2-k )) + 2 n-k = (6 k-2 i=0 2 i ) + 2 k-1 W(1, n -k + 1) + 2 n-k (k -1) = 6(2 k-1 -1) + 2 k-1 ( 3 2 2 n-k+1 -2) + 2 n-k (k -1) = 3 2 • 2 n + 2 k+1 -6 + 2 n-k (k -1)</formula><p>. This concludes the proof, using the fact that 2 k+1 + 2 n-k (k -1) -6 6 for k 2 and n -2 k.</p><p>To realize this solution in practice, one could for instance to use a high security cable seal: once fastened the wire cannot be taken out of the seizing device, see fig. <ref type="figure" target="#fig_38">14,</ref><ref type="figure">left</ref>. Before closing the seal, wrap it around the door latch clockwise; then install the k-out-of-n knotted padlock threshold system on the wire; finally wrap the wire around the door latch anticlockwise and then seal it. This is shown in fig. <ref type="figure" target="#fig_33">14</ref>  Remark 3. Unless k = n from the start, algorithm 7 will never encounter the case that the threshold equals the number of remaining participants. All the other cases perform exactly as many clockwise and anticlockwise wrappings. Therefore it is not mandatory to use a sealable cable. Any wire loop with a large enough part will do, for instance an already sealed cable. The setup is more cumbersome, but it is sufficient to pass a curl inside the latch or the ring to simultaneously wrap clockwise and anticlockwise.</p><p>Thus, we have another possibility for a k-out-of-n physical threshold system with exactly n padlocks. Unfortunately, we can make it work only with an exponential number of wrappings. For instance, algorithm 7 requires 279 038 initial wrappings for the 6-out-of-11 case. For now, the setup of this solution is therefore not really practical.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">Square Root Bounds for Threshold Systems</head><p>We now have tools to deal with larger thresholds. First we give a necessary condition for systems using less than n padlocks. Knotted designs are not needed, but some small access structure arrangements can help. For instance, we can show that our physical device is optimal when k is larger than √ 2n. For instance, we fully answer Liu's question about the smallest number of locks needed to implement a 6-out-of-11 threshold system: this is 11 padlocks. Then, the necessary condition, together with block design theory and our padlock algebra of section 5, enables us to build padlock systems with strictly less than n padlocks: for instance systems with only about 2.5</p><p>√ n padlocks for 3-out-of-n thresholds.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1.">A Necessary Condition and the Answer to Liu's Problem</head><p>We first begin with a necessary condition, analyzing the set difference cardinality of their sets of keys.</p><p>Proposition 3. ∀n and ∀k 3, if a k-out-of-n threshold system uses strictly less than n padlocks, then apart from participants owning the single key of a given padlock, the other participants must satisfy:</p><p>(1) The cardinality of their 2 by 2 set difference is bigger or equal to k -1;</p><p>(2) Each of them owns at least k distinct keys.</p><p>Proof. Apart from participants owning the single key of a given padlock, the others own only keys that are duplicated and owned by several users. In the following we say that these duplicated keys owned by several users are shared, and we identify any duplicated keys of the same padlock (we also thus say that shared keys are reused when we encounter the duplicate of an already used key). We thus consider the subgroup of participants owning only shared keys. First, let A, B, C be the sets of keys of three users from this subgroup, such that This would contradict the fact that we have a k-threshold system. So we can restrict the analysis to groups of people having sets of shared keys, with minimal 2 by 2 set difference cardinality larger than k -1.</p><formula xml:id="formula_35">(A \ B) ⊂ C; then (A ∪ B ∪ C) = (B ∪ C).</formula><p>Second, within such a group of participants owning only shared keys, suppose that one participant P owns a number i of distinct keys strictly lower than the threshold k. Then at least one of his keys cannot be reused. Otherwise there exists a group of i i participants owning the same keys as these i participants plus the initial one P. As i &lt; k, complete these i + 1 participants with ki -1 others. Those k participants can open the door, as well as the k -1 participants obtained when removing P from the group. This would contradict the fact that we have a k-threshold system. We have proven: to build a threshold system with strictly less than n padlocks, apart from participants owning the single key of a given padlock, the other participants must satisfy that both, their 2 by 2 set difference has more than k-1 keys and each of them owns at least k distinct keys.</p><p>We can now fully answer Liu's question with theorem 3, 6,11 = 11. The theorem also shows that our system is optimal for all k</p><formula xml:id="formula_36">√ 8n+1-1 2 . Theorem 3. k,n min n; k(k+1) 2 .</formula><p>Proof. For k = 2, lemma 3 gives the result. Now, for k 3, let G be the set of players only owning shared keys, let i be the number of these players and let t be the number of padlocks in a k-out-ofn threshold system. If i = 0, then n players own the single key of a padlock and t n. then that player has at least k new distinct and shared keys by proposition 3. Those shared keys are by definition not among the singly owned keys and thus</p><formula xml:id="formula_37">If i = 1,</formula><formula xml:id="formula_38">t = n -1 + k n. More generally, if i k, then t n -i + k n.</formula><p>Now for i &gt; k, one of the i players has at least k distinct, but shared, keys. Then the next participant has also all his shared keys not among the singly used, and at least k -1 keys not shared with the previous player (otherwise their set difference is not larger than k -1). More generally, let B 1 , . . ., B h and A be the sets of keys of h + 1 distinct members of G, with h k. Let B = h j=1 B j and let |A \ B| = d. Those d keys are shared (as all the keys in A) and, therefore, there exist d d other participants with sets of keys C j such that</p><formula xml:id="formula_39">(A \ B) ⊂ d j=1 C j . Let C = d j=1 C j , then A ∪ B ∪ C = B ∪ C. But then 1 + h + d &gt; k:</formula><p>otherwise a group of k participants has the same set of keys as a group of k -1. In other words, we have shown that d &gt; k -1h, or more precisely that d kh (and thus d kh as d d ). Therefore, up to the k-th person in group G (a group of i participants with i &gt; k), each person must have at least k-h keys not in the sets of the h previous ones. Since i &gt; k, this is at least k+k-1+ k h=2 (k-h) = k(k+1)/2 keys. Then we have that the total number of keys satisfies t ni + k(k + 1)/2 k(k + 1)/2.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2.">Packings, Johnson Bound and a 3-threshold Realization for up to 12 Participants with only 9 Padlocks</head><p>A sufficient condition to satisfy proposition 3 for a 3-threshold system with less than n padlocks is that a given pair of keys is never given to more than one person. Indeed, then, two persons never share a pair of keys and thus if they each own more than two keys, then their set difference is at least</p><formula xml:id="formula_40">2 = k -1.</formula><p>This is thus sufficient for such a system to contain a (2, 1)-packing, as defined thereafter:</p><p>Definition 3 (See e.g., <ref type="bibr" target="#b29">[30]</ref>). Let t, k, and p be integers with t &gt; k &gt; p 2. Let λ be a positive integer. A (p, λ)-packing of order t, and blocksize k is a set V of t elements, and a collection B of k-element subsets (blocks) of V, so that every p-subset of V appears in at most λ blocks.</p><p>With this, we have Johnson's bound <ref type="bibr" target="#b30">[31]</ref>, that states that a maximal packing has a number of blocks upper bounded by:</p><formula xml:id="formula_41">t k t -1 k -1 .<label>(6)</label></formula><p>Equation ( <ref type="formula" target="#formula_41">6</ref>) then suggests that systems with t = O(k √ n) padlocks might be possible. Unfortunately, proposition 3 is probably not sufficient itself: it might be possible to fulfill its conditions while still having some set of players of size strictly lower than k having the same set of keys as some set of players of size k. However, we can at least prove that for k = 3 we can always use Steiner triad systems to build 3-threshold systems. A Steiner triad system is a (2, 1)-packing with blocksize 3. In other words, it is a pair of sets such that every pair of elements of the first set appears together in a unique triad (or a triangle, or a triplet) of the second one <ref type="bibr" target="#b31">[32]</ref>. As a consequence, it is possible to build a 3-threshold padlock system with only O( √ n) padlocks:</p><p>(1) in a Steiner triad system for a set of keys, no pair of keys is shared by two triads; therefore giving a triad of keys to each player will satisfy the necessary proposition 3; (2) then, the following proposition 4 shows that for the particular case of k = 3 this is also sufficient; (3) finally, with Johnson's bound, a Steiner triad system with t = O( √ n) will have sufficiently many triads to give one to each of the n players. Proposition 4. Any Steiner triad system gives rise to a 3-threshold system.</p><p>Proof. By construction, a Steiner triad system satisfies the necessary condition of proposition 3. Second, in order to use it as a 3-threshold system, we need to differentiate triples of triads from pairs of triads (as a two participants should not be able to open the door, but three participants should). On the one hand, all triples that have 7, or more, distinct values all together, cannot be equated by pairs of triads. On the other hand, by the condition on pairs of elements being uniquely found in a single triad, triples of triads have at least 6 distinct values overall. So the only remaining case is to prove that the 6 distinct values of triples of triads with only 6 distinct values, in any construction, cannot be found in pairs of triads of the system.</p><p>To have only 6 distinct values, any two of the triple of triads must share one value, and the third one must share a value with each of the two others. W.l.o.g., this is triads (a, b, c); (a, d, e); (b, d, f ), with distinct values a, b, c, d, e, f . Now suppose that these 6 values are contained in a pair of triads. Then, among a, b, c, at least two of them must be in one of the pair. But by the unicity of triads containing a given pair this means that (a, b, c) is one of the pairs. The other pair must now be (d, e, f ). But the triad (a, d, e) is in the system so the pair (d, e) is shared by two different blocks. This is a contradiction and no pair of triads can share the 6 distinct values of a triple.</p><p>Finally, by setting up a minimal Steiner system for any number of players, for instance using a Bose construction <ref type="bibr" target="#b31">[32]</ref>, we have the following algorithm 8 to setup a 3-out-of-n system. This provides an upper bound of O( √ n) for the number of padlocks for such a system. How to open such a system is then described in algorithm 9. Proof. Any construction of a Steiner triad block design works. For instance, the Bose construction <ref type="bibr" target="#b31">[32]</ref> provides such a design for any t = 6ν + 3. It is given in lines 3 to 16 of algorithm 8. proposition 4 proves that these constructions can be used as 3-threshold systems: use a 7-out-of-t design and a large DNF with all the possible groups of 6 distinct values never attained by pairs of participants. Further, the Bose construction attain the bound of Equation ( <ref type="formula" target="#formula_41">6</ref>) for t = 6ν + 3 and k = 3, that is t/3(t -1)/2 = (2ν + 1)(3ν + 1). Thus for n players with n (2ν + 1)(3ν + 1) one can set up a Bose construction with t = 6ν + 3 and discard the blocks between n + 1 and t(t -1)/6. In other words, for a given n, use ν = √ 24n+1- <ref type="bibr">5 12</ref> and only t = 6ν + 3 padlocks. This proves that algorithm 8 is correct. To achieve the sometimes slightly better bound of the theorem, one needs to use the Steiner triad system construction by Skolem <ref type="bibr" target="#b32">[33,</ref><ref type="bibr">Lemma 2.5</ref>]. There use t = 6µ+1 and t /3(t -1)/2 = (6µ+1)µ n, so that now µ = √ 24n+1- <ref type="bibr">1 12</ref> and use t = 6µ + 1 padlocks. Without the ceilings, t = t , for any n.</p><p>But like this, t and t are alternatively slightly better than the other (a difference of 2 or 4).</p><p>Finally, fig. <ref type="figure" target="#fig_18">15</ref> summarizes our current knowledge on the example of n = 11.  Give the triad of keys &lt; a, b, 1 + c + dm &gt; to next player; Pass a chain through the hole of each latch corresponding to a conjunction containing that padlock;</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>27:</head><p>Pass the chain through the hole of one free latch of the 7-out-of-t device; 28:</p><p>Close the chain with that padlock. 29: end for 30: Attach the 7-out-of-t device to remaining latch of the 1-out-of-(h + 1) device.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.3.">3-threshold realizations with fewer than n padlocks</head><p>We give the smallest example realizing proposition 4: a 3-out-of-12 system (thus also a 3-outof-11 system), with only 9 padlocks, 36 keys and 82 latches, and an example using normal forms to reduce the number of latches for a 3-out-of-13 system with only 11 padlocks, 36 keys and 33 latches. Indeed, consider the first terms of Equation ( <ref type="formula" target="#formula_41">6</ref>) for k = 3 and t = 0, 1, 2, . . ., this is: 0, 0, 0, 1, 1, 3, 4, 7, 8, 12, 13, 18, 20, 26, 28, . . . <ref type="bibr" target="#b33">[34]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.3.1.">An example realization of algorithm 8</head><p>The smallest t such that Equation ( <ref type="formula" target="#formula_41">6</ref>) is strictly larger than t is for t = 9 with a bound of 12 subsets. Hence, packing with 9 padlocks is realizable, for instance with the Steiner triads of keys given in table <ref type="table" target="#tab_1">1</ref>.  By inspection, there are 72 triples of triads (so 3 participants owning each 3 keys) with only 6 distinct keys (for instance the triads &lt; 1, 2, 3 &gt;, &lt; 1, 4, 8 &gt;, &lt; 2, 4, 7 &gt;). The 148 other triples of triads have at So, by luck, the following construction realizes a 3-threshold system for 13 participants with 11 padlocks. We need a 7-out-of-11 device as well as a 6-out-of-11, a 5-out-of-7 and a 3-out-of-4 of our designs. Finally a classical 2-out-of-2 device is needed for the AND part. All of these are organized as follows, in order to realize the formula of Equation <ref type="bibr" target="#b6">(7)</ref>.  <ref type="table">2</ref>. On the one hand, any 3 participants have either at least 7 distinct keys or if they have only 6 keys then they have at least 5 for padlocks numbered 1 to 7 or at least 3 for padlocks numbered 8 to 11. On the other hand, no pair of participants has a total of 6 distinct keys and either 5 of the first seven ones or 3 for the last four ones.</p><p>Each of the eleven padlocks is used once to close a chain as in algorithm 4. For each padlock its associated chain will go through the hole of each of up to the four devices (the devices <ref type="bibr" target="#b6">(7,</ref><ref type="bibr" target="#b10">11)</ref> and <ref type="bibr" target="#b5">(6,</ref><ref type="bibr" target="#b10">11)</ref> have each 11 latches so are linked to all the padlock; while device (5, 7) is for the padlocks numbered 1 to 7 and device <ref type="bibr" target="#b2">(3,</ref><ref type="bibr" target="#b3">4)</ref> is for the padlocks numbered 8 to 11). This will realize the disjunctions OR in Equation <ref type="bibr" target="#b6">(7)</ref>. Finally, the disjunction of the devices (5, 7) and (3, 4) is linked via a chain, and that together with the (6, 11) device are associated via a 2-out-of-2 device, as in algorithm 5. The whole system is shown in fig. <ref type="figure" target="#fig_44">16</ref>. Overall, it requires fewer padlocks, but quite a bunch of other devices.</p><p>The same system works also for a 3-threshold realization for 12 participants with 11 padlocks. Just use the 12 first triads of keys of table 2 with the same system. Yet this solution uses more padlocks than algorithm 8.</p><p>fig. <ref type="figure" target="#fig_45">17</ref> summarizes what we know for 3-out-of-n systems. We see that for a threshold of three the minimal number of padlocks is in between O(log(n)) and O( √ n).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.">A recursive asymptotic construction</head><p>For a larger number of participants, asymptotically, one can reduce the number of padlocks by making subgroups. For instance, consider building a 3-out-of-n system. Create two subgroups G and H of n 0 = n 2 and n 1 = n 2 participants. Setup a 3-out-of-n 0 system for the participants of the subgroup G. Then duplicate all the distributed keys and give them to the members of subgroup H, except potentially for the one supernumerary member of subgroup G. Then any 3 participants all in one of the two subgroups can open the system. Only some triads where one participant is in one subgroup, and the two others in the other subgroup, cannot open the system yet. But then, for these cases, we can build a conjunction of a 1-out-of-n i system with a 2-out-of-n 1-i system. Any triad of participants are either in a single subgroup  </p><p>To count the number of keys and padlocks, we first need Faulhaber's formula:</p><formula xml:id="formula_43">s j=1 j k = 1 k + 1 s k+1 + O s k<label>(9)</label></formula><p>Then we need the following formula: Finally, we need the following variant of the master theorem.</p><formula xml:id="formula_44">i k=0 (-1) i-k i k 1 i -k + 1 = 1 i + 1 i k=0 (-1) i-k i + 1 k = 1 i + 1 -(-1) -1 i + 1 i + 1 + i+1 k=0 (-1) i-k i + 1 k = 1 i + 1 (1 + (1 -1) i+1 ) = 1 i + 1 .<label>(10)</label></formula><p>Lemma 6. For n ∈ N and i ∈ N * , let T (n) be a function defined by the recurrence T</p><formula xml:id="formula_45">(n) = T ( n/2 ) + c log 2 n 2 i + o log(n) i . Then T (n) = c i+1 log 2 (n) i+1 + o log(n) i+1 .</formula><p>Proof. Expanding log 2 (n) times the recurrence, we obtain:</p><formula xml:id="formula_46">T (n) = T (1) + log 2 n j=1 c log 2 n 2 j+1 i + o log n 2 j i = c log 2 n j=1 i k=0 (-1) i-k i k log 2 (n) k j i-k + o log(n) i = c i k=0   (-1) i-k i k log 2 (n) k log 2 n j=1 j i-k   + o log(n) i<label>(11)</label></formula><p>Using Equation ( <ref type="formula" target="#formula_43">9</ref>), with s = log 2 (n), this is:</p><formula xml:id="formula_47">T (n) = c i k=0 (-1) i-k i k log 2 (n) k 1 i -k + 1 log 2 (n) i-k+1 + O log(n) i = c log 2 (n) i+1 i k=0 (-1) i-k i k 1 i -k + 1 + O log(n) i<label>(12)</label></formula><p>Finally, with Equation (10), we have that:</p><formula xml:id="formula_48">T (n) = c i + 1 log 2 (n) i+1 + o log(n) i+1<label>(13)</label></formula><p>With these, we can now count padlocks and keys for the strategy with two subgroups of Equation ( <ref type="formula" target="#formula_42">8</ref>):</p><formula xml:id="formula_49">Lemma 7. For n 6, 3,n 2 log 2 (n) 2 + o log(n) 2</formula><p>and the upper bound is attained with an average of 1 2 log 2 (n) 2 + o log(n) 2 keys per participant.</p><p>Proof. To realize Equation (8) we need 1 padlock for T (1, n 0 ) and another one for T (1, n 1 ). We also need less than 2 log 2 (n 0 ) padlocks for T (2, n 0 ) and similarly 2 log 2 (n 0 ) padlocks for T (2, n 1 ), using proposition 1. finally, T (3, n 0 ) is realized recursively. Therefore the number of padlocks for T (3, n) satisfies P 3 (n) P 3 (n 0 )+2+4 log 2 (n/2)+O(1). Lemma 6 then gives Similarly the participants of subgroup G get 1 key for T (1, n 0 ) and log 2 (n 0 ) keys for T (2, n 0 ). The participants in the other subgroup get 1 key for T (1, n 1 ) and log 2 (n 1 ) keys for T (2, n 1 ). Then they each get the keys needed for T (3, n 0 ). Thus the average number of keys per participant satisfies K</p><formula xml:id="formula_50">P 3 (n) = 4 2 log 2 (n) 2 +o log(n) 2 .</formula><formula xml:id="formula_51">3 (n) K 3 (n/2) + 1 + log 2 (n/2) + O(1). Lemma 6 then gives K 3 (n) = 1 2 log 2 (n) 2 + o log(n) 2 .</formula><p>Now, this scheme can be generalized for any threshold k as shown in algorithm 10.</p><p>Algorithm 10 Recursive k-out-of-n threshold system with shared keys Input: n k 2.</p><p>Output: A recursively build k-out-of-n threshold padlock system. Let n 0 = n 2 and n 1 = n 2 ;</p><p>7:</p><p>Separate the participants in two groups G and H with n 0 and n 1 members;</p><p>8:</p><p>Recursively setup a k-out-of-n 0 system; 9:</p><p>Duplicate the keys of this system and distribute one set to members of G and the other set to members of H; Attach the k-out-of-n 0 system to one of the latches of the OR system; 12:</p><formula xml:id="formula_52">for i = 1..k -1 do 13:</formula><p>Setup a 2-out-of-2 AND system and attach it to the OR system 14:</p><p>Setup a i-out-of-n 0 system for members of the subgroup G and attach it to this AND system; 15: Setup a (ki)-out-of-n 1 system for members of the subgroup H and attach it to this AND system; 16: end for 17: return the OR system openable either via the k-out-of-n 0 system or via one of the (k -1) AND Systems. 18: end if Theorem 5. algorithm 10 is correct and asymptotically requires</p><formula xml:id="formula_53">2 k-1 (k-1)! log 2 (n) k-1 + o log(n) k-1 padlocks 1 (k-1)! log 2 (n) k-1 + o log(n) k-1 keys per participants (14)</formula><p>Proof. For the correctness, consider a group of at most k -1 participants. They cannot open the k-outof-n 0 system. Then they are distributed with j ∈ 0..k -1 of them in group G and k -1j in group H. They can thus open any of the T (α, n 0 ) for α = 0.. j, but none of the corresponding T (k -α, n 1 ) since k -α &gt; k -1j. They can also open any of the T (β, n 1 ) for β = 0..k -1j, but none of the corresponding T (k -β, n 0 ) since k -β &gt; j. So they can never open the system. On the contrary, consider a group of at least k participants. They are distributed with j ∈ 0..k in group G and at least kj Now, for the complexity bound, we proceed by induction on k n. The formulae are correct for k = 3 by lemma 7. Now suppose that the formulae are correct ∀i k and consider algorithm 10 at k + 1. Then the number of padlocks used by the Algorithm is P k+1 (n) = P k+1 (n 0 ) + k i=1 P i (n 0 ) + P k+1-i (n 1 ) and the average number of keys per participant is K k+1 (n) = K k+1 (n 0 ) + 1 2 k i=1 K i (n 0 ) + K k+1-i (n 1 ) . By the induction hypothesis, the number of padlocks thus satisfy:</p><formula xml:id="formula_54">P k+1 (n) P k+1 (n/2) + k i=1 2 i-1 (i -1)! log 2 (n/2) i-1 + 2 k-i (k -i)! log 2 (n/2) k-i + o log(n) k-1 =P k+1 (n/2) + 2 2 k-1 (k -1)! log 2 (n/2) k-1 + o log(n) k-1 ;<label>(15)</label></formula><p>and the number of keys satisfies:</p><formula xml:id="formula_55">K k+1 (n) K k+1 (n/2) + 1 2 k i=1 1 (i -1)! log 2 (n/2) i-1 + 1 (k -i)! log 2 (n/2) k-i + o log(n) k-1 =K k+1 (n/2) + 2 2 1 (k -1)! log 2 (n/2) k-1 + o log(n) k-1 .<label>(16)</label></formula><p>Finally, lemma 6, applied on both relations shows that:</p><formula xml:id="formula_56">P k+1 (n) = 2 k (k -1)!k log 2 (n) k-1+1 + o log(n) k<label>(17)</label></formula><formula xml:id="formula_57">K k+1 (n) = 1 (k -1)!k log 2 (n) k-1+1 + o log(n) k<label>(18)</label></formula><p>These establish that the hypothesis is true for k + 1. Therefore it is inductive and the theorem is proven.</p><p>Note that algorithm 10 is useful only for a large number of participants. For instance with a threshold of three, 2 log 2 (n) 2 is lower than theorem 4 only for n 33 922. This is overestimated, but, more precisely, the smallest case where algorithm 10 yields less padlocks than algorithm 8 is only at n = 1248. There, we have 63 padlocks for a 3-out-of-624 system with algorithm 8, then 12 padlocks for a 2-outof-624 system via algorithm 2. This is a total of 63 + 2(1 + 12) = 89 padlocks where algorithm 8 alone yields 91 padlocks. Now, for k = 4, and using theorem 4 when i = 3, the smallest case where algorithm 10 yields less than n padlocks is at n = 114. There, we have 57 padlocks for a 4-out-of-57 system, then 8 padlocks for a 2-out-of-57 system via algorithm 2 and 19 padlocks for a 3-out-of-57 system via algorithm 8. This is a total of 57 + 2(1 + 8 + 19) = 113 padlocks for a 4-out-of-114 system via algorithm 10.</p><p>8. Secret sharing with reduced field size Consider Shamir's secret sharing via interpolation over a finite field. For a secret value within a finite field F q , set it as the evaluation at zero of a degree k -1 polynomial whose other coefficient are randomly sampled. Then distribute an evaluation of the polynomial at distinct non-zero points to n participants. This is a k-out-of-n threshold system. It requires that there are enough evaluation points for all the participants and thus that q &gt; n.</p><p>We in fact have shown that this is optimal in certain cases, but that one can use smaller fields in others: instead of a degree k polynomial, use a degree t polynomial, where t is the number of padlocks in one of our systems. This number of padlocks t is in fact the number of available evaluation points. Then the identical keys for a given padlock are the evaluations of the polynomial at the points. Thus participants have several evaluations instead of a single one. We have thus proposed a k-out-of-n secret sharing scheme where the field size is reduced. For instance, from theorem 5, if n 2k, then it is sufficient to take the field size q = O log(n) k-1 .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9.">Conclusion</head><p>We designed a physical k-out-of-n threshold lock that can be used for various applications, including physical access control, voting or secret sharing. Our system only uses n padlocks, showing that previous exponential answers to Liu's problem were far too pessimistic. For k = 2, we were even able to identify an optimal solution using our device, which needs less than 2 log 2 (n) padlocks, but requires duplicating keys. We also show that for k √ 2n the minimal number of padlocks is n (and our device also reaches this).</p><p>There are many open questions left, for example we have shown that reducing the number of padlocks is equivalent to reducing the size of the fields for interpolation-based secret sharing, but further exploration of the links with digital systems could be envisioned. Another future work is to find minimal solutions in terms of padlocks for small cases, in particular for k between 3 and √ 2n. For instance, when k 3, Johnson's bound suggests that it might be possible to build systems with only O(k √ n) padlocks and we were able to prove this for k = 3.</p><p>We also devised algorithms that can implement more complex access policies beyond simple thresholds, expressed as disjunctive or conjunctive Boolean formulas. It is yet unclear for us whether there are general solutions using less locks than the number of variables.</p><p>We proposed one variant using sealed wire and wrappings to provide an alternative solution to our device with exactly n padlocks. The threshold systems we found with this approach unfortunately use an exponential number of wrappings. It is unclear to us if this could be improved.</p><p>Differently, on the asymptotic side, we have found an algorithm, recursively combining several of our devices, requiring only O log(n) k-1 padlocks for k-out-of-n threshold systems but we have only a lower bound of O(log(n)).</p><p>Finally, if we do not only count the number of padlocks, but more generally the number of keys or of latches, then clearly a lower bound on the number of devices is n: each player must at least have something. Otherwise groups of k players with an empty player would have the same abilities of a group </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig. 1 .</head><label>1</label><figDesc>Fig. 1. Physical 1-out-of-n padlocks, forming a daisy chain. Left: The simplest daisy chain with two padlocks. Right: A longer daisy chain with one useless padlock.</figDesc><graphic coords="4,306.11,534.85,156.54,113.38" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Fig. 2 .</head><label>2</label><figDesc>Fig. 2. Two ad-hoc physical 1-out-of-6 padlocks.</figDesc><graphic coords="5,148.94,232.22,217.41,141.73" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Fig. 3 .</head><label>3</label><figDesc>Fig. 3. Physical 1-out-of-5 padlocks, first by Everlock System, then by Tayhope multi-locking system.</figDesc><graphic coords="5,312.44,420.37,120.01,85.04" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Fig. 4 .</head><label>4</label><figDesc>Fig. 4. Physical 6-out-of-6 padlocks, by Seton (models SLECO and MANM8).</figDesc><graphic coords="6,163.00,272.65,96.37,85.03" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Fig. 5 .</head><label>5</label><figDesc>Fig. 5. Example of visual cryptography, superposing the images let the symbol π appear.</figDesc><graphic coords="6,324.52,483.93,51.02,51.02" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head></head><label></label><figDesc>is limited in its sliding movement by the blocks. If sufficiently many blocks are removed, the sliding bar can be moved far enough to open the barrier. In Algorithm 1, we describe our solution in a generic way.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Fig. 6 .</head><label>6</label><figDesc>Fig. 6. Physical 2-out-of-3 lock. Top: all three blocks attached, padllock closed. Left: one block removed, the bar can be moved to the left, but not sufficiently far to open. Right: two padlocks are removed, the barrier is open.</figDesc><graphic coords="7,92.18,302.07,204.08,95.58" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Fig. 8 .</head><label>8</label><figDesc>Fig. 8. Physical lock with weighted keys. Left: all blocks are attached and locked. Right: the "master" key was used to open the larger block, unlocking the barrier. Bottom: two "normal" keys opening normal blocks also allow to open the barrier.</figDesc><graphic coords="8,92.18,576.00,204.08,96.37" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_14"><head>Lemma 3 . 2 , 3 3</head><label>323</label><figDesc>and ∀n 4, 2,n 4. Proof. Suppose 2,n = 2. Then, if a single person has both keys, she can open both padlocks. Hence, whatever the arrangement of padlocks, she can open the door alone and k &lt; 2, a contradiction. Therefore nobody can have more than one key. As k = 2, then two persons are sufficient to open the door. They cannot have the same key by lemma 2. But with only 2 distinct keys and n 3 people, at least two persons must have the same key, a contradiction again. Overall, 2 padlocks are thus not enough. For instance, 2,3 3. Finally, for t = 3, section 4.1, shows that 3 1 = 3 n, thus ∀n 4, 2,n 4.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_16"><head></head><label></label><figDesc>5: else If t = n, set i = 1 and use directly our device of section 3 6:</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_17"><head>Fig. 9 .</head><label>9</label><figDesc>Fig. 9. Physical 3-out-of-4 threshold padlock system. Left: all locks closed. Right: device opened using 3 out of the 4 locks. Bottom: Example key distribution to achieve a 2-out-of-5 threshold system using only 4 padlocks and the 3-out-of-4 device.</figDesc><graphic coords="12,195.59,410.41,204.09,73.61" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_18"><head>Theorem 1 .</head><label>1</label><figDesc>∀n 5, ∀k 2, k,n = n, except 2,5 = 4. We also have 2,6 = 4 and ∀n = 7..10, 2,n = 5.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_21"><head>4. 3 .</head><label>3</label><figDesc>A Trick for 2-out-of-n Padlock System with Exactly 2 log 2 (n) Padlocks</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_22"><head></head><label></label><figDesc>2 n keys. Now each participant alone cannot open any latch (she owns only one of the two keys required for that), therefore she cannot open the door. Differently, any two participants have at least one bit, i, of difference. For this bit, the two of them thus have both keys of the i-th 2-outof-2 device. They can thus open it, thus open the 1-out-of-log 2 n device and open the door. This is overall a 2-out-of-n system. Now the second construction mimics the first one given above, but without any particular device. It is shown in algorithm 3.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_23"><head>Algorithm 3</head><label>3</label><figDesc>Two-out-of-n double daisy chain with only 2 log 2 n padlocks 1: Setup a daisy chain with log 2 n white padlocks; 2: For each white padlock, double it with a black padlock: that is form a daisy chain with double links; 3: Similarly, each participant receives log 2 n keys, white or black, according to the binary decomposition of her number. First, similarly, each participant alone cannot open the chain, as she cannot open any link, having only one of the two keys required to open one link. Second, similarly also, any two participants having different numbers have at least both keys of one double link and can open the chain and the door.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_25"><head>Fig. 11 .</head><label>11</label><figDesc>Fig. 11. Algorithm 5 on a conjunctive normal form: one padlock closing one chain per term and a 3-out-of-3 device using a single 1-out-of-k i device for each clause (if k i &gt; 1), to realize (A ∨ B ∨ C) ∧ (D) ∧ (C ∨ E).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_26"><head>Fig. 12 .</head><label>12</label><figDesc>Fig. 12. Left, a tree-like disjunctive clauses system by GateKeeper GM P6006 to combine 2, 3 or 4 locks; right, a physical 1-out-of-2 disjunction Model Cb2 by Sharelox.</figDesc><graphic coords="17,356.29,431.41,67.18,70.86" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_27"><head>Algorithm 6 Fig. 13 .</head><label>613</label><figDesc>Fig. 13. Algorithm 6 on (A ∧ B) ∨ (C ∧ D) ∨ (B ∧ C) with one padlock per variable (and not per literal in the formula).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_28"><head></head><label></label><figDesc>wire go first clockwise around [the ring of] the first [padlock], then clockwise around the second, then anticlockwise around the first and finally anticlockwise around the second. It can be thought of as aba -1 b -1 . If you remove either, the other cancels out. It generalizes to any k out of n padlocks".</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_33"><head>Fig. 14 .</head><label>14</label><figDesc>Fig. 14. Secure cable wire seal (left) and knotted padlock threshold system (right).</figDesc><graphic coords="22,109.49,286.26,141.72,113.38" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_35"><head></head><label></label><figDesc>More generally, suppose |A \ B| = d. Then these d keys are reused (as all the keys in A are shared keys). Thus there exist d d other participants with sets of keys C j such that (A \ B) ⊂ d j=1 C j . Let C = d j=1 C j , then A ∪ B ∪ C = B ∪ C. In other words, there is a group of d + 2 users with the same keys as a group of d + 1 users. Therefore d k -1 (and d k -1, as d d ): otherwise complete these d + 2 participants with k-d -2 others. Those k participants can open the door, as well as the k-1 participants obtained when removing A.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_38"><head>Theorem 4 .</head><label>4</label><figDesc>algorithm 8 is correct and</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_39"><head>Algorithm 8 6 √ 24n+1-5 12 + 3 padlocks. 1 : 2 : 4 :</head><label>8612124</label><figDesc>Bose Three-out-of-n threshold system with shared keys Input: n 2.Output: A 3-out-of-n threshold system with t = Let v = √ 24n + 1 -512, m = 2v + 1 and t = 6v + 3; Setup a 7-out-of-t threshold system; Bose construction<ref type="bibr" target="#b31">[32]</ref> 3: for x = 1..m do Give the triad of keys &lt; x, x + m, x + 2m to next player; 5: end for 6: for x = 1..m do 7: for y = 1..m do 8: for k = 0..2 do 9: a = x + km; 10: b = y + km;</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_40"><head>11 :</head><label>11</label><figDesc>c = ((x + y)2 -1 -1) mod m; 12: d = ((k + 1) mod 3); 13:</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_41"><head>Algorithm 9 2 : 4 :Fig. 15 .</head><label>92415</label><figDesc>Fig. 15. n=11: number of padlocks for known k-out-of-11 algorithms (only the points above the regions are attainable).</figDesc><graphic coords="27,151.77,294.87,308.16,164.16" type="bitmap" /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_44"><head>Fig. 16 .</head><label>16</label><figDesc>Fig.<ref type="bibr" target="#b15">16</ref>. A 3-threshold realization for 13 participants with 11 padlocks. Each participant owns 3 keys with the distribution of table 2. On the one hand, any 3 participants have either at least 7 distinct keys or if they have only 6 keys then they have at least 5 for padlocks numbered 1 to 7 or at least 3 for padlocks numbered 8 to 11. On the other hand, no pair of participants has a total of 6 distinct keys and either 5 of the first seven ones or 3 for the last four ones.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_45"><head>Fig. 17</head><label>17</label><figDesc>Fig. 17. k=3: number of padlocks for known 3-out-of-n algorithms (only the points below the algorithms lines and above the regions could use less padlocks).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_46"><head></head><label></label><figDesc>Fig. 17. k=3: number of padlocks for known 3-out-of-n algorithms (only the points below the algorithms lines and above the regions could use less padlocks). or in a one and two configuration and can open the system. Now any single or pair of participants cannot open the 3-out-of-n 0 system, nor both of the 1-out-of-n i and 2-out-of-n 1-i systems. Denote by T (3, n) the 3-out-of-n systems, we have thus proven that: ∀n 0 n 1 3, n 0 + n 1 = n, OR( T (3, n 0 ) ; AND (T (1, n 0 ) ; T (2, n 1 )) ; AND (T (2, n 0 ) ; T (1, n 1 )) ) ∈ T (3, n)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_49"><head>10 :</head><label>10</label><figDesc>Setup an 1-out-of-k OR system without padlocks nor keys; 11:</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_50"><head></head><label></label><figDesc>. Thus they can either open the k-out-of-n 0 system or one of the T ( j, n 0 ) AND T (kj, n 1 ) group.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1"><head>Table 1 A</head><label>1</label><figDesc>maximal (2, 1)packing of order 9 and blocksize 3. It has 12 blocks.</figDesc><table /></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2"><head></head><label></label><figDesc>1: if k == 2 then</figDesc><table><row><cell>2:</cell><cell>return algorithm 2.</cell><cell></cell></row><row><cell cols="2">3: else if k(k + 1)/2 n then</cell><cell></cell></row><row><cell>4:</cell><cell>return a k-out-of-n system with n padlocks.</cell><cell>theorem 3</cell></row><row><cell cols="2">5: else</cell><cell></cell></row><row><cell>6:</cell><cell></cell><cell></cell></row></table></figure>
			<note xmlns="http://www.tei-c.org/ns/1.0" place="foot" n="1" xml:id="foot_0"><p>A deliberate attack adding an additional chain and padlock to the gate, or even welding padlocks together, is always possible, and out of scope here: we aim to protect against attacks that could be "excused" with a wrong use of the system.</p></note>
		</body>
		<back>
			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><p>least 7 distinct keys (if a triple have a total of less than 5 distinct keys it would mean that at least two of them share a pair). But proposition 4 shows that none of the 72 sets of six keys obtained with three triads can be obtained with only a pair of triads (for instance the triple (1, 2, 3); <ref type="bibr" target="#b0">(1,</ref><ref type="bibr" target="#b3">4,</ref><ref type="bibr" target="#b7">8)</ref>; <ref type="bibr" target="#b1">(2,</ref><ref type="bibr" target="#b3">4,</ref><ref type="bibr" target="#b6">7)</ref> contains only the six distinct keys 1, 2, 3, 4, 7, 8, but no pair of triples contain the same set of keys). The latter ensures that no subset of 2 participants can unlock the door. Further, all these 72 sets of 6 keys are distinct.</p><p>Therefore, it is possible to set up a 3-out-of-12 system using only 9 padlocks. The idea of algorithm 8 is that either a group owns 7 distinct keys or it owns one of the 72 sets of 6 keys not reachable by a pair of participants. Overall, that solution uses 9 padlocks, 9 chains, 36 keys, a 7-out-of-9 and a 1-out-of-73 design (that is 9 + 73 = 82 latches). The following process gives the instance of algorithm 8 for this system:</p><p>(1) Set up 9 padlocks and make 4 copies of each key;</p><p>(2) Give 3 keys to each of the 12 participants following the packing of table 1;</p><p>(3) Set up a 1-out-of-73 design; (4) Set up a 7-out-of-9 design and attach it to one the latches of the 1 -73 design;</p><p>(5) Use algorithm 4 to complete the 72 other latches: pass a chain through the hole of each latch corresponding to a disjunction containing that key; close that chain with the associated padlock.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.3.2.">The bound of theorem 4 is not enough</head><p>Next, we give a small example where there exists a shortcut to use less latches than with the latter construction. We use some results of section 5 to help for the construction. For 13 participants, theorem 4 would provide a system with either 15 = 6 + 1 padlocks. This is already not better than 13 padlocks, directly attainable with our 3-out-of-13 device.</p><p>But we even show next a 3-threshold system for 12 or 13 participants with only 11 padlocks, 36 or 39 keys and only 5 additional devices for a total of 33 latches. We give in table 2, afterwards, a realization of a packing with 3-subsets. Then we proceed by inspection of the triples and pairs of triads of keys. There are 13  3 = 286 triples of triads and among them 56 have only 6 distinct keys. All the other triples have at least 7 distinct keys. Also, there are 13 2 = 78 pairs of triads and among them 24 have exactly 6 distinct keys. All the other pairs have at most 5 distinct keys. Further, on the one hand, all those 24 pairs contain no more and no less than 2 keys among 8, 9, 10, 11. On the other hand, among the 56 triples either they contain more than 3 keys among 8, 9, 10, 11 or their 6 distinct keys are lower than 7. This is summarized by Equation ( <ref type="formula">7</ref>). </p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">How to Share a Secret</title>
		<author>
			<persName><forename type="first">A</forename><surname>Shamir</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Commun. ACM</title>
		<imprint>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="issue">11</biblScope>
			<biblScope unit="page" from="612" to="613" />
			<date type="published" when="1979">1979</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">L</forename><surname>Liu</surname></persName>
		</author>
		<title level="m">Introduction to combinatorial mathematics</title>
		<meeting><address><addrLine>New York</addrLine></address></meeting>
		<imprint>
			<publisher>McGraw-Hill</publisher>
			<date type="published" when="1968">1968</date>
			<biblScope unit="page">393</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">The Design and Analysis of Computer Algorithms</title>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">V</forename><surname>Aho</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><forename type="middle">E</forename><surname>Hopcroft</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1974">1974</date>
			<publisher>Addison-Wesley Longman Publishing Co., Inc</publisher>
			<pubPlace>USA</pubPlace>
		</imprint>
	</monogr>
	<note>1st edn</note>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">The Art of Computer Programming</title>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">E</forename><surname>Knuth</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Seminumerical Algorithms</title>
		<meeting><address><addrLine>USA</addrLine></address></meeting>
		<imprint>
			<publisher>Addison-Wesley Longman Publishing Co., Inc</publisher>
			<date type="published" when="1997">1997</date>
			<biblScope unit="volume">2</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Verifiable Secret Sharing and Achieving Simultaneity in the Presence of Faults</title>
		<author>
			<persName><forename type="first">B</forename><surname>Chor</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Goldwasser</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Micali</surname></persName>
		</author>
		<author>
			<persName><forename type="first">B</forename><surname>Awerbuch</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 26th Annual Symposium on Foundations of Computer Science, SFCS &apos;85</title>
		<meeting>the 26th Annual Symposium on Foundations of Computer Science, SFCS &apos;85<address><addrLine>USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1985">1985</date>
			<biblScope unit="page" from="383" to="395" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">A Practical Scheme for Non-Interactive Verifiable Secret Sharing</title>
		<author>
			<persName><forename type="first">P</forename><surname>Feldman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 28th Annual Symposium on Foundations of Computer Science, SFCS &apos;87</title>
		<meeting>the 28th Annual Symposium on Foundations of Computer Science, SFCS &apos;87<address><addrLine>USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="1987">1987</date>
			<biblScope unit="page" from="427" to="438" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Threshold Schemes for Cryptographic Primitives: Challenges and Opportunities in Standardization and Validation of Threshold Cryptography</title>
		<author>
			<orgName type="collaboration">NIST</orgName>
		</author>
		<ptr target="https://csrc.nist.gov/Projects/threshold-cryptography" />
	</analytic>
	<monogr>
		<title level="j">Federal Register</title>
		<imprint>
			<biblScope unit="volume">69</biblScope>
			<biblScope unit="issue">8214</biblScope>
			<date type="published" when="2019">2019</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Threshold Cryptography</title>
		<author>
			<persName><forename type="first">Y</forename><surname>Desmedt</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Encyclopedia of Cryptography and Security</title>
		<editor>
			<persName><forename type="first">H</forename><forename type="middle">C A</forename><surname>Van Tilborg</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">S</forename><surname>Jajodia</surname></persName>
		</editor>
		<imprint>
			<publisher>Springer US</publisher>
			<date type="published" when="2011">2011</date>
			<biblScope unit="page" from="1288" to="1293" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Visual Cryptography</title>
		<author>
			<persName><forename type="first">M</forename><surname>Naor</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Shamir</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">EUROCRYPT &apos;94, Workshop on the Theory and Application of Cryptographic Techniques</title>
		<imprint>
			<date type="published" when="1994">1994</date>
			<biblScope unit="page" from="1" to="12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">System SLX</title>
		<author>
			<persName><surname>Everlock</surname></persName>
		</author>
		<ptr target="https://vimeo.com/180052349" />
		<imprint>
			<date type="published" when="2019">2019</date>
			<biblScope unit="volume">2</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">Multi-Locking Systems</title>
		<author>
			<persName><surname>Tayhope</surname></persName>
		</author>
		<ptr target="http://sancy.univ-bpclermont.fr/~lafourcade/VIDEOS/secu/tayhope_voiceover.mp4" />
		<imprint>
			<date type="published" when="2020">2020</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">Multiple padlock latch</title>
		<author>
			<persName><forename type="first">R</forename><surname>Mcneil</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">Multiple padlock lock system</title>
		<author>
			<persName><forename type="first">R</forename><surname>Mcneil</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2008">2008</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m" type="main">Multiple padlock locking device</title>
		<author>
			<persName><forename type="first">R</forename><surname>Mcneil</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2014">2014</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">Multiple padlock locking system</title>
		<author>
			<persName><forename type="first">R</forename><surname>Mcneil</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2015">2015</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Visual Cryptography II: Improving the Contrast Via the Cover Base</title>
		<author>
			<persName><forename type="first">M</forename><surname>Naor</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Shamir</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Security Protocols, International Workshop</title>
		<meeting><address><addrLine>Cambridge, United Kingdom</addrLine></address></meeting>
		<imprint>
			<publisher>Proceedings</publisher>
			<date type="published" when="1996">April 10-12, 1996. 1996</date>
			<biblScope unit="page" from="197" to="202" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Visual cryptography for grey level images</title>
		<author>
			<persName><forename type="first">C</forename><surname>Blundo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">D</forename><surname>Santis</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Naor</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Inf. Process. Lett</title>
		<imprint>
			<biblScope unit="volume">75</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="255" to="259" />
			<date type="published" when="2000">2000</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Visual cryptography for color images</title>
		<author>
			<persName><forename type="first">Y.-C</forename><surname>Hou</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Pattern Recognition</title>
		<imprint>
			<biblScope unit="volume">36</biblScope>
			<biblScope unit="issue">7</biblScope>
			<biblScope unit="page" from="1619" to="1629" />
			<date type="published" when="2003">2003</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">On the security of a visual cryptography scheme for color images</title>
		<author>
			<persName><forename type="first">B</forename><forename type="middle">W</forename><surname>Leung</surname></persName>
		</author>
		<author>
			<persName><forename type="first">F</forename><forename type="middle">Y</forename><surname>Ng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D</forename><forename type="middle">S</forename><surname>Wong</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Pattern Recognition</title>
		<imprint>
			<biblScope unit="volume">42</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="929" to="940" />
			<date type="published" when="2009">2009</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Constructions and Properties of k-out-of-N Visual Secret Sharing Schemes</title>
		<author>
			<persName><forename type="first">E</forename><forename type="middle">R</forename><surname>Verheul</surname></persName>
		</author>
		<author>
			<persName><forename type="first">H</forename><forename type="middle">C A</forename><surname>Van Tilborg</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Des. Codes Cryptography</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="179" to="196" />
			<date type="published" when="1997">1997</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Cheating in Visual Cryptography</title>
		<author>
			<persName><forename type="first">G</forename><surname>Horng</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName><forename type="first">D.-S</forename><surname>Tsai</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Des. Codes Cryptography</title>
		<imprint>
			<biblScope unit="volume">38</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="219" to="236" />
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Characterizing Ideal Weighted Threshold Secret Sharing</title>
		<author>
			<persName><forename type="first">A</forename><surname>Beimel</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Tassa</surname></persName>
		</author>
		<author>
			<persName><forename type="first">E</forename><surname>Weinreb</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Second International Conference on Theory of Cryptography, TCC&apos;05</title>
		<meeting>the Second International Conference on Theory of Cryptography, TCC&apos;05<address><addrLine>Berlin, Heidelberg</addrLine></address></meeting>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="2005">2005</date>
			<biblScope unit="page" from="600" to="619" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Ideal Hierarchical Secret Sharing Schemes</title>
		<author>
			<persName><forename type="first">O</forename><surname>Farras</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><surname>Padro</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Information Theory</title>
		<imprint>
			<biblScope unit="volume">58</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="3273" to="3286" />
			<date type="published" when="2012">2012</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">A simple publicly verifiable secret sharing scheme and its application to electronic voting</title>
		<author>
			<persName><forename type="first">B</forename><surname>Schoenmakers</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CRYPTO&apos;99</title>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="1999">1999</date>
			<biblScope unit="page" from="148" to="164" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Ein Satz über die Untermengen einer endlichen Menge</title>
		<author>
			<persName><forename type="first">E</forename><surname>Sperner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Mathematische Zeitschrift</title>
		<imprint>
			<biblScope unit="volume">27</biblScope>
			<biblScope unit="page" from="544" to="548" />
			<date type="published" when="1928">1928</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Multiple Assignment Scheme for Sharing Secret</title>
		<author>
			<persName><forename type="first">M</forename><surname>Ito</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Saito</surname></persName>
		</author>
		<author>
			<persName><forename type="first">T</forename><surname>Nishizeki</surname></persName>
		</author>
		<idno type="DOI">10.1007/BF02620229</idno>
	</analytic>
	<monogr>
		<title level="j">J. Cryptol</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="15" to="20" />
			<date type="published" when="1993">1993</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Generalized Secret Sharing and Monotone Functions</title>
		<author>
			<persName><forename type="first">J</forename><surname>Benaloh</surname></persName>
		</author>
		<author>
			<persName><forename type="first">J</forename><surname>Leichter</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CRYPTO&apos;88</title>
		<editor>
			<persName><forename type="first">S</forename><surname>Goldwasser</surname></persName>
		</editor>
		<meeting><address><addrLine>New York, NY</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1990">1990</date>
			<biblScope unit="page" from="27" to="35" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<monogr>
		<title level="m" type="main">K out of N encryption</title>
		<author>
			<persName><forename type="first">T</forename><forename type="middle">D</forename><surname>Ahle</surname></persName>
		</author>
		<ptr target="https://crypto.stackexchange.com/questions/2783/k-out-of-n-encryption" />
		<imprint>
			<date type="published" when="2012-08">2012. 08/01/2021</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Algebraic Methods in the Theory of Lower Bounds for Boolean Circuit Complexity</title>
		<author>
			<persName><forename type="first">R</forename><surname>Smolensky</surname></persName>
		</author>
		<idno type="DOI">10.1145/28395.28404</idno>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Nineteenth Annual ACM Symposium on Theory of Computing, STOC &apos;87</title>
		<meeting>the Nineteenth Annual ACM Symposium on Theory of Computing, STOC &apos;87<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>Association for Computing Machinery</publisher>
			<date type="published" when="1987">1987</date>
			<biblScope unit="page" from="77" to="82" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Covering and packing for pairs</title>
		<author>
			<persName><forename type="first">Y</forename><forename type="middle">M</forename><surname>Chee</surname></persName>
		</author>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">J</forename><surname>Colbourn</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><forename type="middle">C H</forename><surname>Ling</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">M</forename><surname>Wilson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Combinatorial Theory, Series A</title>
		<imprint>
			<biblScope unit="volume">120</biblScope>
			<biblScope unit="issue">7</biblScope>
			<biblScope unit="page" from="1440" to="1449" />
			<date type="published" when="2013">2013</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">A new upper bound for error-correcting codes</title>
		<author>
			<persName><forename type="first">S</forename><forename type="middle">M</forename><surname>Johnson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IRE Transactions on Information Theory</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="203" to="207" />
			<date type="published" when="1962">1962</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">On the construction of balanced incomplete block designs</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">C</forename><surname>Bose</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Annals of Eugenics</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="353" to="399" />
			<date type="published" when="1939">1939</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<monogr>
		<author>
			<persName><forename type="first">C</forename><forename type="middle">J</forename><surname>Colbourn</surname></persName>
		</author>
		<author>
			<persName><forename type="first">A</forename><surname>Rosa</surname></persName>
		</author>
		<title level="m">Triple systems</title>
		<imprint>
			<publisher>Oxford University Press</publisher>
			<date type="published" when="1999">1999</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<monogr>
		<title level="m" type="main">The On-Line Encyclopedia of Integer Sequences</title>
		<author>
			<persName><surname>Oeis</surname></persName>
		</author>
		<ptr target="https://oeis.org/A182079" />
		<imprint>
			<date type="published" when="2020">2020</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
