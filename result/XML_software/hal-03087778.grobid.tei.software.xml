<TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xml:space="preserve" xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main" />
			</titleStmt>
			<publicationStmt>
				<publisher />
				<availability status="unknown"><licence /></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
					</analytic>
					<monogr>
						<imprint>
							<date />
						</imprint>
					</monogr>
					<idno type="MD5">D8464C55119F9CE5058CBEB1CC29D15F</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.8.0" ident="GROBID" when="2024-03-21T10:25+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid" />
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract />
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div><head>INTRODUCTION</head><p>Many visual programming languages (VPLs) such as <ref type="bibr">Max [2]</ref> or <software ContextAttributes="created">PureData</software> <ref type="bibr">[3]</ref> provide a graphic canvas to allow developers to connect functions or data between them. This canvas with connected objects, also known as a patcher <ref type="bibr">[4]</ref>, is basically a graph, meant to be interpreted as dataflow computation [5] by the system. These visual languages are user-friendly as they seem closer to the way things work in our physical world, especially in the audio processing field. Connecting signal processors using audio cables to produce sounds and effects is a common practice even though we can now bring this practice to the digital world. This is one of the reasons for the design of the <software ContextAttributes="created">F AUST</software> programming language, that represents its <software ContextAttributes="created">code</software> with its patcher-like graph called block-diagram algebra (BDA) <ref type="bibr">[6]</ref>.</p><p>By adopting the BDA as the core of the language, the drawbacks of the graph representation and dataflow model <ref type="bibr">[7]</ref> are discussed mainly due to the complexity and difficulty on the performance optimization aspect and the lack of an explicit semantic of the algorithm written. As a result, <software ContextAttributes="created">F AUST</software> is designed to be closer to machine-friendliness. It is, in the end, a text-based language that can be represented as a BDA that is optimized and transformed into a high-performance low-level <software ContextAttributes="created">code</software>.</p><p>So, even if the BDA is "flattened" internally, the <software ContextAttributes="created">F AUST</software> <software ContextAttributes="created">code</software> is always represented by a graph that leaves the possibility to generate <software ContextAttributes="created">code</software> from an equivalent graph. To understand or design a DSP, a patcher or a block-diagram is often more illustrative for audio developers than mere source <software ContextAttributes="created">code</software>, the visual representation looks like electric/electronic diagrams and hides all the "plumbery," the developer does not have to master the details of the implementation language. In addition, some VPLs can group subgraphs into blocks and provide zoomable views of the diagram logic, making it easier to find errors. This is why we think that an editor for such diagrams would be a desirable addition/improvement to an Integrated Development Environment (IDE) for <software ContextAttributes="created">F AUST</software> <ref type="bibr">[8]</ref>. A graph-to-<software ContextAttributes="created">code</software> approach would help writing DSP algorithms, boosting the design while not impacting the performance.</p><p>Since Max and <software>PureData</software>, patcher-like VPLs are massively developed especially on the web. <software ContextAttributes="created">WebPd</software> is a web-based 1 <software ContextAttributes="created">PureData</software> patcher interpreter using JavaScript and the <software ContextAttributes="created">WebAudio</software> VPLs for audio processing. Still, using <software ContextAttributes="created">F AUST</software> as the graph-to-<software ContextAttributes="created">code</software> compilation target will bring as well the advantage of being able to export efficient and robust DSPs to any supported platform including Max, <software ContextAttributes="created">PureData</software> and <software ContextAttributes="created">WebAudio</software>.</p><p>Along with the development of the <software>F AUST</software> compiler, the presented work may be considered as a universal DSP design tool for many DSP platforms.</p><p>In the next sections, we will take a look at Gen, one of the 8 most popular existing graph-to-<software>code</software> generators for DSP, then discuss the possible implementations of <software ContextAttributes="created">F AUST</software> 's different features in a graph editor. Finally, we will propose a web-based application that implements the first version of the editor and the <software ContextAttributes="created">code</software> generator.</p><p>the GenExpr <software>code</software> is interpreted to a lower-level <software ContextAttributes="created">code</software> to get higher performance. The GenExpr <software ContextAttributes="created">code</software> that the system compiles to is available to users who can also write directly GenExpr <software ContextAttributes="created">code</software> as a part of the program. This makes the language rather similar to <software ContextAttributes="created">F AUST</software> and serves as inspiration. In the presented work, we follow certain paradigms from Gen to offer developers a consistent experience across platforms.</p></div>
<div><head n="2.1.">Inlets, Outlets, Inputs and Outputs</head><p>When a Gen patcher is compiled, the boxes and lines in the patcher are analyzed to generate the GenExpr <software ContextAttributes="created">code</software>. The boxes with different text on them represent different functions. They have a certain number of inlets and outlets as their function parameters and results (inputs and outputs). The text on the box can be followed by arguments to override its parameters and to suppress the inlets (Figure <ref type="figure">1</ref>). Unconnected inlets will be replaced by 0 while compiled.</p><p>Figure <ref type="figure">1</ref> Gen example: the "+" function has two inlets by default, one will be suppressed by adding an argument When a DSP diagram is built by a Gen patcher, it should have at least one output. Outputs are the starting points of the analysis. Inputs are involved in the <software ContextAttributes="created">code</software> generation only if a path from input to output can be found. Inputs and outputs are represented as boxes named in and out . For example, Figure <ref type="figure">2</ref> will be compiled to: out1 = in1 + in2; out2 = in2; out3 = 0;</p></div>
<div><head>Figure 2 Gen example: inputs and outputs</head><p>Figure 2 also shows that when two lines merge into one inlet, they will be added together. When two lines are coming from the same outlet, they will represent the same signal and be named identically in the <software>code</software>.</p></div>
<div><head n="2.2.">Subprocess and Identifiers</head><p>A Gen patcher can contain multiple Gen patchers or GenExpr <software ContextAttributes="created">code</software> blocks. They can be considered as reusable user-defined functions. This approach is similar to defining a reusable function in Faust. A sub-patcher in Gen will have the same number of inlets and outlets as the amount of in and out objects used; the <software ContextAttributes="created">code</software> block is also connectable when the <software ContextAttributes="created">code</software> is properly written and compiled. For example, the patcher in Figure <ref type="figure">3</ref> has one <software ContextAttributes="created">code</software> block and one sub-patcher that represent the same function. So, the resulting <software ContextAttributes="created">code</software> is: expr_1 = max(in1, in2); out1 = expr_1; max_2 = max(in1, in2); gen_3 = max_2; out2 = gen_3;</p><p>Figure <ref type="figure">3</ref> Gen example: sub-patcher and <software ContextAttributes="created">code</software> block</p><p>In this example, we also understand that each result of a function is named with an identifier formed by the concatenation of the name of the function or outlet, an underscore, and a unique number. These identifiers are thereby unique and will be reused if the result is passed to other functions. Although the system can add some redundancy, it allows the developer to easily find out the relation between the graph and the <software>code</software>.</p></div>
<div><head n="2.3.">Loops</head><p>Dealing with loops is a common and critical issue in DSP language design. In Gen, it is possible to create a loop only if a delay of at least one sample appears in the loop. The graph is similar to the block-diagram that a <software ContextAttributes="created">F AUST</software> recursive composition produces, which creates automatically a one-sample delay. Figure <ref type="figure">4</ref> is an example of simple feedback with a one-sample delay function history .</p></div>
<div><head>Figure 4 Gen example: a feedback with one-sample delay</head><p>The graph is compiled to the following <software>code</software>:</p><formula xml:id="formula_0">History history_1(0); add_2 = in1 + history_1; out1 = add_2; history_1_next_3 = fixdenorm(add_2); history_1 = history_1_next_3;</formula><p>The loop with the history object generates the <software>code</software> differently, as the delay is declared explicitly on the top, with an extra fixdenorm function to replace the denormal values by 0.</p></div>
<div><head n="2.4.">Explicit and Implicit</head><p><software>F AUST</software> is a functional language that can be used to build concisely a graph. This allows us to create new functions by chaining defined functions. However, once a new function is written, it becomes difficult to tell its exact number of inputs and outputs until the <software ContextAttributes="created">code</software> is compiled. The same implication happens when we compose blocks using operators: it is not possible to tell before compilation how each input and output are connected without deep information of blocks.</p><p>We chose to adopt in the work presented in this paper Gen's graph representation which is explicit in terms of I/Os and connections, as one inlet or outlet represents exactly one signal. This, on one hand, may raise some limitations when one needs to connect a large amount of I/Os or need to create a function with a variable number of arguments (like pattern-matching in <software ContextAttributes="created">F AUST</software> <ref type="bibr">[10]</ref>), but, on the other hand, brings an easily understandable graph that matches the block-diagram being compiled.</p></div>
<div><head n="3.">C OMPILE A G RAPH TO F AUST</head></div>
<div><head n="3.1.">Functions</head><p>Basically, in <software ContextAttributes="created">F AUST</software> , each block (or box in the graph) can be transformed into a f(x) expression (with some exceptions) <ref type="bibr">[11]</ref>.</p><p>The expression (prefix application syntax) is widely used in <software>F AUST</software> even for algebra symbols. As an example, a -b is equivalent to -(a, b) . This feature allows us to generalize the way a functional box can be transformed into <software ContextAttributes="created">F AUST</software> <software ContextAttributes="created">code</software>.</p><p>Table <ref type="table" target="#tab_0">1</ref> shows how we generate expressions from an unconnected, no-argument box with different numbers of I/Os.  The generation rules are:</p><p>1. Inlets and outlets are filled by 0 if not connected.</p><p>2. If the number of inlets is 0, which means the function has no input, then no parameter will appear in the <software>code</software>. 3. The outlets are named from the function name, box's unique identifier number and the outlet index. 4. If the function has multiple outputs, an intermediate expression will be generated before splitting to each outlet.</p><p>In Gen, the arguments attached after the function name in the box will be used to replace some function inputs by constant values.</p><p>To achieve this, we added more generation rules: 5. The arguments defined will be completely or partially applied to the beginning of available function inputs except for infix operators and their relatives. For these 14 11 <software>ma</software>.SR has 0 input, 1 output. 12 en.ar has 3 inputs, 1 output. 13 os.oscrq has 1 input, 2 outputs. 14 Functions that arguments are applied to the end of inputs in our implementation (the list is slightly different from Faust's infix operators): +, -, *, /, ^, %, &amp;, |, xor, @, &lt;, &lt;=, exceptions, the arguments will be applied at the end of the available function inputs. 6. The _ (also known as identity block ) is used in <software ContextAttributes="created">F AUST</software> to bypass a signal. We consider it as a placeholder in arguments to keep the inlet available.</p><p>Examples of unconnected boxes with arguments (Table <ref type="table">2</ref>):</p><p>Table <ref type="table">2</ref> Code generated from unconnected functional boxes with arguments text <software ContextAttributes="created">code</software></p><p>+ 1 Add_1_0 = +(0, 1); @ 10 Delay_1_0 = /(0, 10); en.ar _ 0.1 en_ar_1_0 = en.ar(0, 0.1, 0);</p><p>Now more rules about inlets: (Figure <ref type="figure" target="#fig_2">5</ref>) 7. If an inlet is connected by one line, the identifier of the related outlet will be assigned to the function input. 8. If connected by more than one line, the outlets related will be merged into one signal before being assigned to the function input. 9. Inlets are one by one assigned to function inputs from start, skipping which is already replaced by arguments.  For pattern-matching functions, the number of I/Os is variable. To make these functions usable in the graph, we allow setting the number of function I/Os explicitly using Gen's attribute syntax. For example, si.bus 5 @ins 6 @outs 5 declares that the function has 6 inputs and 5 outputs, then creates 5 inlets for the box as it already has one argument.</p></div>
<div><head n="3.2.">Main Process and Loops</head><p>The graph representation for loops in <software>F AUST</software> 's block-diagram or Gen is straightforward and intuitive. But compiling the graph to <software ContextAttributes="created">F AUST</software> code is problematic. Indeed, if the loop is on the same level as other functions, the graph of the loop (recursion) is determined by the available number of I/Os of the process within the loop. In <software ContextAttributes="created">code</software> generation, the recursive composition sign cannot be correctly placed unless the subprocess is compiled without any other loops. So, it is better to analyze these recursions with a higher priority and place them on an upper &gt;, &gt;=, &lt;&lt;, &gt;&gt;, ==, !=, pow, atan2, fmod, remainder, rdtable, rwtable.</p><p>This is an example of a parallel iteration which has 3 outputs (Figure <ref type="figure">10</ref>), the fourth outlet is the local variable. The par box will look for a graph above its first inlet to take as its sub-process. </p></div>
<div><head n="3.4.">UI Components</head><p>As <software ContextAttributes="created">F AUST</software> offers some primitives for UI description (checkbox, button, sliders, etc.), we implement them in the graph. Here is an example (Figure <ref type="figure">11</ref>):</p><p>Figure <ref type="figure">11</ref> Graph with UI descriptors</p><p>The graph is similar to a <software ContextAttributes="created">F AUST</software> block-diagram. The UI component name is optional. If omitted, it will be named using its box identifier. opens a considerable potential for the <software ContextAttributes="created">F AUST</software> ecosystem. For example. a ready-to-use JavaScript module named <software ContextAttributes="created">faust2</software>webaudio has been developed in 2019, which allows us to evaluate <software ContextAttributes="created">F AUST</software> DSP <software ContextAttributes="created">code</software> and to compile to <software ContextAttributes="created">WebAssembly</software>/<software ContextAttributes="created">WebAudio</software> <software ContextAttributes="created">code</software> that can run directly in a browser <ref type="bibr">[14]</ref>. Web and web browsers, thanks to their accessibility and their increasing performance, became an attractive environment to develop <software ContextAttributes="created">F AUST</software> -related tools.</p><p>Consequently, a modern web development tool-chain has been used to develop our editor, to ensure the efficiency of coding and compatibility across browsers.</p></div>
<div><head n="4.1.">Tool-chain</head><p>We are using TypeScript as our main development language 18 which provides an additional level of maintainability compared to JavaScript. It also supports multiple tools that we are working with: React, a framework we used mainly for the UI layer; </p></div>
<div><head n="4.2.">Data Structure</head><p>Inspired by Max and Gen's patcher structure, a patcher is basically an augmented graph with lines and boxes. They can be described in the form "Map" data structures: sets of key-value pairs (or more precisely key-objects). Their key/identifiers (IDs) are generated automatically using auto-incrementing numbers so that lines and boxes can be arranged by their creation order.</p><p>interface <software>Patcher</software> { lines: Record&lt;string, Line&gt;; boxes: Record&lt;string, Box&gt;; } Lines have some properties, such as their source and destination box. Boxes hold more information: number of I/Os, text content, position, dimensions, behavior, etc. The FaustOp object controls the lifecycle of the box: determines what to do when the box is created, connected, disconnected, destroyed, etc. It is also designed to output a part of <software ContextAttributes="created">F AUST</software> <software ContextAttributes="created">code</software> when requested. We will discuss this aspect in further subsections.</p><p>Patchers, lines, and boxes are all event emitters that fire different events when things happen. This mechanism allows us to separate them from the UI system in terms of data structure (loose coupling). UI components, since their creation, subscribe to these events to properly react to data changes. For example, each time the graph changes (is being edited), a new <software ContextAttributes="created">F AUST</software> <software ContextAttributes="created">code</software> will be generated (Figure <ref type="figure">12</ref>).</p><p>Figure <ref type="figure">12</ref> The generated <software ContextAttributes="created">code</software> can be previewed in real-time on the right panel (synchronized to the graph)</p></div>
<div><head n="4.3.">F AUST Standard Library Analysis</head><p>The <software>faust2</software>webaudio module which is included in the web version of the <software ContextAttributes="created">F AUST compiler</software> comes with the <software ContextAttributes="created">F AUST</software> 's standard library <software ContextAttributes="created">stdfaust.lib</software> .</p><p>[15] To use the functions from the library, we need to get a full list of available functions. All these library functions are well documented with a shared common format. To get a full list of available functions, a single traversal with a parser returns all the function names, and this result can be used both for syntax highlighting and for auto-completion in the <software>code</software> editor (also known as "IntelliSense features").</p><p>As the I/Os of these functions are implicit, the patcher needs to evaluate a function with the <software>F AUST compiler</software> to get their number of I/Os and to create box inlets and outlets. This is achieved by using a predefined method of <software ContextAttributes="created">faust2</software>webaudio .</p></div>
<div><head n="4.4.">Graph Analysis</head><p>Code generation is the main task of the presented system. It regenerates the <software>code</software> by analyzing the graph in real time. The analysis is performed from bottom to top, more precisely, from each out box as the root of the tree traversal. This first full traversal is meant to find out all the boxes that are connected in the graph and to name their outlets using a unique <software ContextAttributes="created">F AUST</software> identifier. A map is then created, that holds the relationship between lines and identifiers of their source outlet. Then a second traversal is performed: we call a method on all the boxes with the map as an argument, this method returns for each box the corresponding expression. These expressions are concatenated to the final <software ContextAttributes="created">code</software> without any particular order. Indeed, most of the time, the <software ContextAttributes="created">F AUST</software> compiler does not care about the order of expressions. For rare ones it does care, in an extra step, we locate them to the top of the <software ContextAttributes="created">code</software>.</p><p>As an example, here (Figure <ref type="figure">13</ref>) is a graph with one output.</p><p>Figure <ref type="figure">13</ref> Code generation steps example</p><p>Our first traversal brings back a map and visited boxes. The boxes are (Table <ref type="table" target="#tab_3">4</ref>): The map looks like that (Table <ref type="table" target="#tab_4">5</ref>): Then we get the expressions from the boxes. They are (Table <ref type="table" target="#tab_5">6</ref>): As <software ContextAttributes="created">ma</software>.SR generated a special expression import(...); that should be included only once in the final <software ContextAttributes="created">code</software>, we put it at the top.</p><p>Then we wrap the rest together with the main process using the out 's identifier: import("stdfaust.lib"); process = Out_1 with { ma_SR_3_0 = <software>ma</software>.SR; Const_4_0 = 1; Div_2_0 = /(Const_4_0, ma_SR_3_0); Out_1 = Div_2_0; };</p></div>
<div><head n="5.">C OMPILE A G EN P ATCHER TO F AUST</head><p>Since we are using the Gen approach to design the <software>F AUST</software> graph-to-<software ContextAttributes="created">code</software> compiler, it is, therefore, possible to parse a Gen patcher and compile it to the <software ContextAttributes="created">F AUST</software> <software ContextAttributes="created">code</software>.</p><p>To achieve this process, we implemented all the Gen operators with <software>F AUST</software> functions in a separate <software ContextAttributes="created">F AUST</software> library file <software ContextAttributes="created">gen2faust.lib</software> which will be imported as a dependency of the generated <software ContextAttributes="created">F AUST</software> <software ContextAttributes="created">code</software>. Using this library file, we can interpret Gen boxes as <software ContextAttributes="created">F AUST</software> expressions according to their box texts.</p><p>There are some differences in the interpretation of the box texts compared to the <software>F AUST</software> ones:</p><p>1. When Gen boxes are compiled to GenExpr, unconnected inputs can have their default value instead of 0. 2. Attributes (additional properties) can change the box's behavior. For example, the Gen cycle box has one input and two modes defined by the attribute @index . If the mode is set to freq , its input is 440 by default. We prepared two <software ContextAttributes="created">F AUST</software> functions cycle and cycle_phase for these two modes (Table <ref type="table" target="#tab_6">7</ref>). By implementing these features to the editor, we managed to transform some Gen patchers to the <software ContextAttributes="created">F AUST</software> <software ContextAttributes="created">code</software>. However, some Gen operators which manipulate Max buffers remain difficult to interpret as <software ContextAttributes="created">F AUST</software> 's audio import is not supported yet in the <software ContextAttributes="created">WebAssembly</software> version of the <software ContextAttributes="created">F AUST</software> compiler.</p></div>
<div><head n="6.">CONCLUSIONS</head><p>The traditional workflow, when developing DSP <software>code</software> with <software ContextAttributes="created">F AUST</software> , is firstly to have a graph in mind, then transform it into <software ContextAttributes="created">code</software>, then check if the <software ContextAttributes="created">code</software> matches the original graph by comparing it visually with the diagram output by the compiler.</p><p>The graph-to-<software>code</software> system presented in this paper sort of reverses this workflow: design graphically the graphic DSP algorithm, then generate the <software ContextAttributes="created">F AUST</software> <software ContextAttributes="created">code</software>. No need to check if the <software ContextAttributes="created">code</software> matches the graph anymore. In addition, for pedagogical purposes, it can help beginners to easily build their DSP from scratch and to understand how <software ContextAttributes="created">F AUST</software> works. Furthermore, thanks to modern web technology such as <software ContextAttributes="created">WebAssembly</software> and the <software ContextAttributes="created">WebAudio API</software>, we are able to compile, debug and run <software ContextAttributes="created">F AUST</software> DSP just-in-time in a web browser. This can transform our system into another more graphical oriented, online IDE-like tool. For the moment, there are still some features in <software ContextAttributes="created">F AUST</software> that are not yet implemented in the project; but, eventually, using such a patcher system, we will be able to manipulate between multiple <software ContextAttributes="created">F AUST</software> DSPs or even with other <software ContextAttributes="created">WebAudio</software>-compatible DSPs in a single workspace.</p><p>The graph editor with the <software>code</software> generator is being developed as an open-source project and is functional online with a video demonstration. It can save and load patchers as a JSON file.</p></div>
<div><head>26</head><p>Thanks to <software>faust2</software>webaudio and loose decoupling, it is possible to compile a graph file to <software ContextAttributes="used">F AUST</software> <software ContextAttributes="used">code</software> or to a <software ContextAttributes="used">WebAudio F</software> AUST DSP automatically without any UI involved. So, the system can be integrated into <software ContextAttributes="used">F AUST</software> IDEs or any <software ContextAttributes="used">WebAudio</software> applications such as the <software ContextAttributes="used">WASABI Pedalboard</software>. We are also developing a 27 web-based VPL for music composition and performance that use this project as its module.</p></div>
<div><head n="7.">R EFERENCES</head></div><figure xml:id="fig_1"><head /><label /><figDesc>.oscrq(0); os_oscrq_1_0 = os_oscrq_1 : _, !; os_oscrq_1_1 = os_oscrq_1 : !, _;</figDesc></figure>
<figure xml:id="fig_2"><head>Figure 5</head><label>5</label><figDesc>Figure 5 Graphs of Table3</figDesc></figure>
<figure xml:id="fig_3"><head>Figure</head><label /><figDesc>Figure 10 par iteration graph example</figDesc><graphic coords="6,120.85,146.37,94.58,78.82" type="bitmap" /></figure>
<figure xml:id="fig_4"><head /><label /><figDesc>hbargraph("monitor", -1, 1); Checkbox_7_0 = checkbox("Checkbox_7"); HSlider_8_0 = hslider("freq", 440, 20, 2000,  0.1compiler is available altogether with an IDE on the Web platform since 2015 [12, 13]. Recently, W3C Web standards such as WebAudio, WebMIDI, WebAssembly, 15 16</figDesc></figure>
<figure xml:id="fig_5"><head>19</head><label /><figDesc>Babel, a set of JavaScript compilation utilities to keep our code 20 runnable on different browser versions; Webpack, a production 21 tool that manages code dependencies, etc.For the UI components based on React, we are using the React version of Semantic UI for the overall look and feel; the 22 Monaco source code editor, SCSS for page layout design, etc. 23 24</figDesc></figure>
<figure type="table" xml:id="tab_0"><head>Table 1</head><label>1</label><figDesc /><table /><note><p>Code generated from unconnected functional boxes text <software /></p></note></figure>
<figure type="table" xml:id="tab_1"><head>Table 3</head><label>3</label><figDesc>Code</figDesc><table /><note><p>generated from connected functional boxes text code</p></note></figure>
<figure type="table" xml:id="tab_3"><head>Table 4</head><label>4</label><figDesc>Boxes visited    </figDesc><table><row><cell>box ID</cell><cell>box text</cell></row><row><cell>1</cell><cell>out 1</cell></row><row><cell>2</cell><cell>/</cell></row><row><cell>3</cell><cell>ma.SR</cell></row><row><cell>4</cell><cell>c 1 25</cell></row></table></figure>
<figure type="table" xml:id="tab_4"><head>Table 5</head><label>5</label><figDesc>Line map</figDesc><table><row><cell>line ID</cell><cell>F AUST code identifier</cell></row><row><cell>line-1</cell><cell>Div_2_0</cell></row><row><cell>line-2</cell><cell>ma_SR_3_0</cell></row><row><cell>line-3</cell><cell>Const_4_0</cell></row></table></figure>
<figure type="table" xml:id="tab_5"><head>Table 6</head><label>6</label><figDesc>Expressions generated</figDesc><table><row><cell>box text</cell><cell>expressions</cell></row><row><cell>out 1</cell><cell>Out_1 = Div_2_0;</cell></row><row><cell>/</cell><cell>Div_2_0 = /(Const_4_0, ma_SR_3_0);</cell></row><row><cell>ma.SR</cell><cell>import("stdfaust.lib"); ma_SR_3_0 = ma.SR;</cell></row><row><cell>c 1</cell><cell>Const_4_0 = 1;</cell></row></table></figure>
<figure type="table" xml:id="tab_6"><head>Table 7</head><label>7</label><figDesc>Compile Gen boxes</figDesc><table><row><cell>box text</cell><cell /><cell>expressions</cell></row><row><cell cols="2">cycle @index freq</cell><cell>cycle(440);</cell></row><row><cell>cycle phase</cell><cell>@index</cell><cell>cycle_phase(0);</cell></row></table></figure>
			<note place="foot" xml:id="foot_0"><p>Proceedings of the 2 nd International Faust Conference (IFC-20), Maison des Sciences de l'Homme Paris Nord, Saint-Denis, France,  December 1-2, 2020   </p></note>
			<note place="foot" n="6" xml:id="foot_1"><p>https://mosaicode.github.io/</p></note>
			<note place="foot" n="7" xml:id="foot_2"><p>https://www.jasonsigal.cc/portfolio/olos .</p></note>
			<note place="foot" n="8" xml:id="foot_3"><p>https://docs.cycling74.com/max8/vignettes/gen_overview</p></note>
			<note place="foot" n="9" xml:id="foot_4"><p>https://fr0stbyter.github.io/jspatcher/dist/?mode=faust</p></note>
			<note place="foot" n="10" xml:id="foot_5"><p>https://docs.cycling74.com/max8/vignettes/gen_genexpr</p></note>
			<note place="foot" n="15" xml:id="foot_6"><p>https://www.w3.org/TR/webmidi</p></note>
			<note place="foot" n="16" xml:id="foot_7"><p>https://webassembly.org/</p></note>
			<note place="foot" n="17" xml:id="foot_8"><p>https://github.com/grame-cncm/<software>faust2</software>webaudio</p></note>
			<note place="foot" n="18" xml:id="foot_9"><p>https://www.typescriptlang.org/</p></note>
			<note place="foot" n="19" xml:id="foot_10"><p>https://reactjs.org/</p></note>
			<note place="foot" n="20" xml:id="foot_11"><p>https://babeljs.io/</p></note>
			<note place="foot" n="21" xml:id="foot_12"><p>https://webpack.js.org/</p></note>
			<note place="foot" n="22" xml:id="foot_13"><p>https://react.semantic-ui.com/</p></note>
			<note place="foot" n="23" xml:id="foot_14"><p>https://microsoft.github.io/monaco-editor/</p></note>
			<note place="foot" n="24" xml:id="foot_15"><p>https://sass-lang.com/</p></note>
			<note place="foot" n="25" xml:id="foot_16"><p>c represents a constant value.</p></note>
		</body>
		<back>
			<div type="annex">
<div><p>level. As a result, these recursions are set aside and our main process will have a part of its I/Os dedicated to them.</p><p>For example, a process that has no input, 3 outputs and contains one recursion will be restructured as following (Figure <ref type="figure">6</ref>): We are now able to compile the following graph (Figure <ref type="figure">7</ref>): </p></div>
<div><head n="3.3.">Subprocess</head><p>Three subprocess design patterns are proposed: <software>code</software> in the graph, sub-patcher, <software ContextAttributes="created">F AUST</software> iterations.</p></div>
<div><head n="3.3.1.">Code Block</head><p><software>F AUST</software> offers several λ-function style syntaxes to facilitate the encapsulation of a subprocess. To integrate a separate <software ContextAttributes="used">F AUST</software> DSP into a new process, we need the environment{...} syntax to ensure its independence and use its main process as our subprocess. This approach causes fewer problems as the <software ContextAttributes="used">F AUST</software> compiler only allows using import syntax in a new environment.</p><p>The example below (Figure <ref type="figure">8</ref>) shows how to integrate an independent <software ContextAttributes="used">F AUST</software> <software ContextAttributes="used">code</software> into the graph. In this example, the patcher already evaluated the <software ContextAttributes="used">code</software> block to create two inlets and one outlet. </p></div>
<div><head n="3.3.2.">Sub-patcher</head><p>A patcher with outputs can be included in another patcher as a subprocess. We use <software>F AUST</software> 's with {...} expression which creates a local scope.</p><p>If we put the patcher of Figure <ref type="figure">8</ref> in a new patcher (Figure <ref type="figure">9</ref>): </p></div>
<div><head n="3.3.3.">Iterations</head><p><software>F AUST</software> offers four iteration functions: par, sum, prod and seq . Compared to other functions, they work with a variable that is local to their scope, which needs to be accessible in a local graph as a subprocess.</p><p>We propose a loop-like graph, using the same box to provide this scoped variable and to retrieve the sub-process graph. The iteration box will take from its inlet the sub-graph to repeat.</p></div>			</div>
			<div type="references">

				<listBibl />
			</div>
		</back>
	</text>
</TEI>