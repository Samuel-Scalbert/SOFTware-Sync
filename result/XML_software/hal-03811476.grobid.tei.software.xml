<TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xml:space="preserve" xsi:schemaLocation="http://www.tei-c.org/ns/1.0 https://raw.githubusercontent.com/kermitt2/grobid/master/grobid-home/schemas/xsd/Grobid.xsd">
	<teiHeader xml:lang="en">
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Should We Preserve the World's Software History, And Can We?</title>
			</titleStmt>
			<publicationStmt>
				<publisher />
				<availability status="unknown"><licence /></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author role="corresp">
							<persName><forename type="first">Roberto</forename><surname>Di</surname></persName>
							<email>roberto@dicosmo.org</email>
							<affiliation key="aff0">
								<orgName type="department">Software Heritage</orgName>
								<orgName type="institution" key="instit1">Inria</orgName>
								<orgName type="institution" key="instit2">Université Paris Cité</orgName>
								<address>
									<settlement>Paris</settlement>
									<country key="FR">France</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Should We Preserve the World's Software History, And Can We?</title>
					</analytic>
					<monogr>
						<imprint>
							<date />
						</imprint>
					</monogr>
					<idno type="MD5">F43833A9BD1081164281A156A8296508</idno>
					<idno type="DOI">10.1007/978-3-031-16802-4_1</idno>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<encodingDesc>
			<appInfo>
				<application version="0.8.0" ident="GROBID" when="2024-03-07T09:37+0000">
					<desc>GROBID - A machine learning software for extracting information from scholarly documents</desc>
					<ref target="https://github.com/kermitt2/grobid" />
				</application>
			</appInfo>
		</encodingDesc>
		<profileDesc>
			<abstract>
<div><p>Cultural heritage is the legacy of physical artifacts and intangible attributes of a group or society that a re inherited from past generations, maintained in the present and bestowed for the benefit of future generations.</p><p>What role does software play in it? We claim that software source code is an important product of human creativity, and embodies a growing part of our scientific, organisational and technological knowledge: it is a part of our cultural heritage, and it is our collective responsibility to ensure that it is not lost.</p><p>Preserving the history of software is also a key enabler for reproducibility of research, and as a means to foster better and more secure software for society. This is the mission of <software>Software</software> Heritage, a nonprofit organization dedicated to building the universal archive of software source code, catering to the needs of science, industry and culture, for the benefit of society as a whole.</p><p>In this keynote talk we survey the principles and key technology used in the archive that contains over 12 billion unique source code files from some 180 millions projects worldwide.</p></div>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div><head n="1">Introduction</head><p><software>Software</software> is incorporating an important part of our scientific, technical and industrial heritage.</p><p>If one looks closely, it is easy to see that the real knowledge that is contained in software is not in the executable programs, but in the "source code", which according to the definition used in the GPL, is "the preferred form for a developer to make a change to a program" <ref type="foot" target="#foot_0">1</ref> . Source code is a special form of knowledge: it is made to be understood by a human being, the developer, and can be mechanically translated into a form to be executed directly on a machine. The very terminology used by the computing community is telling: "programming languages" are used to "write" software. As Harold Habelson wrote as early as 1985, "programs must be written for humans to read, and only accessorily for machines to execute" 2</p><p>The source code of software is therefore a human creation in the same way as other written documents, and software developers deserve the same respect as other creators <ref type="bibr">[5]</ref>.</p><p><software>Software</software> source code is therefore a valuable heritage, and it is essential to work on its preservation. This is one of the missions of <software>Software</software> Heritage, an initiative launched in 2015 with the support of Inria and in partnership with UNESCO, to collect, organize, preserve and make easily accessible all publicly available source code on the planet, regardless of where and how it was developed or distributed.</p></div>
<div><head n="2">A Complex Task</head><p>Archiving all available source code is a complex task: as detailed in the article <ref type="bibr" target="#b0">[1]</ref>, different strategies are needed depending on whether one seeks to collect open or proprietary source code, and one does not treat source code that is readily available online in the same way as source code that resides on older physical media.</p><p>For open source code that is readily available online, the most appropriate approach is to build a harvester that automatically collects content from a wide variety of collaborative development platforms, such as <software>GitHub</software>, <software>GitLab.com</software>, or <software>BitBucket</software>, or from software package distribution platforms, such as Debian, NPM. <software>CRAN</software> or <software>Pypi</software>.</p><p>For the source code of old software, a real process of computer archaeology must be set up, and we have already started this work in a collaboration with the University of Pisa and UNESCO that has resulted in the SWHAP process that has been used to find, document and archive software that is important in the history of computing in Italy (see https://www.softwareheritage.org/swhap), and which has recently been extended with the <software>Software</software> Stories project, which aims to highlight all the historical elements around a software whose source code has been found (see https://stories.softwareheritage.org).</p></div>
<div><head n="3">A Universal Mission</head><p>The founding principles of <software>Software</software> Heritage are <ref type="bibr" target="#b0">[1]</ref>: systematic use of open source software to build the <software>Software</software> Heritage infrastructure, so that its operation can be understood, and replicated if necessary; construction of a global network of independent mirrors of the archive, because a large number of copies is the best protection against loss and attack; choice of a non-profit, international, multi-stakeholder structure, to minimize the risk of having single points of failure, and to ensure that <software>Software</software> Heritage will indeed serve all.</p><p>For such a mission, institutional legitimacy is required, as well as openness to federate a broad consensus. This is why the framework agreement signed between Inria and UNESCO on April 3, 2017, and renewed in November 2021, is essential.</p><p>4 Past, Present, Future: Much More Than an Archive <software>Software</software> Heritage is now an infrastructure that grows day by day: the bulk of the archive's content is the result of automatic harvesting, but pearls are beginning to be introduced through the patient work of recovering significant historical software, following the SWHAP acquisition process that has been developed in collaboration with the University of Pisa and UNESCO.</p><p>Exhaustiveness is still far from being achieved, but the archive already contains the largest corpus of source code available on the planet, with more than 180 million archived origins, for over 12 billion unique source files, each equipped with an intrinsic identifier based on cryptographic hashes [2,3] (Fig. <ref type="figure" target="#fig_0">1</ref>). This unique infrastructure has a multiple mission: of course, it is about preserving for future generations the source codes of the past that made the history of Computer Science and the Information Society, but also, and above all, we are trying to build a very large telescope that will allow us to explore the present evolution of the software development galaxy, in order to better understand it, and to improve it, in order to build a better technological future.</p></div>
<div><head n="5">A Peek Under the Hood</head><p>In Fig. <ref type="figure" target="#fig_1">2</ref> one can find a high level overview of the architecture of the <software>Software</software> Heritage <software>crawler</software>, and of the key data structure that is used to store all the source code with its development history. <software>Software</software> development and distribution platforms abound, and there is no single standard protocol to interact with them, so <software>Software</software> Heritage is building, with the help of a growing community, a large set of connectors, called listers, to identify the available software projects. There is no single standard for keeping track of versions of software either, nor for distributing packaged software, so we are also building a large set of converters, called loaders, that are able to encode all these different formats in a single, universal data structure, that is based on the Merkle tree construction <ref type="bibr" target="#b3">[4]</ref>. This uniform data structure contains today over 30 billion nodes and 350 billion edges, one of the largest public graphs available. In this giant Merkle graph, every software artefact is identified by a cryptographic intrinsic persistent identifier, called SWHID, that can be used to check integrity of the artifact without relying on any central registry. A key side effect is the fact that duplicate artifacts can be immediately spotted (they have the same identifier!), and the <software>Software</software> Heritage archive only keeps one copy of each of them, while keeping track of all their occurrences.</p></div>
<div><head n="6">Beyond Preservation, A Strategic Issue</head><p>The <software>Software</software> Heritage archive is already the most important source code collection in the world, but there is still a long way to go: a wide range of players, from cultural heritage to industry, from research to public administration, must be brought together around it. To do this, we are counting on a growing network of ambassadors (see https://softwareheritage.org/ambassadors/). It is clear that software has become an essential component of all human activity, and therefore unrestricted access to publicly available software source codes is becoming a digital sovereignty issue for all nations. The unique infrastructure that <software>Software</software> Heritage is building, and its universal approach, is an essential element to meet this challenge of digital sovereignty while preserving the common good dimension of the archive. It is therefore of the utmost importance that institutional, industrial, academic and civil society actors grasp the importance of these issues, providing the necessary resources to make <software>Software</software> Heritage grow and last, by taking their place alongside other international actors who are already committed, and by supporting the creation of an international non-profit institution that will carry out this mission over the long term.</p></div>
<div><head n="7">For More Information</head><p>You can learn more about the project by visiting www.softwareheritage.org, annex.softwareheritage.org and docs.softwareheritage.org. It is possible to easily explore the source codes contained in <software>Software</software> Heritage on archive.softwareheritage.org.</p></div><figure xml:id="fig_0"><head>Fig. 1 .</head><label>1</label><figDesc>Fig. 1. Number of projects, source files, and versions archived in Sofware Heritage as of June 2022 (see https://www.softwareheritate.org/archive)</figDesc><graphic coords="4,70.98,207.80,310.90,129.46" type="bitmap" /></figure>
<figure xml:id="fig_1"><head>Fig. 2 .</head><label>2</label><figDesc>Fig. 2. The Software Heritage architecture: crawling and data structure</figDesc><graphic coords="5,57.30,134.12,309.22,171.04" type="bitmap" /></figure>
			<note place="foot" n="1" xml:id="foot_0"><p>Gnu general public license, version</p></note>
			<note place="foot" xml:id="foot_1"><p>2, 1991. Retrieved September 2015. 2 Preface to Abelson, H., and Sussman, G. J. S. (1985). Structure and Interpretation of Computer Programs. The MIT Press. c The Author(s) 2022 G. Silvello et al. (Eds.): TPDL 2022, LNCS 13541, pp. 3-7, 2022. https://doi.org/10.1007/978-3-031-16802-4_1</p></note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Building the universal archive of source code</title>
		<author>
			<persName><forename type="first">J.-F</forename><surname>Abramatic</surname></persName>
		</author>
		<author>
			<persName><forename type="first">R</forename><surname>Di Cosmo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Zacchiroli</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Commun. ACM</title>
		<imprint>
			<biblScope unit="volume">61</biblScope>
			<biblScope unit="issue">10</biblScope>
			<biblScope unit="page" from="29" to="31" />
			<date type="published" when="2018">2018</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Archiving and referencing source code with software heritage</title>
		<author>
			<persName><forename type="first">R</forename><surname>Di Cosmo</surname></persName>
		</author>
		<idno type="DOI">10.1007/978-3-030-52200-1_36</idno>
		<ptr target="https://doi.org/10.1007/978-3-030-52200-1" />
	</analytic>
	<monogr>
		<title level="m">ICMS 2020. LNCS</title>
		<editor>
			<persName><forename type="first">A</forename><forename type="middle">M</forename><surname>Bigatti</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">J</forename><surname>Carette</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">J</forename><forename type="middle">H</forename><surname>Davenport</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">M</forename><surname>Joswig</surname></persName>
		</editor>
		<editor>
			<persName><forename type="first">T</forename><surname>De Wolff</surname></persName>
		</editor>
		<meeting><address><addrLine>Cham</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2020">2020</date>
			<biblScope unit="volume">12097</biblScope>
			<biblScope unit="page" from="362" to="373" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Referencing source code artifacts: a separate concern in software citation</title>
		<author>
			<persName><forename type="first">R</forename><surname>Di Cosmo</surname></persName>
		</author>
		<author>
			<persName><forename type="first">M</forename><surname>Gruenpeter</surname></persName>
		</author>
		<author>
			<persName><forename type="first">S</forename><surname>Zacchiroli</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comput. Sci. Eng</title>
		<imprint>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="33" to="43" />
			<date type="published" when="2020">2020</date>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">A digital signature based on a conventional encryption function</title>
		<author>
			<persName><forename type="first">R</forename><forename type="middle">C</forename><surname>Merkle</surname></persName>
		</author>
		<idno type="DOI">10.1007/3-540-48184-2_32</idno>
		<ptr target="https://doi.org/10.1007/3-540-48184-2" />
	</analytic>
	<monogr>
		<title level="m">CRYPTO 1987. LNCS</title>
		<editor>
			<persName><forename type="first">C</forename><surname>Pomerance</surname></persName>
		</editor>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="1988">1988</date>
			<biblScope unit="volume">293</biblScope>
			<biblScope unit="page" from="369" to="378" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">What should we collect to preserve the history of software?</title>
		<author>
			<persName><forename type="first">L</forename><forename type="middle">J</forename><surname>Shustek</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Ann. Hist. Comput</title>
		<imprint>
			<biblScope unit="volume">28</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="110" to="112" />
			<date type="published" when="2006">2006</date>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>